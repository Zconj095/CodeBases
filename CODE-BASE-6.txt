 
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAudioModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{ 
    [Serializable]    
    public class EnviroAudio 
    {
        public List<EnviroAudioClip> ambientClips = new List<EnviroAudioClip>();
        public List<EnviroAudioClip> weatherClips = new List<EnviroAudioClip>();
        public List<EnviroAudioClip> thunderClips = new List<EnviroAudioClip>();
        public float ambientMasterVolume = 1f;
        public float weatherMasterVolume = 1f;
        public float thunderMasterVolume = 1f;
    }

    [Serializable]
    public class EnviroAudioClip 
    {
        public enum PlayBackType
        {
            Always,
            BasedOnSun,
            BasedOnMoon
        }

        public bool showEditor;
        public string name;
        public AudioClip audioClip;
        public UnityEngine.Audio.AudioMixerGroup audioMixerGroup;
        public PlayBackType playBackType;
        public AudioSource myAudioSource;
        public bool loop = false;
        public float volume = 0f;
        public AnimationCurve volumeCurve = new AnimationCurve();
        public float maxVolume = 1f;
    }  
 
    [Serializable]
    [ExecuteInEditMode]
    public class EnviroAudioModule : EnviroModule
    {  
        public Enviro.EnviroAudio Settings;
        public EnviroAudioModule preset;

        public float ambientVolumeModifier, weatherVolumeModifier, thunderVolumeModifier = 0f;

        //Inspector
        public bool showAmbientSetupControls,showWeatherSetupControls,showThunderSetupControls, showAudioControls;

        public override void Enable ()
        { 
            if(EnviroManager.instance == null)
               return;

            CreateAudio();
        } 

        public override void Disable ()
        { 
            if(EnviroManager.instance == null)
               return;

            Cleanup();
        }

        private void Setup()
        {
     
        }  

        private void Cleanup()
        {
            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Objects.audio != null)
               DestroyImmediate(EnviroManager.instance.Objects.audio);
        }

        
        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 
               
            UpdateAudio();
        }

        public void CreateAudio()
        {
            if(EnviroManager.instance.Objects.audio != null)
               DestroyImmediate(EnviroManager.instance.Objects.audio);

            if(EnviroManager.instance.Objects.audio == null)
            {
                EnviroManager.instance.Objects.audio = new GameObject();
                EnviroManager.instance.Objects.audio.name = "Audio";
                EnviroManager.instance.Objects.audio.transform.SetParent(EnviroManager.instance.transform);
                EnviroManager.instance.Objects.audio.transform.localPosition = Vector3.zero;
            }

            //Ambient
            for(int i = 0; i < Settings.ambientClips.Count; i++)
            {
                if(Settings.ambientClips[i].myAudioSource != null)
                    DestroyImmediate(Settings.ambientClips[i].myAudioSource.gameObject);

                GameObject sys;
                  
                if(Settings.ambientClips[i].audioClip != null)
                {
                   sys = new GameObject();
                   sys.name = "Ambient - " +Settings.ambientClips[i].name;
                   sys.transform.SetParent(EnviroManager.instance.Objects.audio.transform);             
                   Settings.ambientClips[i].myAudioSource = sys.AddComponent<AudioSource>();
                   Settings.ambientClips[i].myAudioSource.clip = Settings.ambientClips[i].audioClip;
                   Settings.ambientClips[i].myAudioSource.loop = Settings.ambientClips[i].loop;
                   Settings.ambientClips[i].myAudioSource.volume = Settings.ambientClips[i].volume;
                   Settings.ambientClips[i].myAudioSource.outputAudioMixerGroup = Settings.ambientClips[i].audioMixerGroup;
                }
            }

            //Weather
            for(int i = 0; i < Settings.weatherClips.Count; i++)
            {
                if(Settings.weatherClips[i].myAudioSource != null)
                    DestroyImmediate(Settings.weatherClips[i].myAudioSource.gameObject);

                GameObject sys;
                  
                if(Settings.weatherClips[i].audioClip != null)
                {
                   sys = new GameObject();
                   sys.name = "Weather - " + Settings.weatherClips[i].name;
                   sys.transform.SetParent(EnviroManager.instance.Objects.audio.transform);             
                   Settings.weatherClips[i].myAudioSource = sys.AddComponent<AudioSource>();
                   Settings.weatherClips[i].myAudioSource.clip = Settings.weatherClips[i].audioClip;
                   Settings.weatherClips[i].myAudioSource.loop = Settings.weatherClips[i].loop;
                   Settings.weatherClips[i].myAudioSource.volume = Settings.weatherClips[i].volume;
                   Settings.weatherClips[i].myAudioSource.outputAudioMixerGroup = Settings.weatherClips[i].audioMixerGroup;
                }
            }

            //Tunder
            for(int i = 0; i < Settings.thunderClips.Count; i++)
            {
                if(Settings.thunderClips[i].myAudioSource != null)
                    DestroyImmediate(Settings.thunderClips[i].myAudioSource.gameObject);

                GameObject sys;
                  
                if(Settings.thunderClips[i].audioClip != null)
                {
                   sys = new GameObject();
                   sys.name = "Thunder - " + Settings.thunderClips[i].name;
                   sys.transform.SetParent(EnviroManager.instance.Objects.audio.transform);             
                   Settings.thunderClips[i].myAudioSource = sys.AddComponent<AudioSource>();
                   Settings.thunderClips[i].myAudioSource.clip = Settings.thunderClips[i].audioClip;
                   Settings.thunderClips[i].myAudioSource.loop = false;
                   Settings.thunderClips[i].myAudioSource.playOnAwake = false;
                   Settings.thunderClips[i].myAudioSource.volume = Settings.thunderClips[i].volume;
                   Settings.thunderClips[i].myAudioSource.outputAudioMixerGroup = Settings.thunderClips[i].audioMixerGroup;
                }
            }
        } 

        //Plays random thunder SFX audio.
        public void PlayRandomThunderSFX()
        {
            int thunderSFX = UnityEngine.Random.Range(0,Settings.thunderClips.Count);

            if(Settings.thunderClips.Count > 0 && Settings.thunderClips[thunderSFX] != null)
            {
                Settings.thunderClips[thunderSFX].myAudioSource.volume = Settings.thunderClips[thunderSFX].volume * Settings.thunderMasterVolume + thunderVolumeModifier;
                Settings.thunderClips[thunderSFX].myAudioSource.PlayOneShot(Settings.thunderClips[thunderSFX].myAudioSource.clip);
            } 
        }

        public void UpdateAudio()
        {
            for(int i = 0; i < Settings.ambientClips.Count; i++)
            {
                UpdateEnviroAudioClip(Settings.ambientClips[i],Settings.ambientMasterVolume + ambientVolumeModifier);
            }

            for(int i = 0; i < Settings.weatherClips.Count; i++)
            {
                UpdateEnviroAudioClip(Settings.weatherClips[i],Settings.weatherMasterVolume + weatherVolumeModifier);
            }
        } 

        void UpdateEnviroAudioClip(EnviroAudioClip clip, float masterVolume)
        { 
            if(clip.audioClip != null && clip.myAudioSource != null)
            {  
                if(!Application.isPlaying)
                {
                    clip.myAudioSource.Stop();
                     return;
                } 
 
                clip.myAudioSource.loop = clip.loop;

                switch (clip.playBackType) 
                {
                    case EnviroAudioClip.PlayBackType.Always:
                    clip.myAudioSource.volume = clip.volume * masterVolume;
                    break;

                    case EnviroAudioClip.PlayBackType.BasedOnSun:
                    clip.myAudioSource.volume = clip.volumeCurve.Evaluate(EnviroManager.instance.solarTime);
                    clip.myAudioSource.volume *= clip.volume * masterVolume;
                    break;

                    case EnviroAudioClip.PlayBackType.BasedOnMoon:
                    clip.myAudioSource.volume = clip.volumeCurve.Evaluate(EnviroManager.instance.lunarTime);
                    clip.myAudioSource.volume *= clip.volume * masterVolume;
                    break;
                }
               
                //Enable or disable playback based on volume
                if(clip.myAudioSource.volume < 0.001f && clip.myAudioSource.isPlaying)
                    clip.myAudioSource.Stop();

                if(clip.myAudioSource.volume > 0f && !clip.myAudioSource.isPlaying)
                    clip.myAudioSource.Play();
            }
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroAudio>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        } 

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroAudioModule t =  ScriptableObject.CreateInstance<EnviroAudioModule>();
        t.name = "Audio Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroAudio>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroAudioModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroAudio>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAudioModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAudioModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroAudioModule))]
    public class EnviroAudioModuleEditor : EnviroModuleEditor
    {   
        private EnviroAudioModule myTarget; 

        //Properties
      //  private SerializedProperty someProp;  
      
        //On Enable
        public override void OnEnable()
        {
            if(!target)
                return; 

            myTarget = (EnviroAudioModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
        } 
        public override void OnInspectorGUI()
        {
            if(!target)
                return; 

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Audio", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Audio);
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck(); 

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;

                myTarget.showAudioControls = GUILayout.Toggle(myTarget.showAudioControls, "Audio Controls", headerFoldout);              
                if(myTarget.showAudioControls)
                { 
                     myTarget.Settings.ambientMasterVolume = EditorGUILayout.Slider ("Ambient Master Volume", myTarget.Settings.ambientMasterVolume,0f,1f);
                     myTarget.Settings.weatherMasterVolume = EditorGUILayout.Slider ("Weather Master Volume", myTarget.Settings.weatherMasterVolume,0f,1f);
                     myTarget.Settings.thunderMasterVolume = EditorGUILayout.Slider ("Thunder Master Volume", myTarget.Settings.thunderMasterVolume,0f,1f);
                }
                GUILayout.EndVertical ();

                //Ambient Clips Setup
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;

                myTarget.showAmbientSetupControls = GUILayout.Toggle(myTarget.showAmbientSetupControls, "Ambient Sounds", headerFoldout);              
                if(myTarget.showAmbientSetupControls)
                {
                    GUILayout.Space(10);
                    if (!Application.isPlaying) 
                    {
                        if (GUILayout.Button ("Add")) 
                        {
                            myTarget.Settings.ambientClips.Add (new EnviroAudioClip ());
                        }
                    } 
                    else
                        EditorGUILayout.LabelField ("Can't add effects in runtime!");

                    if (GUILayout.Button ("Apply Changes")) 
                    {
                        myTarget.CreateAudio();
                    }
 
                    GUILayout.Space(10);
                    
                    for (int i = 0; i < myTarget.Settings.ambientClips.Count; i++) 
                    {      
                        GUILayout.BeginVertical ("", boxStyleModified);
                        EditorGUILayout.BeginHorizontal();
                        myTarget.Settings.ambientClips[i].showEditor = GUILayout.Toggle(myTarget.Settings.ambientClips[i].showEditor, myTarget.Settings.ambientClips[i].name, headerFoldout);
                        GUILayout.FlexibleSpace();
                        if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                        { 
                            myTarget.Settings.ambientClips.Remove (myTarget.Settings.ambientClips[i]);
                            return;
                        }           
                        EditorGUILayout.EndHorizontal();

                        if(myTarget.Settings.ambientClips[i].showEditor)
                        {
                        Undo.RecordObject(target, "Ambient Audio Changed");
                        myTarget.Settings.ambientClips[i].name = EditorGUILayout.TextField ("Audio Name", myTarget.Settings.ambientClips[i].name);
                        myTarget.Settings.ambientClips[i].audioClip = (AudioClip)EditorGUILayout.ObjectField ("Audio Clip", myTarget.Settings.ambientClips[i].audioClip, typeof(AudioClip), true);
                        myTarget.Settings.ambientClips[i].audioMixerGroup = (UnityEngine.Audio.AudioMixerGroup)EditorGUILayout.ObjectField ("Audio Mixer Group", myTarget.Settings.ambientClips[i].audioMixerGroup, typeof(UnityEngine.Audio.AudioMixerGroup), true);
                        GUILayout.Space(5);
                        myTarget.Settings.ambientClips[i].playBackType = (EnviroAudioClip.PlayBackType)EditorGUILayout.EnumPopup("Playback Type", myTarget.Settings.ambientClips[i].playBackType);
                        
                        if(myTarget.Settings.ambientClips[i].playBackType == EnviroAudioClip.PlayBackType.BasedOnSun || myTarget.Settings.ambientClips[i].playBackType == EnviroAudioClip.PlayBackType.BasedOnMoon)
                           {
                           myTarget.Settings.ambientClips[i].volumeCurve = EditorGUILayout.CurveField ("Volume", myTarget.Settings.ambientClips [i].volumeCurve);
                           myTarget.Settings.ambientClips[i].volume = EditorGUILayout.Slider ("Volume Modifier", myTarget.Settings.ambientClips [i].volume,0f,1f);
                           }
                        else
                           myTarget.Settings.ambientClips[i].volume = EditorGUILayout.Slider ("Volume", myTarget.Settings.ambientClips [i].volume,0f,1f);
                        
                        myTarget.Settings.ambientClips[i].loop = EditorGUILayout.Toggle("Loop",myTarget.Settings.ambientClips[i].loop);
                             
                        } 
                        GUILayout.EndVertical ();
                    }

                }
                GUILayout.EndVertical();

                //Weather sounds
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                
                myTarget.showWeatherSetupControls = GUILayout.Toggle(myTarget.showWeatherSetupControls, "Weather Sounds", headerFoldout);              
                if(myTarget.showWeatherSetupControls)
                {
                    GUILayout.Space(10);
                    if (!Application.isPlaying) 
                    {
                        if (GUILayout.Button ("Add")) 
                        {
                            myTarget.Settings.weatherClips.Add (new EnviroAudioClip ());
                        }
                    } 
                    else
                        EditorGUILayout.LabelField ("Can't add effects in runtime!");

                    if (GUILayout.Button ("Apply Changes")) 
                    {
                        myTarget.CreateAudio();
                    }

                    GUILayout.Space(10);
                    
                    for (int i = 0; i < myTarget.Settings.weatherClips.Count; i++) 
                    {        
                        GUILayout.BeginVertical ("", boxStyleModified);
                        EditorGUILayout.BeginHorizontal();
                        myTarget.Settings.weatherClips[i].showEditor = GUILayout.Toggle(myTarget.Settings.weatherClips[i].showEditor, myTarget.Settings.weatherClips[i].name, headerFoldout);
                        GUILayout.FlexibleSpace();
                        if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                        { 
                            myTarget.Settings.weatherClips.Remove (myTarget.Settings.weatherClips[i]);
                            return;
                        }           
                        EditorGUILayout.EndHorizontal();

                        if(myTarget.Settings.weatherClips[i].showEditor)
                        {
                        Undo.RecordObject(target, "Weather Audio Changed");
                        myTarget.Settings.weatherClips[i].name = EditorGUILayout.TextField ("Audio Name", myTarget.Settings.weatherClips[i].name);
                        myTarget.Settings.weatherClips[i].audioClip = (AudioClip)EditorGUILayout.ObjectField ("Audio Clip", myTarget.Settings.weatherClips[i].audioClip, typeof(AudioClip), true);
                        myTarget.Settings.weatherClips[i].audioMixerGroup = (UnityEngine.Audio.AudioMixerGroup)EditorGUILayout.ObjectField ("Audio Mixer Group", myTarget.Settings.weatherClips[i].audioMixerGroup, typeof(UnityEngine.Audio.AudioMixerGroup), true);
                        GUILayout.Space(5); 
                        myTarget.Settings.weatherClips[i].playBackType = (EnviroAudioClip.PlayBackType)EditorGUILayout.EnumPopup("Playback Type", myTarget.Settings.weatherClips[i].playBackType);
                        
                       if(myTarget.Settings.weatherClips[i].playBackType == EnviroAudioClip.PlayBackType.BasedOnSun || myTarget.Settings.weatherClips[i].playBackType == EnviroAudioClip.PlayBackType.BasedOnMoon)
                           {
                           myTarget.Settings.weatherClips[i].volumeCurve = EditorGUILayout.CurveField ("Volume", myTarget.Settings.weatherClips [i].volumeCurve);
                           myTarget.Settings.weatherClips[i].volume = EditorGUILayout.Slider ("Volume Modifier", myTarget.Settings.weatherClips [i].volume,0f,1f);
                           }
                        else
                           myTarget.Settings.weatherClips[i].volume = EditorGUILayout.Slider ("Volume", myTarget.Settings.weatherClips [i].volume,0f,1f);
                        
                        myTarget.Settings.weatherClips[i].loop = EditorGUILayout.Toggle("Loop",myTarget.Settings.weatherClips[i].loop);
                             
                        } 
                        GUILayout.EndVertical ();
                    }

                }
                GUILayout.EndVertical();

                //Thunder sounds
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                
                myTarget.showThunderSetupControls = GUILayout.Toggle(myTarget.showThunderSetupControls, "Thunder Sounds", headerFoldout);              
                if(myTarget.showThunderSetupControls)
                {
                    GUILayout.Space(10);
                    if (!Application.isPlaying) 
                    {
                        if (GUILayout.Button ("Add")) 
                        {
                            myTarget.Settings.thunderClips.Add (new EnviroAudioClip ());
                        }
                    }  
                    else
                        EditorGUILayout.LabelField ("Can't add effects in runtime!");

                    if (GUILayout.Button ("Apply Changes")) 
                    {
                        myTarget.CreateAudio();
                    }

                    GUILayout.Space(10);
                    
                    for (int i = 0; i < myTarget.Settings.thunderClips.Count; i++) 
                    {         
                        GUILayout.BeginVertical ("", boxStyleModified);
                        EditorGUILayout.BeginHorizontal();
                        myTarget.Settings.thunderClips[i].showEditor = GUILayout.Toggle(myTarget.Settings.thunderClips[i].showEditor, myTarget.Settings.thunderClips[i].name, headerFoldout);
                        
                        GUILayout.FlexibleSpace();
                        if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                        { 
                            myTarget.Settings.thunderClips.Remove (myTarget.Settings.thunderClips[i]);
                            return;
                        }           
                        EditorGUILayout.EndHorizontal();

                        if(myTarget.Settings.thunderClips[i].showEditor)
                        {
                        Undo.RecordObject(target, "Thunder Audio Changed");
                        myTarget.Settings.thunderClips[i].name = EditorGUILayout.TextField ("Audio Name", myTarget.Settings.thunderClips[i].name);
                        myTarget.Settings.thunderClips[i].audioClip = (AudioClip)EditorGUILayout.ObjectField ("Audio Clip", myTarget.Settings.thunderClips[i].audioClip, typeof(AudioClip), true);
                        myTarget.Settings.thunderClips[i].audioMixerGroup = (UnityEngine.Audio.AudioMixerGroup)EditorGUILayout.ObjectField ("Audio Mixer Group", myTarget.Settings.thunderClips[i].audioMixerGroup, typeof(UnityEngine.Audio.AudioMixerGroup), true);
                        GUILayout.Space(5);                   
                        myTarget.Settings.thunderClips[i].volume = EditorGUILayout.Slider ("Volume", myTarget.Settings.thunderClips [i].volume,0f,1f);                            
                        } 
                        GUILayout.EndVertical ();
                    }

                }
                GUILayout.EndVertical();
              
               /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();

    
                }
                GUILayout.EndVertical();
                /// Save Load End

                ApplyChanges ();
                EditorUtility.SetDirty (target);
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAudioModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAuroraModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroAurora
    { 
        public bool useAurora = true;
        [Header("Aurora Intensity")]
        [Range(0f,1f)]
        public float auroraIntensityModifier = 1f;
        public AnimationCurve auroraIntensity = new AnimationCurve(new Keyframe(0f, 1f), new Keyframe(0.5f, 0.1f), new Keyframe(1f, 0f));
 
        // 
        [Header("Aurora Color and Brightness")]
        public Color auroraColor = new Color(0.1f, 0.5f, 0.7f);
        public float auroraBrightness = 75f;
        public float auroraContrast = 10f;
        // 
        [Header("Aurora Height and Scale")]
        public float auroraHeight = 20000f;
        [Range(0f, 0.025f)]
        public float auroraScale = 0.01f;
        //
        [Header("Aurora Performance")]
        [Range(8, 32)]
        public int auroraSteps = 20;
        //
        [Header("Aurora Modelling and Animation")]
        public Vector4 auroraLayer1Settings = new Vector4(0.1f, 0.1f, 0f, 0.5f);
        public Vector4 auroraLayer2Settings = new Vector4(5f, 5f, 0f, 0.5f);
        public Vector4 auroraColorshiftSettings = new Vector4(0.05f, 0.05f, 0f, 5f);
        [Range(0f, 0.1f)]
        public float auroraSpeed = 0.005f;
        [Header("Aurora Textures")]
        public Texture2D aurora_layer_1;
        public Texture2D aurora_layer_2;
        public Texture2D aurora_colorshift;
    } 

    [Serializable]
    public class EnviroAuroraModule : EnviroModule
    {  
        public Enviro.EnviroAurora Settings;
        public EnviroAuroraModule preset;
        public bool showAuroraControls;

        
        // Update Method
        public override void UpdateModule ()
        {  

            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Sky != null)
            {
                UpdateAuroraShader();
            }
        }

        public void UpdateAuroraShader ()
        {
            if(!Settings.useAurora)
            {
                Shader.SetGlobalFloat("_Aurora", 0f);
                return;
            } 
             else
                Shader.SetGlobalFloat("_Aurora", 1f);

            if (Settings.aurora_layer_1 != null)
                Shader.SetGlobalTexture("_Aurora_Layer_1", Settings.aurora_layer_1);

            if (Settings.aurora_layer_2 != null)
                Shader.SetGlobalTexture("_Aurora_Layer_2", Settings.aurora_layer_2);

            if (Settings.aurora_colorshift != null)
                Shader.SetGlobalTexture("_Aurora_Colorshift", Settings.aurora_colorshift);

            Shader.SetGlobalFloat("_AuroraIntensity", Mathf.Clamp01(Settings.auroraIntensityModifier * Settings.auroraIntensity.Evaluate(EnviroManager.instance.solarTime)));
            Shader.SetGlobalFloat("_AuroraBrightness", Settings.auroraBrightness);
            Shader.SetGlobalFloat("_AuroraContrast", Settings.auroraContrast);
            Shader.SetGlobalColor("_AuroraColor", Settings.auroraColor);
            Shader.SetGlobalFloat("_AuroraHeight", Settings.auroraHeight);
            Shader.SetGlobalFloat("_AuroraScale", Settings.auroraScale);
            Shader.SetGlobalFloat("_AuroraSpeed", Settings.auroraSpeed);
            Shader.SetGlobalFloat("_AuroraSteps", Settings.auroraSteps);
            Shader.SetGlobalFloat("_AuroraSteps", Settings.auroraSteps);
            Shader.SetGlobalVector("_Aurora_Tiling_Layer1", Settings.auroraLayer1Settings);
            Shader.SetGlobalVector("_Aurora_Tiling_Layer2", Settings.auroraLayer2Settings);
            Shader.SetGlobalVector("_Aurora_Tiling_ColorShift", Settings.auroraColorshiftSettings);
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroAurora>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        } 

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroAuroraModule t =  ScriptableObject.CreateInstance<EnviroAuroraModule>();
        t.name = "Aurora Preset";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroAurora>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroAuroraModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroAurora>(JsonUtility.ToJson(Settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAuroraModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAuroraModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroAuroraModule))]
    public class EnviroAuroraModuleEditor : EnviroModuleEditor
    {  
        private EnviroAuroraModule myTarget; 

        //Properties
        private SerializedProperty useAurora,auroraIntensity,auroraIntensityModifier, auroraColor, auroraBrightness, auroraContrast, auroraHeight, auroraScale, auroraSteps, auroraLayer1Settings, auroraLayer2Settings, auroraColorshiftSettings, auroraSpeed,
        aurora_layer_1, aurora_layer_2, aurora_colorshift;


        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroAuroraModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            
            useAurora = serializedObj.FindProperty("Settings.useAurora");
            auroraIntensity = serializedObj.FindProperty("Settings.auroraIntensity");
            auroraIntensityModifier = serializedObj.FindProperty("Settings.auroraIntensityModifier");
            auroraColor = serializedObj.FindProperty("Settings.auroraColor");
            auroraBrightness = serializedObj.FindProperty("Settings.auroraBrightness");
            auroraContrast = serializedObj.FindProperty("Settings.auroraContrast");
            auroraHeight = serializedObj.FindProperty("Settings.auroraHeight");
            auroraScale = serializedObj.FindProperty("Settings.auroraScale");
            auroraSteps = serializedObj.FindProperty("Settings.auroraSteps");
            auroraLayer1Settings = serializedObj.FindProperty("Settings.auroraLayer1Settings");
            auroraLayer2Settings = serializedObj.FindProperty("Settings.auroraLayer2Settings");
            auroraColorshiftSettings = serializedObj.FindProperty("Settings.auroraColorshiftSettings");
            auroraSpeed = serializedObj.FindProperty("Settings.auroraSpeed");
            aurora_layer_1 = serializedObj.FindProperty("Settings.aurora_layer_1");
            aurora_layer_2 = serializedObj.FindProperty("Settings.aurora_layer_2");
            aurora_colorshift = serializedObj.FindProperty("Settings.aurora_colorshift");
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;
            
            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Aurora", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Aurora); //Add Remove
                DestroyImmediate(this);
                return; 
            }  
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Set Values
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showAuroraControls = GUILayout.Toggle(myTarget.showAuroraControls, "Aurora Controls", headerFoldout);               
                if(myTarget.showAuroraControls)
                {  
                    GUILayout.Space(5);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(useAurora);
                    DisableInputEndQuality();
                    GUILayout.Space(5);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(auroraIntensityModifier);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(auroraIntensity);
                    EditorGUILayout.PropertyField(auroraColor);
                    EditorGUILayout.PropertyField(auroraBrightness);
                    EditorGUILayout.PropertyField(auroraContrast);
                    EditorGUILayout.PropertyField(auroraHeight); 
                    EditorGUILayout.PropertyField(auroraScale);
                    EditorGUILayout.PropertyField(auroraSteps); 
                    EditorGUILayout.PropertyField(auroraLayer1Settings);
                    EditorGUILayout.PropertyField(auroraLayer2Settings);
                    EditorGUILayout.PropertyField(auroraColorshiftSettings);
                    EditorGUILayout.PropertyField(auroraSpeed);

                    EditorGUILayout.PropertyField(aurora_layer_1);
                    EditorGUILayout.PropertyField(aurora_layer_2);
                    EditorGUILayout.PropertyField(aurora_colorshift);
                }
                GUILayout.EndVertical();


                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroAuroraModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroBaseInspector.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine; 
using UnityEditor;
using System;
using System.Linq;

public class EnviroBaseInspector : Editor
{ 
    public SerializedObject serializedObj;
    public GUIStyle boxStyle;
    public GUIStyle boxStyleModified;
    public GUIStyle wrapStyle;
    public GUIStyle headerStyle;
    public GUIStyle headerStyleMid;
    public GUIStyle headerFoldout;
    public GUIStyle popUpStyle;
    public GUIStyle integrationBox;
    public GUIStyle helpButton; 
    public bool showHelpBox;

    public Color baseModuleColor = new Color(0.0f,0.0f,0.5f,1f);
    public Color categoryModuleColor = new Color(0.5f,0.5f,0.0f,1f);
    public Color thirdPartyModuleColor = new Color(0.0f,0.5f,0.5f,1f);

    public void SetupGUIStyles ()
    {
        if (boxStyle == null)
        {
            boxStyle = new GUIStyle(GUI.skin.box);
            boxStyle.normal.textColor = GUI.skin.label.normal.textColor;
            boxStyle.fontStyle = FontStyle.Bold;
            boxStyle.alignment = TextAnchor.UpperLeft;
        }

        if (boxStyleModified == null)
        {
            boxStyleModified = new GUIStyle(EditorStyles.helpBox);
            boxStyleModified.normal.textColor = GUI.skin.label.normal.textColor;
            boxStyleModified.fontStyle = FontStyle.Bold;
            boxStyleModified.fontSize = 11;
            boxStyleModified.alignment = TextAnchor.UpperLeft;
        }

        if (integrationBox == null)
        {
            integrationBox = new GUIStyle(EditorStyles.helpBox);
            integrationBox.fontStyle = FontStyle.Bold;
            integrationBox.fontSize = 11;
        }

        if (wrapStyle == null)
        {
            wrapStyle = new GUIStyle(GUI.skin.label);
            wrapStyle.fontStyle = FontStyle.Normal;
            wrapStyle.wordWrap = true;
        }

        if (headerStyle == null)
        {
            headerStyle = new GUIStyle(GUI.skin.label);
            headerStyle.fontStyle = FontStyle.Bold;
            headerStyle.alignment = TextAnchor.UpperLeft;
        }

        if (headerStyleMid == null)
        {
            headerStyleMid = new GUIStyle(GUI.skin.label);
            headerStyleMid.fontStyle = FontStyle.Bold;
            headerStyleMid.alignment = TextAnchor.MiddleCenter;
        }

        if (headerFoldout == null)
        {
            headerFoldout = new GUIStyle(EditorStyles.foldout);
            headerFoldout.fontStyle = FontStyle.Bold;
        }

        if (popUpStyle == null)
        {
            popUpStyle = new GUIStyle(EditorStyles.popup);
            popUpStyle.alignment = TextAnchor.MiddleCenter;
            popUpStyle.fixedHeight = 20f;
            popUpStyle.fontStyle = FontStyle.Bold;
        }

        if (helpButton == null)
        {
            helpButton = new GUIStyle(EditorStyles.miniButtonRight);
            //helpButton.alignment = TextAnchor.UpperRight;
            helpButton.margin = new RectOffset(100,0,0,0);

        }
    }

    public void RenderHelpBoxButton()
    {
        //Help Box Button
        EditorGUILayout.BeginHorizontal();
        GUILayout.FlexibleSpace();
        if(GUILayout.Button("?", EditorStyles.miniButton,GUILayout.Width(20), GUILayout.Height(20)))
        {
            if(showHelpBox)
                showHelpBox = false;
            else
                showHelpBox = true;
        }
        EditorGUILayout.EndHorizontal();
        //End Help Box Button
    }

    public void RenderHelpBox(string content)
    {
       // GUILayout.BeginVertical("",EditorStyles.helpBox);
        GUILayout.Label(content,EditorStyles.helpBox);
    }

     public void RenderIntegrationTextBox(string content)
    {
       // GUILayout.BeginVertical("",EditorStyles.helpBox);
        GUILayout.Label(content,integrationBox);
    }

    public void RenderDisableInputBox()
    {  
        if(Enviro.EnviroManager.instance != null)
        {
           if (Enviro.EnviroManager.instance.Weather != null && Enviro.EnviroManager.instance.Quality != null)
           {
            //both
             GUILayout.Label("Some settings are controlled from weather and quality modules!",EditorStyles.helpBox);
           }
           else if(Enviro.EnviroManager.instance.Weather != null && Enviro.EnviroManager.instance.Quality == null)
           {
            //Weather Only
            GUILayout.Label("Some settings are controlled from weather modules!",EditorStyles.helpBox);
           }
           else if(Enviro.EnviroManager.instance.Weather == null && Enviro.EnviroManager.instance.Quality != null)
           {
            // Quality Only
            GUILayout.Label("Some settings are controlled from quality modules!",EditorStyles.helpBox);
           }
           else
           {
            //Show Nothing
           }
     
        }
    }

    public void ApplyChanges ()
	{
		if (EditorGUI.EndChangeCheck ()) {
			serializedObj.ApplyModifiedProperties ();
		}
	}


    public void AddDefineSymbol(string symbol)
    {
        var targets = Enum.GetValues(typeof(BuildTargetGroup))
        .Cast<BuildTargetGroup>()
        .Where(x => x != BuildTargetGroup.Unknown)
        .Where(x => !IsObsolete(x));

        foreach (var target in targets)
        {
            var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(target).Trim();

            var list = defines.Split(';', ' ')
                .Where(x => !string.IsNullOrEmpty(x))
                .ToList();

            if (list.Contains(symbol))
                continue;

            list.Add(symbol);
            defines = list.Aggregate((a, b) => a + ";" + b);

            PlayerSettings.SetScriptingDefineSymbolsForGroup(target, defines);
        }
    }


    bool IsObsolete(BuildTargetGroup group)
    {
        var attrs = typeof(BuildTargetGroup)
            .GetField(group.ToString())
            .GetCustomAttributes(typeof(ObsoleteAttribute), false);

        return attrs != null && attrs.Length > 0;
    }

    public void RemoveDefineSymbol(string symbol)
    {
        string symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup);

        var targets = Enum.GetValues(typeof(BuildTargetGroup))
        .Cast<BuildTargetGroup>()
        .Where(x => x != BuildTargetGroup.Unknown)
        .Where(x => !IsObsolete(x));

        foreach (var target in targets)
        {
            var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(target).Trim();

            if (defines.Contains(symbol))
            {
                defines = defines.Replace(symbol + "; ", "");
                defines = defines.Replace(symbol, "");
                PlayerSettings.SetScriptingDefineSymbolsForGroup(target, defines);
            }
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroBaseInspector.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroCloudsModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroVolumetricCloudsModule))]
    public class EnviroCloudsModuleEditor : EnviroModuleEditor
    {  
        private EnviroVolumetricCloudsModule myTarget; 
        private SerializedProperty dualLayer,customWeatherMap,depthBlending,depthTest,sunLightColorGradient,moonLightColorGradient, ambientColorGradient,ambientLighIntensity,cloudShadows, cloudShadowsIntensity,
        
        noise, detailNoise, curlTex, blueNoise, cloudsWorldScale,maxRenderDistance, atmosphereColorSaturateDistance, cloudsTravelSpeed;
        //Properties Layer 1
        private SerializedProperty bottomCloudsHeightLayer1,topCloudsHeightLayer1,densityLayer1,densitySmoothnessLayer1, coverageLayer1,worleyFreq1Layer1, worleyFreq2Layer1, dilateCoverageLayer1, dilateTypeLayer1,cloudsTypeModifierLayer1, locationOffsetLayer1,
        scatteringIntensityLayer1, silverLiningSpreadLayer1, powderIntensityLayer1, 
        curlIntensityLayer1, lightStepModifierLayer1, lightAbsorbtionLayer1,baseNoiseUVLayer1, detailNoiseUVLayer1,
        baseErosionIntensityLayer1, detailErosionIntensityLayer1, multiScatteringALayer1, multiScatteringBLayer1,multiScatteringCLayer1,anvilBiasLayer1;  
    
        //Properties Layer 2
        private SerializedProperty bottomCloudsHeightLayer2,topCloudsHeightLayer2,densityLayer2,densitySmoothnessLayer2, coverageLayer2,worleyFreq1Layer2, worleyFreq2Layer2, dilateCoverageLayer2, dilateTypeLayer2,cloudsTypeModifierLayer2, locationOffsetLayer2,
        scatteringIntensityLayer2, silverLiningSpreadLayer2, powderIntensityLayer2, 
        curlIntensityLayer2, lightStepModifierLayer2, lightAbsorbtionLayer2, baseNoiseUVLayer2, detailNoiseUVLayer2,
        baseErosionIntensityLayer2, detailErosionIntensityLayer2, multiScatteringALayer2, multiScatteringBLayer2,multiScatteringCLayer2, anvilBiasLayer2;  
        //Properties Quality
        private SerializedProperty volumetricClouds, downsampling, stepsLayer1, stepsLayer2, blueNoiseIntensity, reprojectionBlendTime, lodDistance;

        private SerializedProperty windSpeedModifierLayer1, windUpwardsLayer1, cloudsWindDirectionXModifierLayer1, cloudsWindDirectionYModifierLayer1;
        private SerializedProperty windSpeedModifierLayer2, windUpwardsLayer2, cloudsWindDirectionXModifierLayer2, cloudsWindDirectionYModifierLayer2;
        //On Enable
        public override void OnEnable()
        {
            if(!target)
                return;

            myTarget = (EnviroVolumetricCloudsModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            ambientColorGradient = serializedObj.FindProperty("settingsGlobal.ambientColorGradient");
            ambientLighIntensity = serializedObj.FindProperty("settingsGlobal.ambientLighIntensity"); 
            sunLightColorGradient = serializedObj.FindProperty("settingsGlobal.sunLightColorGradient");
            moonLightColorGradient = serializedObj.FindProperty("settingsGlobal.moonLightColorGradient");
            depthBlending = serializedObj.FindProperty("settingsGlobal.depthBlending"); 
            depthTest = serializedObj.FindProperty("settingsGlobal.depthTest"); 
            dualLayer = serializedObj.FindProperty("settingsGlobal.dualLayer"); 
            cloudShadows = serializedObj.FindProperty("settingsGlobal.cloudShadows");      
            cloudShadowsIntensity = serializedObj.FindProperty("settingsGlobal.cloudShadowsIntensity"); 
            noise = serializedObj.FindProperty("settingsGlobal.noise"); 
            detailNoise = serializedObj.FindProperty("settingsGlobal.detailNoise"); 
            curlTex = serializedObj.FindProperty("settingsGlobal.curlTex"); 
            blueNoise = serializedObj.FindProperty("settingsGlobal.blueNoise"); 
            cloudsWorldScale = serializedObj.FindProperty("settingsGlobal.cloudsWorldScale"); 
            maxRenderDistance = serializedObj.FindProperty("settingsGlobal.maxRenderDistance"); 
            atmosphereColorSaturateDistance = serializedObj.FindProperty("settingsGlobal.atmosphereColorSaturateDistance");         
            cloudsTravelSpeed = serializedObj.FindProperty("settingsGlobal.cloudsTravelSpeed");      
            customWeatherMap = serializedObj.FindProperty("settingsGlobal.customWeatherMap");          
             
            //Quality
            volumetricClouds = serializedObj.FindProperty("settingsQuality.volumetricClouds"); 
            downsampling = serializedObj.FindProperty("settingsQuality.downsampling"); 
            stepsLayer1 = serializedObj.FindProperty("settingsQuality.stepsLayer1"); 
            stepsLayer2 = serializedObj.FindProperty("settingsQuality.stepsLayer2"); 
            blueNoiseIntensity = serializedObj.FindProperty("settingsQuality.blueNoiseIntensity"); 
            reprojectionBlendTime = serializedObj.FindProperty("settingsQuality.reprojectionBlendTime"); 
            lodDistance = serializedObj.FindProperty("settingsQuality.lodDistance"); 

            //Layer 1
            bottomCloudsHeightLayer1 = serializedObj.FindProperty("settingsLayer1.bottomCloudsHeight"); 
            topCloudsHeightLayer1 = serializedObj.FindProperty("settingsLayer1.topCloudsHeight");           
            coverageLayer1 = serializedObj.FindProperty("settingsLayer1.coverage"); 
            worleyFreq1Layer1 = serializedObj.FindProperty("settingsLayer1.worleyFreq1"); 
            worleyFreq2Layer1 = serializedObj.FindProperty("settingsLayer1.worleyFreq2"); 
            dilateCoverageLayer1 = serializedObj.FindProperty("settingsLayer1.dilateCoverage"); 
            dilateTypeLayer1 = serializedObj.FindProperty("settingsLayer1.dilateType"); 
            cloudsTypeModifierLayer1 = serializedObj.FindProperty("settingsLayer1.cloudsTypeModifier"); 
            locationOffsetLayer1 = serializedObj.FindProperty("settingsLayer1.locationOffset"); 
            densityLayer1 = serializedObj.FindProperty("settingsLayer1.density");  
            densitySmoothnessLayer1 = serializedObj.FindProperty("settingsLayer1.densitySmoothness");  
            scatteringIntensityLayer1 = serializedObj.FindProperty("settingsLayer1.scatteringIntensity");  
            silverLiningSpreadLayer1 = serializedObj.FindProperty("settingsLayer1.silverLiningSpread");  
            powderIntensityLayer1 = serializedObj.FindProperty("settingsLayer1.powderIntensity");  
            curlIntensityLayer1 = serializedObj.FindProperty("settingsLayer1.curlIntensity");  
            lightStepModifierLayer1 = serializedObj.FindProperty("settingsLayer1.lightStepModifier");  
            lightAbsorbtionLayer1 = serializedObj.FindProperty("settingsLayer1.lightAbsorbtion");
            baseNoiseUVLayer1 = serializedObj.FindProperty("settingsLayer1.baseNoiseUV");
            detailNoiseUVLayer1 = serializedObj.FindProperty("settingsLayer1.detailNoiseUV");
            baseErosionIntensityLayer1 = serializedObj.FindProperty("settingsLayer1.baseErosionIntensity");
            detailErosionIntensityLayer1 = serializedObj.FindProperty("settingsLayer1.detailErosionIntensity");
            multiScatteringALayer1 = serializedObj.FindProperty("settingsLayer1.multiScatteringA");
            multiScatteringBLayer1 = serializedObj.FindProperty("settingsLayer1.multiScatteringB");
            multiScatteringCLayer1 = serializedObj.FindProperty("settingsLayer1.multiScatteringC");
            anvilBiasLayer1 = serializedObj.FindProperty("settingsLayer1.anvilBias");

            windSpeedModifierLayer1 = serializedObj.FindProperty("settingsLayer1.windSpeedModifier"); 
            windUpwardsLayer1 = serializedObj.FindProperty("settingsLayer1.windUpwards"); 
            cloudsWindDirectionXModifierLayer1 = serializedObj.FindProperty("settingsLayer1.cloudsWindDirectionXModifier"); 
            cloudsWindDirectionYModifierLayer1 = serializedObj.FindProperty("settingsLayer1.cloudsWindDirectionYModifier"); 

            //Layer 2
            bottomCloudsHeightLayer2= serializedObj.FindProperty("settingsLayer2.bottomCloudsHeight"); 
            topCloudsHeightLayer2= serializedObj.FindProperty("settingsLayer2.topCloudsHeight"); 
            coverageLayer2 = serializedObj.FindProperty("settingsLayer2.coverage"); 
            worleyFreq1Layer2 = serializedObj.FindProperty("settingsLayer2.worleyFreq1"); 
            worleyFreq2Layer2 = serializedObj.FindProperty("settingsLayer2.worleyFreq2"); 
            dilateCoverageLayer2 = serializedObj.FindProperty("settingsLayer2.dilateCoverage"); 
            dilateTypeLayer2 = serializedObj.FindProperty("settingsLayer2.dilateType"); 
            cloudsTypeModifierLayer2 = serializedObj.FindProperty("settingsLayer2.cloudsTypeModifier"); 
            locationOffsetLayer2 = serializedObj.FindProperty("settingsLayer2.locationOffset"); 
            densityLayer2 = serializedObj.FindProperty("settingsLayer2.density");
            densitySmoothnessLayer2 = serializedObj.FindProperty("settingsLayer2.densitySmoothness");  
            scatteringIntensityLayer2 = serializedObj.FindProperty("settingsLayer2.scatteringIntensity");  
            silverLiningSpreadLayer2 = serializedObj.FindProperty("settingsLayer2.silverLiningSpread");  
            powderIntensityLayer2 = serializedObj.FindProperty("settingsLayer2.powderIntensity");  
            curlIntensityLayer2 = serializedObj.FindProperty("settingsLayer2.curlIntensity");  
            lightStepModifierLayer2 = serializedObj.FindProperty("settingsLayer2.lightStepModifier");  
            lightAbsorbtionLayer2  = serializedObj.FindProperty("settingsLayer2.lightAbsorbtion");
            baseNoiseUVLayer2 = serializedObj.FindProperty("settingsLayer2.baseNoiseUV");
            detailNoiseUVLayer2 = serializedObj.FindProperty("settingsLayer2.detailNoiseUV");
            baseErosionIntensityLayer2 = serializedObj.FindProperty("settingsLayer2.baseErosionIntensity");
            detailErosionIntensityLayer2 = serializedObj.FindProperty("settingsLayer2.detailErosionIntensity");
            multiScatteringALayer2 = serializedObj.FindProperty("settingsLayer2.multiScatteringA");
            multiScatteringBLayer2 = serializedObj.FindProperty("settingsLayer2.multiScatteringB");
            multiScatteringCLayer2 = serializedObj.FindProperty("settingsLayer2.multiScatteringC");
            anvilBiasLayer2 = serializedObj.FindProperty("settingsLayer2.anvilBias");

            windSpeedModifierLayer2 = serializedObj.FindProperty("settingsLayer2.windSpeedModifier"); 
            windUpwardsLayer2 = serializedObj.FindProperty("settingsLayer2.windUpwards"); 
            cloudsWindDirectionXModifierLayer2 = serializedObj.FindProperty("settingsLayer2.cloudsWindDirectionXModifier"); 
            cloudsWindDirectionYModifierLayer2 = serializedObj.FindProperty("settingsLayer2.cloudsWindDirectionYModifier"); 
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Volumetric Clouds", headerFoldout);
            
  
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.VolumetricClouds);
                DestroyImmediate(this);
                return;
            }                      
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();


                GUILayout.Space(10);

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showGlobalControls = GUILayout.Toggle(myTarget.showGlobalControls, "Global Settings", headerFoldout);            
                if(myTarget.showGlobalControls)
                { 
                    GUILayout.Space(5);
                    GUILayout.Label("Quality", headerStyle);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(volumetricClouds);
                    DisableInputEndQuality(); 
                    EditorGUILayout.PropertyField(depthBlending);
                    if(!myTarget.settingsGlobal.depthBlending)
                       EditorGUILayout.PropertyField(depthTest);
                    DisableInputStartQuality();
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(downsampling);  
                    EditorGUILayout.PropertyField(dualLayer);              
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(stepsLayer1);
                    EditorGUILayout.PropertyField(stepsLayer2);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(blueNoiseIntensity);
                    EditorGUILayout.PropertyField(reprojectionBlendTime);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(lodDistance);
                    DisableInputEndQuality();
                    EditorGUILayout.PropertyField(maxRenderDistance);      
                    EditorGUILayout.PropertyField(cloudsWorldScale); 
                    EditorGUILayout.PropertyField(customWeatherMap);                  
                    GUILayout.Space(10);
                    GUILayout.Label("Textures", headerStyle);
                    EditorGUILayout.PropertyField(noise);
                    EditorGUILayout.PropertyField(detailNoise); 
                    EditorGUILayout.PropertyField(curlTex);
                    EditorGUILayout.PropertyField(blueNoise);
                    GUILayout.Space(10);
                    GUILayout.Label("Lighting", headerStyle);
                    EditorGUILayout.PropertyField(sunLightColorGradient);
                    EditorGUILayout.PropertyField(moonLightColorGradient);
                    EditorGUILayout.PropertyField(ambientColorGradient);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(ambientLighIntensity);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(atmosphereColorSaturateDistance);
                    GUILayout.Space(10);
                    GUILayout.Label("Wind", headerStyle);
                    EditorGUILayout.PropertyField(cloudsTravelSpeed);                 
                    GUILayout.Space(10);
                    GUILayout.Label("Shadows", headerStyle);
                    EditorGUILayout.PropertyField(cloudShadows);
                    EditorGUILayout.PropertyField(cloudShadowsIntensity);
                    
                }
                GUILayout.EndVertical();
                
                //Layer 1
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showLayer1Controls = GUILayout.Toggle(myTarget.showLayer1Controls, "Settings: Layer 1", headerFoldout);            
                if(myTarget.showLayer1Controls)
                {
                    //Coverage
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showCoverageControls = GUILayout.Toggle(myTarget.showCoverageControls, "Coverage", headerFoldout);
                    
                    if(myTarget.showCoverageControls)
                    {                          
                        EditorGUILayout.PropertyField(bottomCloudsHeightLayer1);
                        EditorGUILayout.PropertyField(topCloudsHeightLayer1);

                        GUILayout.Space(10);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(coverageLayer1);
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(worleyFreq1Layer1);
                        EditorGUILayout.PropertyField(worleyFreq2Layer1);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(dilateCoverageLayer1);
                        EditorGUILayout.PropertyField(dilateTypeLayer1);
                        EditorGUILayout.PropertyField(cloudsTypeModifierLayer1);
                        EditorGUILayout.PropertyField(anvilBiasLayer1);              
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(locationOffsetLayer1);
                    }
                    GUILayout.EndVertical(); 

                    //Lighting
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showLightingControls = GUILayout.Toggle(myTarget.showLightingControls, "Lighting", headerFoldout);
                    
                    if(myTarget.showLightingControls)
                    {
                        DisableInputStart();
                        EditorGUILayout.PropertyField(scatteringIntensityLayer1);
                        
                        EditorGUILayout.PropertyField(multiScatteringALayer1); 
                        EditorGUILayout.PropertyField(multiScatteringBLayer1); 
                        EditorGUILayout.PropertyField(multiScatteringCLayer1);               
                        GUILayout.Space(10);       
                        EditorGUILayout.PropertyField(silverLiningSpreadLayer1);         
                        EditorGUILayout.PropertyField(powderIntensityLayer1);         
                        GUILayout.Space(10);
                        EditorGUILayout.PropertyField(lightAbsorbtionLayer1);  
                        DisableInputEnd(); 
                        EditorGUILayout.PropertyField(lightStepModifierLayer1);   
                    }
                    GUILayout.EndVertical(); 

                    //Density
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showDensityControls = GUILayout.Toggle(myTarget.showDensityControls, "Density", headerFoldout);
                    
                    if(myTarget.showDensityControls)
                    {
                        DisableInputStart();
                        EditorGUILayout.PropertyField(densityLayer1); 
                        EditorGUILayout.PropertyField(densitySmoothnessLayer1);            
                        DisableInputEnd();   
                        EditorGUILayout.PropertyField(baseNoiseUVLayer1);   
                        EditorGUILayout.PropertyField(detailNoiseUVLayer1);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(baseErosionIntensityLayer1);   
                        EditorGUILayout.PropertyField(detailErosionIntensityLayer1);
                        EditorGUILayout.PropertyField(curlIntensityLayer1);  
                        DisableInputEnd();    
                    }
                    GUILayout.EndVertical();    

                    //Wind
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showWindControls = GUILayout.Toggle(myTarget.showWindControls, "Wind", headerFoldout);
                    
                    if(myTarget.showWindControls)
                    {
                        EditorGUILayout.PropertyField(windSpeedModifierLayer1);
                        EditorGUILayout.PropertyField(windUpwardsLayer1);
                        GUILayout.Space(5);
                        EditorGUILayout.PropertyField(cloudsWindDirectionXModifierLayer1);    
                        EditorGUILayout.PropertyField(cloudsWindDirectionYModifierLayer1);    
                    }
                    GUILayout.EndVertical();   
                }
                GUILayout.EndVertical(); 
                //Layer 1 End

                if(myTarget.settingsGlobal.dualLayer)   {                    
                //Layer 2
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showLayer2Controls = GUILayout.Toggle(myTarget.showLayer2Controls, "Settings: Layer 2", headerFoldout);            
                if(myTarget.showLayer2Controls)
                { 
                    //Coverage
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showCoverageControls = GUILayout.Toggle(myTarget.showCoverageControls, "Coverage", headerFoldout);
                    
                    if(myTarget.showCoverageControls)
                    {
                        EditorGUILayout.PropertyField(bottomCloudsHeightLayer2);
                        EditorGUILayout.PropertyField(topCloudsHeightLayer2);
                        GUILayout.Space(10);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(coverageLayer2);
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(worleyFreq1Layer2);
                        EditorGUILayout.PropertyField(worleyFreq2Layer2);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(dilateCoverageLayer2);
                        EditorGUILayout.PropertyField(dilateTypeLayer2);
                        EditorGUILayout.PropertyField(cloudsTypeModifierLayer2);
                        EditorGUILayout.PropertyField(anvilBiasLayer2);
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(locationOffsetLayer2);
                    }
                    GUILayout.EndVertical(); 

                    //Lighting
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showLightingControls = GUILayout.Toggle(myTarget.showLightingControls, "Lighting", headerFoldout);
                    
                    if(myTarget.showLightingControls)
                    {
                        DisableInputStart();
                        EditorGUILayout.PropertyField(scatteringIntensityLayer2);
                        EditorGUILayout.PropertyField(multiScatteringALayer2); 
                        EditorGUILayout.PropertyField(multiScatteringBLayer2); 
                        EditorGUILayout.PropertyField(multiScatteringCLayer2); 
                        GUILayout.Space(10);          
                        EditorGUILayout.PropertyField(silverLiningSpreadLayer2);         
                        EditorGUILayout.PropertyField(powderIntensityLayer2);         
                        GUILayout.Space(10);   
                        EditorGUILayout.PropertyField(lightAbsorbtionLayer2);
                        DisableInputEnd();   
                        EditorGUILayout.PropertyField(lightStepModifierLayer2);
                    }
                    GUILayout.EndVertical(); 

                    //Density
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showDensityControls = GUILayout.Toggle(myTarget.showDensityControls, "Density", headerFoldout);
                    
                    if(myTarget.showDensityControls)
                    {
                        DisableInputStart();
                        EditorGUILayout.PropertyField(densityLayer2);    
                        EditorGUILayout.PropertyField(densitySmoothnessLayer2);  
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(baseNoiseUVLayer2);   
                        EditorGUILayout.PropertyField(detailNoiseUVLayer2); 
                        DisableInputStart();  
                        EditorGUILayout.PropertyField(baseErosionIntensityLayer2);   
                        EditorGUILayout.PropertyField(detailErosionIntensityLayer2); 
                        EditorGUILayout.PropertyField(curlIntensityLayer2);  
                        DisableInputEnd();   
                    }
                    GUILayout.EndVertical(); 

                    //Wind
                    GUILayout.BeginVertical("",boxStyleModified);
                    myTarget.showWindControls = GUILayout.Toggle(myTarget.showWindControls, "Wind", headerFoldout);
                    
                    if(myTarget.showWindControls)
                    {
                        EditorGUILayout.PropertyField(windSpeedModifierLayer2);
                        EditorGUILayout.PropertyField(windUpwardsLayer2);
                        GUILayout.Space(5); 
                        EditorGUILayout.PropertyField(cloudsWindDirectionXModifierLayer2);    
                        EditorGUILayout.PropertyField(cloudsWindDirectionYModifierLayer2);   
                    }
                    GUILayout.EndVertical();      
                } 
                GUILayout.EndVertical();
                //Layer 2 End
                }
                
                
                /// Save Load
                  GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);
                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                //Apply
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroCloudsModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroConfiguration.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Enviro
{
    public class EnviroConfiguration : ScriptableObject
    {
        public EnviroTimeModule timeModule;
        public EnviroLightingModule lightingModule;
        public EnviroReflectionsModule reflectionsModule;
        public EnviroSkyModule Sky;
        public EnviroFogModule fogModule;
        public EnviroVolumetricCloudsModule volumetricCloudModule;
        public EnviroFlatCloudsModule flatCloudModule;
        public EnviroWeatherModule Weather;
        public EnviroAuroraModule Aurora;
        public EnviroAudioModule Audio;
        public EnviroEffectsModule Effects;
        public EnviroLightningModule Lightning;
        public EnviroQualityModule Quality;
        public EnviroEnvironmentModule Environment;
    }

    public class EnviroConfigurationCreation
    {
        #if UNITY_EDITOR
        [UnityEditor.MenuItem("Assets/Create/Enviro3/Configuration")]
        #endif
        public static EnviroConfiguration CreateMyAsset()
        {
            EnviroConfiguration config = ScriptableObject.CreateInstance<EnviroConfiguration>();
            #if UNITY_EDITOR
            // Create and save the new profile with unique name
            string path = UnityEditor.AssetDatabase.GetAssetPath (UnityEditor.Selection.activeObject);
            if (path == "")
            {
                path = "Assets/Enviro 3 - Sky and Weather";
            }
            string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath (path + "/New " + "Enviro Configuration" + ".asset");
            UnityEditor.AssetDatabase.CreateAsset (config, assetPathAndName);
            UnityEditor.AssetDatabase.SaveAssets ();
            UnityEditor.AssetDatabase.Refresh();
            #endif
            return config;
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroConfiguration.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefaultModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroDefault
    {
 
    } 

    [Serializable]
    public class EnviroDefaultModule : EnviroModule
    {  
        public Enviro.EnviroDefault settings;
        public EnviroDefaultModule preset;
        public bool showDefaultControls;

        
        // Update Method
        public override void UpdateModule ()
        { 
  
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                settings = JsonUtility.FromJson<Enviro.EnviroDefault>(JsonUtility.ToJson(preset.settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR 
        EnviroDefaultModule t =  ScriptableObject.CreateInstance<EnviroDefaultModule>();
        t.name = "Default Preset";
        t.settings = JsonUtility.FromJson<Enviro.EnviroDefault>(JsonUtility.ToJson(settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroDefaultModule module)
        {
            module.settings = JsonUtility.FromJson<Enviro.EnviroDefault>(JsonUtility.ToJson(settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefaultModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefaultModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroDefaultModule))]
    public class EnviroDefaultModuleEditor : EnviroModuleEditor
    {  
        private EnviroDefaultModule myTarget; 

        //Properties
        private SerializedProperty frontColorGradient0;


        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroDefaultModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();
            
            GUI.backgroundColor = new Color(0.7f,0.7f,0.7f,1f);
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Default Module", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Time); //Add Remove
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                EditorGUILayout.LabelField("This module will control your.");
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Set Values
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showDefaultControls = GUILayout.Toggle(myTarget.showDefaultControls, "Default Controls", headerFoldout);               
                if(myTarget.showDefaultControls)
                {
                    GUILayout.Space(10);
                }
                GUILayout.EndVertical();


                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefaultModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefineSymbol.cs---------------


using System;
using System.Linq;
using UnityEditor;
 
[InitializeOnLoad]
sealed class EnviroDefineSymbol
{
    const string k_Define = "ENVIRO_3";

    static EnviroDefineSymbol()
    {
        var targets = Enum.GetValues(typeof(BuildTargetGroup))
            .Cast<BuildTargetGroup>()
            .Where(x => x != BuildTargetGroup.Unknown)
            .Where(x => !IsObsolete(x));

        foreach (var target in targets)
        {
            var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(target).Trim();

            var list = defines.Split(';', ' ')
                .Where(x => !string.IsNullOrEmpty(x))
                .ToList();

            if (list.Contains(k_Define))
                continue;

            list.Add(k_Define);
            defines = list.Aggregate((a, b) => a + ";" + b);

            PlayerSettings.SetScriptingDefineSymbolsForGroup(target, defines);
        }
    }

    static bool IsObsolete(BuildTargetGroup group)
    {
        var attrs = typeof(BuildTargetGroup)
            .GetField(group.ToString())
            .GetCustomAttributes(typeof(ObsoleteAttribute), false);

        return attrs != null && attrs.Length > 0;
    } 
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroDefineSymbol.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEditorUtilities.cs---------------


ï»¿

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEditorUtilities.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectRemovalZone.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Enviro
{
    [ExecuteInEditMode]
    [AddComponentMenu("Enviro 3/Effect Removal Zone")]
    public class EnviroEffectRemovalZone : MonoBehaviour
    {
        public enum Mode
        {
            Spherical,
            Cubical
        }
        public Mode type;

        [Range(-10f, 0f)]
        public float density = 0.0f;

        public float radius = 1.0f;
        public float stretch = 2.0f;
        [Range(0, 1)]
        public float feather = 0.7f;

        public Vector3 size;

        void OnEnable()
        {
            if(EnviroManager.instance != null)
               AddToZoneToManager();
        }
 
        void OnDisable() 
        {
            if(EnviroManager.instance != null)
               RemoveZoneFromManager();
        }

        
        void OnDestroy()
        {
            if(EnviroManager.instance != null)
               RemoveZoneFromManager();
        }

  
        void AddToZoneToManager()
        {
           bool addedToMgr = false;

           for(int i = 0; i <  EnviroManager.instance.removalZones.Count; i++)
           {
                if(EnviroManager.instance.removalZones[i] == this)
                {
                   addedToMgr = true;
                   break;
                }
           }

           if(!addedToMgr)
              EnviroManager.instance.AddRemovalZone(this);
        }
         
        void RemoveZoneFromManager()
        {
           for(int i = 0; i <  EnviroManager.instance.removalZones.Count; i++)
           {
                if(EnviroManager.instance.removalZones[i] == this)
                   EnviroManager.instance.RemoveRemovaleZone(EnviroManager.instance.removalZones[i]);
           }
        }

        void Update()
        {
            transform.localScale = size;
        }

        void OnDrawGizmosSelected()
        {
            if(type == Mode.Spherical)
            {
                Matrix4x4 m = Matrix4x4.identity;
                Transform t = transform;
                m.SetTRS(t.position, t.rotation, new Vector3(1.0f, stretch, 1.0f));
                Gizmos.matrix =  m;
                Gizmos.DrawWireSphere(Vector3.zero, radius);
            }
            else
            {
                Matrix4x4 m = Matrix4x4.identity;
                Transform t = transform; 
                m.SetTRS(t.position, t.rotation, new Vector3(1.0f, 1.0f, 1.0f));
                Gizmos.matrix =  m;
                Gizmos.DrawWireCube(Vector3.zero,t.localScale);
            }
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectRemovalZone.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectRemovalZoneEditor.cs---------------


ï»¿using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;

namespace Enviro
{
    [CustomEditor(typeof(Enviro.EnviroEffectRemovalZone))]
    public class EnviroEffectRemovalZoneEditor : Editor {

        GUIStyle boxStyle;
        GUIStyle boxStyleModified;
        GUIStyle wrapStyle;
        GUIStyle wrapStyle2;
        GUIStyle clearStyle;

        Enviro.EnviroEffectRemovalZone myTarget;

        private Color boxColor1;

        SerializedObject serializedObj;

        private SerializedProperty type, density, radius, stretch, feather, size;

        void OnEnable()
        {
            myTarget = (Enviro.EnviroEffectRemovalZone)target;
            serializedObj = new SerializedObject (myTarget);
            boxColor1 = new Color(0.95f, 0.95f, 0.95f,1f);
            type = serializedObj.FindProperty("type"); 
            density = serializedObj.FindProperty("density"); 
            radius = serializedObj.FindProperty("radius"); 
            stretch = serializedObj.FindProperty("stretch"); 
            feather = serializedObj.FindProperty("feather"); 
            size = serializedObj.FindProperty("size"); 
        }

        public override void OnInspectorGUI ()
        {
            
            //Set up the box style
            if (boxStyle == null)
            {
                boxStyle = new GUIStyle(GUI.skin.box);
                boxStyle.normal.textColor = GUI.skin.label.normal.textColor;
                boxStyle.fontStyle = FontStyle.Bold;
                boxStyle.alignment = TextAnchor.UpperLeft;
            }

            if (boxStyleModified == null)
            {
                boxStyleModified = new GUIStyle(EditorStyles.helpBox);
                boxStyleModified.normal.textColor = GUI.skin.label.normal.textColor;
                boxStyleModified.fontStyle = FontStyle.Bold;
                boxStyleModified.fontSize = 11;
                boxStyleModified.alignment = TextAnchor.UpperLeft;
            }

            //Setup the wrap style
            if (wrapStyle == null)
            {
                wrapStyle = new GUIStyle(GUI.skin.label);
                wrapStyle.fontStyle = FontStyle.Bold;
                wrapStyle.wordWrap = true;
            }

            if (wrapStyle2 == null)
            {
                wrapStyle2 = new GUIStyle(GUI.skin.label);
                wrapStyle2.fontStyle = FontStyle.Normal;
                wrapStyle2.wordWrap = true;
            }

            if (clearStyle == null) {
                clearStyle = new GUIStyle(GUI.skin.label);
                clearStyle.normal.textColor = GUI.skin.label.normal.textColor;
                clearStyle.fontStyle = FontStyle.Bold;
                clearStyle.alignment = TextAnchor.UpperRight;
            }


            GUILayout.BeginVertical(" Enviro - Effect Removal Zone", boxStyle);
            GUILayout.Space(30);
            GUI.backgroundColor = boxColor1;
            GUILayout.BeginVertical("Information", boxStyleModified);
            GUI.backgroundColor = Color.white;
            GUILayout.Space(20);
            EditorGUILayout.LabelField("Use this component to hide fog and weather particles for example for indoor areas.", wrapStyle2);
            GUILayout.EndVertical();
            GUI.backgroundColor = boxColor1;
            GUILayout.BeginVertical("", boxStyleModified);
            GUI.backgroundColor = Color.white;
            GUILayout.Space(20);
            ///////
            EditorGUI.BeginChangeCheck();
            EditorGUILayout.PropertyField(type);
            GUILayout.Space(5);
            EditorGUILayout.PropertyField(density);
            EditorGUILayout.PropertyField(feather);
            GUILayout.Space(5);
            if(myTarget.type == Enviro.EnviroEffectRemovalZone.Mode.Spherical)
            {   
                EditorGUILayout.PropertyField(radius);
                EditorGUILayout.PropertyField(stretch);
            }   
            else
            {
                EditorGUILayout.PropertyField(size);
            }
            
            if (EditorGUI.EndChangeCheck ()) 
            {
			    serializedObj.ApplyModifiedProperties ();
		    }
          
            ///////
            GUILayout.EndVertical();
            
            // END
            EditorGUILayout.EndVertical ();
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectRemovalZoneEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectsModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro 
{
    [Serializable]
    public class EnviroEffectTypes
    {
        public ParticleSystem mySystem; 
        public string name;
        public GameObject prefab;
        public Vector3 localPositionOffset;
        public Vector3 localRotationOffset;
        public float emissionRate = 0f;
        public float maxEmission; 
    }

    [Serializable]
    public class EnviroEffects
    {
        public List<EnviroEffectTypes> effectTypes = new List<EnviroEffectTypes>();
    }
 
    [Serializable]
    [ExecuteInEditMode]
    public class EnviroEffectsModule : EnviroModule
    {  
        public Enviro.EnviroEffects Settings;
        public EnviroEffectsModule preset;

        //Inspector
        public bool showSetupControls;
        public bool showEmissionControls;
        public override void Enable ()
        { 
            if(EnviroManager.instance == null)
               return;
               
            Setup();
        } 

        public override void Disable ()
        { 
            if(EnviroManager.instance == null)
               return;

            Cleanup();
        }

        private void Setup()
        {
            if(!active)
               return; 

            CreateEffects();
        }  
 
        private void Cleanup()
        {
            if(EnviroManager.instance.Objects.effects != null)
               DestroyImmediate(EnviroManager.instance.Objects.effects);
        }

        public override void UpdateModule ()
        { 
            UpdateEffects();
        }

        public void CreateEffects() 
        {
            if(EnviroManager.instance.Objects.effects != null)
               DestroyImmediate(EnviroManager.instance.Objects.effects);

            if(EnviroManager.instance.Objects.effects == null)
            {
                EnviroManager.instance.Objects.effects = new GameObject();
                EnviroManager.instance.Objects.effects.name = "Effects";
                EnviroManager.instance.Objects.effects.transform.SetParent(EnviroManager.instance.transform);
                EnviroManager.instance.Objects.effects.transform.localPosition = Vector3.zero;
            }

            for(int i = 0; i < Settings.effectTypes.Count; i++)
            {
                if(Settings.effectTypes[i].mySystem != null)
                    DestroyImmediate(Settings.effectTypes[i].mySystem.gameObject);

                GameObject sys;
                  
                if(Settings.effectTypes[i].prefab != null)
                {
                   sys = Instantiate(Settings.effectTypes[i].prefab,Settings.effectTypes[i].localPositionOffset,Quaternion.identity);
                   sys.transform.SetParent(EnviroManager.instance.Objects.effects.transform);
                   sys.name = Settings.effectTypes[i].name;
                   sys.transform.localPosition = Settings.effectTypes[i].localPositionOffset;
                   sys.transform.localEulerAngles = Settings.effectTypes[i].localRotationOffset;
                   Settings.effectTypes[i].mySystem = sys.GetComponent<ParticleSystem>();
                }
            }
        }

        public float GetEmissionRate(ParticleSystem system)
        {
            return system.emission.rateOverTime.constantMax;
        }


        public void SetEmissionRate(ParticleSystem sys, float emissionRate)
        {
            var emission = sys.emission;
            var rate = emission.rateOverTime;
            rate.constantMax = emissionRate;
            emission.rateOverTime = rate;
        }

        private void UpdateEffects()
        {
            Shader.SetGlobalFloat("_EnviroLightIntensity", EnviroManager.instance.solarTime);

            for(int i = 0; i < Settings.effectTypes.Count; i++)
            {
                if(Settings.effectTypes[i].mySystem != null)
                {
                    float currentEmission = Settings.effectTypes[i].maxEmission * Settings.effectTypes[i].emissionRate;

                    SetEmissionRate(Settings.effectTypes[i].mySystem,currentEmission);

                    if(currentEmission > 0f && !Settings.effectTypes[i].mySystem.isPlaying)
                       Settings.effectTypes[i].mySystem.Play();
                }
            }
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroEffects>(JsonUtility.ToJson(preset.Settings));
            } 
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroEffectsModule t =  ScriptableObject.CreateInstance<EnviroEffectsModule>();
        t.name = "Effects Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroEffects>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroEffectsModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroEffects>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectsModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectsModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroEffectsModule))]
    public class EnviroEffectsModuleEditor : EnviroModuleEditor
    {  
        private EnviroEffectsModule myTarget; 
      
        //On Enable
        public override void OnEnable()
        {
            if(!target)
                return; 

            myTarget = (EnviroEffectsModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
        
        }

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Effects", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Effects);
                DestroyImmediate(this);
                return;
            } 
             
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSetupControls = GUILayout.Toggle(myTarget.showSetupControls, "Setup", headerFoldout);              
                if(myTarget.showSetupControls)
                {
                    GUILayout.Space(10);
                    if (!Application.isPlaying) 
                    {
                        if (GUILayout.Button ("Add")) 
                        {
                            myTarget.Settings.effectTypes.Add (new EnviroEffectTypes ());
                        }
                    } 
                    else
                        EditorGUILayout.LabelField ("Can't add effects in runtime!");

                    if (GUILayout.Button ("Apply Changes")) 
                    {
                        myTarget.CreateEffects();
                    }

                    GUILayout.Space(10);
                    
                    for (int i = 0; i < myTarget.Settings.effectTypes.Count; i++) 
                    {      
                        GUILayout.BeginVertical (myTarget.Settings.effectTypes[i].name, boxStyleModified);
                        GUILayout.Space(15);
                        Undo.RecordObject(target, "Effect Setup Changed");
                        myTarget.Settings.effectTypes[i].name = EditorGUILayout.TextField ("Effect Name", myTarget.Settings.effectTypes[i].name);
                        myTarget.Settings.effectTypes[i].prefab = (GameObject)EditorGUILayout.ObjectField ("Effect Prefab", myTarget.Settings.effectTypes[i].prefab, typeof(GameObject), true);
                        myTarget.Settings.effectTypes [i].localPositionOffset = EditorGUILayout.Vector3Field ("Position Offset", myTarget.Settings.effectTypes [i].localPositionOffset);
                        myTarget.Settings.effectTypes [i].localRotationOffset = EditorGUILayout.Vector3Field ("Rotation Offset", myTarget.Settings.effectTypes [i].localRotationOffset);
                        GUILayout.Space(10);
                        myTarget.Settings.effectTypes [i].emissionRate = EditorGUILayout.Slider("Emission", myTarget.Settings.effectTypes [i].emissionRate,0f,1f);
                        myTarget.Settings.effectTypes [i].maxEmission = EditorGUILayout.FloatField ("Maximum Emission", myTarget.Settings.effectTypes [i].maxEmission);
 
                        if (GUILayout.Button ("Remove")) 
                        {
                            myTarget.Settings.effectTypes.Remove (myTarget.Settings.effectTypes[i]);
                        }
                        GUILayout.EndVertical ();
                    }

                }
                GUILayout.EndVertical();
               
                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                ApplyChanges (); 
                EditorUtility.SetDirty (target);
            }
            GUILayout.EndVertical();

        if(myTarget.showModuleInspector)
            GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEffectsModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEnvironmentModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic; 
using UnityEngine;
using System;

namespace Enviro
{

    [Serializable]
    public class EnviroEnvironment
    {
        //Seasons
        public enum Seasons
        {
            Spring,
            Summer,
            Autumn,
            Winter
        } 
        public Seasons season;
        public bool changeSeason = true;

        [Tooltip("Start Day of Year for Spring")]
        [Range(0, 366)]
        public int springStart = 60;
        [Tooltip("End Day of Year for Spring")]
        [Range(0, 366)]
        public int springEnd = 92;
        [Tooltip("Start Day of Year for Summer")]
        [Range(0, 366)]
        public int summerStart = 93;
        [Tooltip("End Day of Year for Summer")]
        [Range(0, 366)]
        public int summerEnd = 185;
        [Tooltip("Start Day of Year for Autumn")]
        [Range(0, 366)]
        public int autumnStart = 186;
        [Tooltip("End Day of Year for Autumn")]
        [Range(0, 366)]
        public int autumnEnd = 276;
        [Tooltip("Start Day of Year for Winter")]
        [Range(0, 366)]
        public int winterStart = 277;
        [Tooltip("End Day of Year for Winter")]
        [Range(0, 366)]
        public int winterEnd = 59;

        //Temperature
        [Tooltip("Base Temperature in Spring")]
        public AnimationCurve springBaseTemperature = new AnimationCurve();
        [Tooltip("Base Temperature in Summer")]
        public AnimationCurve summerBaseTemperature = new AnimationCurve();
        [Tooltip("Base Temperature in Autumn")]
        public AnimationCurve autumnBaseTemperature = new AnimationCurve();
        [Tooltip("Base Temperature in Winter")] 
        public AnimationCurve winterBaseTemperature = new AnimationCurve();
        [Tooltip("Current temperature.")]
        [Range(-50f, 50f)]
        public float temperature = 0f;
        [Tooltip("Temperature mod used for different weather types.")]
        [Range(-50f, 50f)]
        public float temperatureWeatherMod = 0f;
        [Tooltip("Custom temperature mod for gameplay use.")]
        [Range(-50f, 50f)]
        public float temperatureCustomMod = 0f;

        [Tooltip("Temperature changing speed.")]
        public float temperatureChangingSpeed = 1f;

        //Weather State
        [Tooltip("Current wetness for third party shader or gameplay.")]
        [Range(0f, 1f)]
        public float wetness = 0f;
        [Tooltip("Target wetness for third party shader or gameplay.")]
        [Range(0f, 1f)]
        public float wetnessTarget = 0f;
        [Tooltip("Current snow for third party shader or gameplay.")]
        [Range(0f, 1f)]
        public float snow = 0f;
        [Tooltip("Target snow for third party shader or gameplay.")]
        [Range(0f, 1f)]
        public float snowTarget = 0f;

         [Tooltip("Speed of wetness accumulation.")]
        public float wetnessAccumulationSpeed = 1f;
        [Tooltip("Speed of wetness dries.")]
        public float wetnessDrySpeed = 1f; 

        [Tooltip("Speed of snow buildup.")]
        public float snowAccumulationSpeed = 1f;
        [Tooltip("Speed of how fast snow melts.")]
        public float snowMeltSpeed = 1f;

        [Tooltip("Temperature when snow starts to melt.")]
        [Range(-20f, 20f)]
        public float snowMeltingTresholdTemperature = 1f;
 
        //Wind 
        [Range(-1f,1f)]
        public float windDirectionX, windDirectionY;
        [Range(0f,1f)]
        public float windSpeed = 0.1f;
        [Range(0f,1f)]
        public float windTurbulence = 0.1f;

    } 

    [Serializable]
    public class EnviroEnvironmentModule : EnviroModule
    {  
        public Enviro.EnviroEnvironment Settings;
        public EnviroEnvironmentModule preset;
        public bool showSeasonControls,showTemperatureControls,showWeatherStateControls,showWindControls;

        public override void Enable() 
        {
              if(EnviroManager.instance == null)
                 return;
            
            CreateWindZone ();

        }

        public override void Disable() 
        {
            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Objects.windZone != null)
                DestroyImmediate(EnviroManager.instance.Objects.windZone.gameObject);

        }

        private void CreateWindZone ()
        {
            if(EnviroManager.instance.Objects.windZone == null)
            {
                GameObject wZ = new GameObject();
                wZ.name = "Wind Zone";
                wZ.transform.SetParent(EnviroManager.instance.transform);
                wZ.transform.localPosition = Vector3.zero;
                EnviroManager.instance.Objects.windZone = wZ.AddComponent<WindZone>();
            }
        }

        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return;
               
            if(EnviroManager.instance.Time != null)
            {
                UpdateTemperature(EnviroManager.instance.Time.GetUniversalTimeOfDay() / 24f);
                UpdateSeason();
            }
            else
            {
                UpdateTemperature(1f);
            }

            UpdateWindZone();
            UpdateWeatherState();
        }

        //Changes season based on day settings.
        public void UpdateSeason()
        {
            if(Settings.changeSeason)
            {
                int currentDay = EnviroManager.instance.Time.Settings.date.DayOfYear;

                if (currentDay >= Settings.springStart && currentDay <= Settings.springEnd)
                {
                    ChangeSeason(EnviroEnvironment.Seasons.Spring);
                }
                else if (currentDay >= Settings.summerStart && currentDay <= Settings.summerEnd)
                {
                    ChangeSeason(EnviroEnvironment.Seasons.Summer);
                }
                else if (currentDay >= Settings.autumnStart && currentDay <= Settings.autumnEnd)
                {
                    ChangeSeason(EnviroEnvironment.Seasons.Autumn);
                }
                else if (currentDay >= Settings.winterStart || currentDay <= Settings.winterEnd)
                {
                    ChangeSeason(EnviroEnvironment.Seasons.Winter);
                }
            }
        }

        //Changes Season
        public void ChangeSeason(EnviroEnvironment.Seasons season)
        {
            if(Settings.season != season) 
            {
                EnviroManager.instance.NotifySeasonChanged(season);
                Settings.season = season;
            }

        }

        //Sets temperature based on time of day.
        public void UpdateTemperature (float timeOfDay)
        {
            float temperature = 0f;

            switch (Settings.season)
            {
                case EnviroEnvironment.Seasons.Spring:
                    temperature = Settings.springBaseTemperature.Evaluate(timeOfDay);
                    break;
                case EnviroEnvironment.Seasons.Summer:
                    temperature = Settings.summerBaseTemperature.Evaluate(timeOfDay);
                    break;
                case EnviroEnvironment.Seasons.Autumn:
                    temperature = Settings.autumnBaseTemperature.Evaluate(timeOfDay);
                    break;
                case EnviroEnvironment.Seasons.Winter:
                    temperature = Settings.winterBaseTemperature.Evaluate(timeOfDay);
                    break;
            }

            //Apply temperature mods
            temperature += Settings.temperatureWeatherMod;
            temperature += Settings.temperatureCustomMod;

            //Set temperature
            Settings.temperature = Mathf.Lerp(Settings.temperature, temperature, Time.deltaTime * Settings.temperatureChangingSpeed);
        }

        public void UpdateWeatherState()
        {
            // Wetness
            if (Settings.wetness < Settings.wetnessTarget)
            {
                // Raining
                Settings.wetness = Mathf.Lerp(Settings.wetness, Settings.wetnessTarget, Settings.wetnessAccumulationSpeed * Time.deltaTime);
            }
            else
            {   // Drying
                Settings.wetness = Mathf.Lerp(Settings.wetness, Settings.wetnessTarget, Settings.wetnessDrySpeed * Time.deltaTime);
            }

            if(Settings.wetness < 0.0001f)
               Settings.wetness = 0f;

            Settings.wetness = Mathf.Clamp(Settings.wetness, 0f, 1f);

            //Snow
            if (Settings.snow < Settings.snowTarget)
            {   
                //Snowing
                Settings.snow = Mathf.Lerp(Settings.snow, Settings.snowTarget, Settings.snowAccumulationSpeed * Time.deltaTime);
            }
            else if (Settings.temperature > Settings.snowMeltingTresholdTemperature)
            {
                //Melting
                Settings.snow = Mathf.Lerp(Settings.snow, Settings.snowTarget, Settings.snowMeltSpeed * Time.deltaTime);
            }

            if(Settings.snow < 0.0001f)
               Settings.snow = 0f;

            Settings.snow = Mathf.Clamp(Settings.snow, 0f, 1f);
        }

        private void UpdateWindZone()
        {
            if(EnviroManager.instance.Objects.windZone != null)
            {
                EnviroManager.instance.Objects.windZone.windMain = Settings.windSpeed;
                EnviroManager.instance.Objects.windZone.windTurbulence = Settings.windTurbulence;

                Vector3 windDirection = new Vector3(-Settings.windDirectionX,0f,-Settings.windDirectionY);
                EnviroManager.instance.Objects.windZone.transform.forward = windDirection;
               // EnviroManager.instance.Objects.windZone.transform.Rotate(new Vector3(Settings.windDirectionX,0f,Settings.windDirectionY),Space.World);
    
            }
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroEnvironment>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues () 
        {
#if UNITY_EDITOR
        EnviroEnvironmentModule t =  ScriptableObject.CreateInstance<EnviroEnvironmentModule>();
        t.name = "Environment Preset";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroEnvironment>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroEnvironmentModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroEnvironment>(JsonUtility.ToJson(Settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEnvironmentModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEnvironmentModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroEnvironmentModule))]
    public class EnviroEnvironmentModuleEditor : EnviroModuleEditor
    {  
        private EnviroEnvironmentModule myTarget; 

        //Properties Seasons
        private SerializedProperty season, changeSeason, springStart, springEnd, summerStart, summerEnd, autumnStart, autumnEnd, winterStart, winterEnd;
        //Properties Temperature
        private SerializedProperty springBaseTemperature, summerBaseTemperature, autumnBaseTemperature, winterBaseTemperature, temperatureWeatherMod, temperature, temperatureChangingSpeed;
        //Properties Weather State
        private SerializedProperty wetness, snow, wetnessTarget, snowTarget, wetnessAccumulationSpeed, wetnessDrySpeed, snowAccumulationSpeed, snowMeltSpeed ,snowMeltingTresholdTemperature;
        //Properties Wind
        private SerializedProperty windDirectionX,windDirectionY,windSpeed,windTurbulence;

        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroEnvironmentModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            season = serializedObj.FindProperty("Settings.season");
            changeSeason = serializedObj.FindProperty("Settings.changeSeason");
            springStart = serializedObj.FindProperty("Settings.springStart");
            springEnd = serializedObj.FindProperty("Settings.springEnd");
            summerStart = serializedObj.FindProperty("Settings.summerStart");
            summerEnd = serializedObj.FindProperty("Settings.summerEnd");
            autumnStart = serializedObj.FindProperty("Settings.autumnStart");
            autumnEnd = serializedObj.FindProperty("Settings.autumnEnd");
            winterStart = serializedObj.FindProperty("Settings.winterStart");
            winterEnd = serializedObj.FindProperty("Settings.winterEnd");

            springBaseTemperature = serializedObj.FindProperty("Settings.springBaseTemperature");
            summerBaseTemperature = serializedObj.FindProperty("Settings.summerBaseTemperature");
            autumnBaseTemperature = serializedObj.FindProperty("Settings.autumnBaseTemperature");
            winterBaseTemperature = serializedObj.FindProperty("Settings.winterBaseTemperature");
            temperatureWeatherMod = serializedObj.FindProperty("Settings.temperatureWeatherMod");
            temperature = serializedObj.FindProperty("Settings.temperature");
            temperatureChangingSpeed = serializedObj.FindProperty("Settings.temperatureChangingSpeed");

            wetness = serializedObj.FindProperty("Settings.wetness");
            snow = serializedObj.FindProperty("Settings.snow");
            wetnessTarget = serializedObj.FindProperty("Settings.wetnessTarget");
            snowTarget = serializedObj.FindProperty("Settings.snowTarget");
            wetnessAccumulationSpeed = serializedObj.FindProperty("Settings.wetnessAccumulationSpeed");
            wetnessDrySpeed = serializedObj.FindProperty("Settings.wetnessDrySpeed");
            snowAccumulationSpeed = serializedObj.FindProperty("Settings.snowAccumulationSpeed");
            snowMeltSpeed = serializedObj.FindProperty("Settings.snowMeltSpeed");
            snowMeltingTresholdTemperature = serializedObj.FindProperty("Settings.snowMeltingTresholdTemperature"); 

            windDirectionX = serializedObj.FindProperty("Settings.windDirectionX"); 
            windDirectionY = serializedObj.FindProperty("Settings.windDirectionY"); 
            windSpeed = serializedObj.FindProperty("Settings.windSpeed"); 
            windTurbulence = serializedObj.FindProperty("Settings.windTurbulence");           
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();
            
            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Environment", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Environment); //Add Remove
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector) 
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSeasonControls = GUILayout.Toggle(myTarget.showSeasonControls, "Season Controls", headerFoldout);               
                if(myTarget.showSeasonControls)
                {
                   
                   GUILayout.Space(5);   
                   EditorGUILayout.PropertyField(season);
                   EditorGUILayout.PropertyField(changeSeason);
                   GUILayout.Space(10);
                   EditorGUILayout.PropertyField(springStart);
                   EditorGUILayout.PropertyField(springEnd);
                   GUILayout.Space(5);
                   EditorGUILayout.PropertyField(summerStart);
                   EditorGUILayout.PropertyField(summerEnd);
                   GUILayout.Space(5);
                   EditorGUILayout.PropertyField(autumnStart);
                   EditorGUILayout.PropertyField(autumnEnd);
                   GUILayout.Space(5);
                   EditorGUILayout.PropertyField(winterStart);
                   EditorGUILayout.PropertyField(winterEnd); 
                }
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showTemperatureControls = GUILayout.Toggle(myTarget.showTemperatureControls, "Temperature Controls", headerFoldout);               
                if(myTarget.showTemperatureControls)
                {
                   GUILayout.Space(5);      
                   EditorGUILayout.PropertyField(temperature);
                   DisableInputStart();
                   EditorGUILayout.PropertyField(temperatureWeatherMod);
                   DisableInputEnd();
                   EditorGUILayout.PropertyField(temperatureChangingSpeed);
                   GUILayout.Space(10);
                   EditorGUILayout.PropertyField(springBaseTemperature);
                   EditorGUILayout.PropertyField(summerBaseTemperature);
                   EditorGUILayout.PropertyField(autumnBaseTemperature);
                   EditorGUILayout.PropertyField(winterBaseTemperature);
                }
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showWeatherStateControls = GUILayout.Toggle(myTarget.showWeatherStateControls, "Weather State Controls", headerFoldout);               
                if(myTarget.showWeatherStateControls)
                {
                   GUILayout.Space(5);     
                   EditorGUILayout.PropertyField(wetness);
                   EditorGUILayout.PropertyField(snow);
                   GUILayout.Space(5);
                   DisableInputStart();
                   EditorGUILayout.PropertyField(wetnessTarget);
                   EditorGUILayout.PropertyField(snowTarget);
                   DisableInputEnd();
                   GUILayout.Space(10);
                   EditorGUILayout.PropertyField(wetnessAccumulationSpeed);
                   EditorGUILayout.PropertyField(wetnessDrySpeed);
                   GUILayout.Space(5);
                   EditorGUILayout.PropertyField(snowAccumulationSpeed);
                   EditorGUILayout.PropertyField(snowMeltSpeed);
                   EditorGUILayout.PropertyField(snowMeltingTresholdTemperature);
                }
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showWindControls = GUILayout.Toggle(myTarget.showWindControls, "Wind Controls", headerFoldout);               
                if(myTarget.showWindControls)
                {
                   GUILayout.Space(5);
                   DisableInputStart();  
                   EditorGUILayout.PropertyField(windDirectionX); 
                   EditorGUILayout.PropertyField(windDirectionY);
                   GUILayout.Space(5);
                   EditorGUILayout.PropertyField(windSpeed);
                   EditorGUILayout.PropertyField(windTurbulence);
                   DisableInputEnd();
                }
                GUILayout.EndVertical();


                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEnvironmentModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEventModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic; 
using UnityEngine;
using System;

namespace Enviro
{


    [Serializable]
    public class EnviroEvents
    {
        [Serializable]
        public class EnviroActionEvent : UnityEngine.Events.UnityEvent
        {
        
        }

        public EnviroActionEvent onHourPassedActions = new EnviroActionEvent();
        public EnviroActionEvent onDayPassedActions = new EnviroActionEvent();
        public EnviroActionEvent onYearPassedActions = new EnviroActionEvent();
        public EnviroActionEvent onWeatherChangedActions = new EnviroActionEvent();
        public EnviroActionEvent onSeasonChangedActions = new EnviroActionEvent();
        public EnviroActionEvent onNightActions = new EnviroActionEvent();
        public EnviroActionEvent onDayActions = new EnviroActionEvent();
        public EnviroActionEvent onZoneChangedActions = new EnviroActionEvent();
    } 
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEventModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEventModuleEditor.cs---------------


ï»¿//Depricated

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroEventModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroExternalWindow.cs---------------


ï»¿using UnityEditor;
using UnityEngine;

public class EnviroExternalWindow : EditorWindow
{
    private Editor currentTimeModuleEditor, currentSkyModuleEditor, currentLightingModuleEditor, currentFogModuleEditor, currentVolumetricCloudModuleEditor,currentFlatCloudModuleEditor,currentWeatherModuleEditor,currentAuroraModuleEditor,currentLightningModuleEditor, currentAudioModuleEditor,currentEnvironmentModuleEditor,currentEffectsModuleEditor ,currentQualityModuleEditor,currentEventModuleEditor ;   
    private Vector2 scrollPosition = Vector2.zero;
    // Add menu item named "My Window" to the Window menu
    [MenuItem("Window/Enviro/Enviro Window")]
    public static void ShowWindow()
    {
        //Show existing window instance. If one doesn't exist, make one.
        EditorWindow.GetWindow(typeof(EnviroExternalWindow));
    }
    
    void OnGUI()
    {
        if (Enviro.EnviroManager.instance == null)
        {
            GUILayout.Label ("Enviro 3 not in Scene. Please use this window in a Scene with Enviro 3.", EditorStyles.boldLabel);
            return;
        }

        GUILayout.Label ("Enviro 3", EditorStyles.boldLabel);

        scrollPosition = GUILayout.BeginScrollView(scrollPosition, false, false,  GUILayout.Width(400),  GUILayout.Height(600)); 

            if(Enviro.EnviroManager.instance.Time != null)
            {
                if(currentTimeModuleEditor == null)
                currentTimeModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Time);

                currentTimeModuleEditor.OnInspectorGUI();
            }

            if(Enviro.EnviroManager.instance.Lighting != null)
                {
                    if(currentLightingModuleEditor == null)
                    currentLightingModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Lighting);

                    currentLightingModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Sky != null)
                {
                    if(currentSkyModuleEditor == null)
                    currentSkyModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Sky);

                    currentSkyModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Fog != null)
                {
                    if(currentFogModuleEditor == null)
                    currentFogModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Fog);

                    currentFogModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.VolumetricClouds != null)
                {
                    if(currentVolumetricCloudModuleEditor == null)
                    currentVolumetricCloudModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.VolumetricClouds);

                    currentVolumetricCloudModuleEditor.OnInspectorGUI();
                } 
         
                if(Enviro.EnviroManager.instance.FlatClouds != null)
                {
                    if(currentFlatCloudModuleEditor == null)
                    currentFlatCloudModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.FlatClouds);

                    currentFlatCloudModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Aurora != null)
                {
                    if(currentAuroraModuleEditor == null)
                    currentAuroraModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Aurora);

                    currentAuroraModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Lightning != null)
                {
                    if(currentLightningModuleEditor == null)
                    currentLightningModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Lightning);

                    currentLightningModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Environment != null)
                {
                    if(currentEnvironmentModuleEditor == null)
                    currentEnvironmentModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Environment);

                    currentEnvironmentModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Weather != null)
                {
                    if(currentWeatherModuleEditor == null)
                    currentWeatherModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Weather);

                    currentWeatherModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Audio != null) 
                {
                    if(currentAudioModuleEditor == null)
                    currentAudioModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Audio);

                    currentAudioModuleEditor.OnInspectorGUI();
                } 

                if(Enviro.EnviroManager.instance.Effects != null)
                {
                    if(currentEffectsModuleEditor == null)
                    currentEffectsModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Effects);

                    currentEffectsModuleEditor.OnInspectorGUI();
                } 
    
                if(Enviro.EnviroManager.instance.Quality != null)
                {
                    if(currentQualityModuleEditor == null)
                    currentQualityModuleEditor = Editor.CreateEditor(Enviro.EnviroManager.instance.Quality);

                    currentQualityModuleEditor.OnInspectorGUI();
                }

        GUILayout.EndScrollView();
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroExternalWindow.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFlatCloudsModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroFlatClouds
    {  
        // Cirrus
        public bool useCirrusClouds = true;
        public Texture2D cirrusCloudsTex;
        [Range(0f,1f)]
        public float cirrusCloudsAlpha;
         [Range(0f,2f)]
        public float cirrusCloudsColorPower;
         [Range(0f,1f)]
        public float cirrusCloudsCoverage;
        [GradientUsage(true)]
        public Gradient  cirrusCloudsColor;
        [Range(0f,1f)]
        public float cirrusCloudsWindIntensity = 0.5f;

        // Flat Clouds 
        public bool useFlatClouds = true;
        public Texture2D flatCloudsBaseTex; 
        public Texture2D flatCloudsDetailTex;
 
        [GradientUsage(true)]
        public Gradient flatCloudsLightColor;
        [GradientUsage(true)]
        public Gradient flatCloudsAmbientColor;

        [Range(0f,2f)]
        public float flatCloudsLightIntensity = 1.0f;
        [Range(0f,2f)]
        public float flatCloudsAmbientIntensity = 1.0f;
        [Range(0f,2f)]
        public float flatCloudsAbsorbtion = 0.6f;
        [Range(0f,1f)]
        public float flatCloudsHGPhase = 0.6f;
        [Range(0f,2f)]
        public float flatCloudsCoverage = 1f;
        [Range(0f,2f)]
        public float flatCloudsDensity = 1f;
        public float flatCloudsAltitude = 10f;
        public bool flatCloudsTonemapping;
        public float flatCloudsBaseTiling = 4f;
        public float flatCloudsDetailTiling = 10f;
        [Range(0f,1f)]
        public float flatCloudsWindIntensity = 0.2f;
        [Range(0f,1f)]
        public float flatCloudsDetailWindIntensity = 0.5f;
    } 

    [Serializable]
    public class EnviroFlatCloudsModule : EnviroModule
    {   
        public Enviro.EnviroFlatClouds settings;
        public EnviroFlatCloudsModule preset;
        [HideInInspector]
        public bool showCirrusCloudsControls;
        [HideInInspector]
        public bool show2DCloudsControls; 
        [HideInInspector]
        public Vector2 cloudFlatBaseAnim;
        [HideInInspector]
        public Vector2 cloudFlatDetailAnim;
        [HideInInspector]
        public Vector2 cirrusAnim;
         
        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return;

            UpdateWind ();

            if(settings.useCirrusClouds)
            {
                Shader.SetGlobalFloat("_CirrusClouds",1f);

                if(settings.cirrusCloudsTex != null)
                Shader.SetGlobalTexture("_CirrusCloudMap",settings.cirrusCloudsTex);
    
                Shader.SetGlobalFloat("_CirrusCloudAlpha",settings.cirrusCloudsAlpha);
                Shader.SetGlobalFloat("_CirrusCloudCoverage",settings.cirrusCloudsCoverage);
                Shader.SetGlobalFloat("_CirrusCloudColorPower",settings.cirrusCloudsColorPower);
                Shader.SetGlobalColor("_CirrusCloudColor",settings.cirrusCloudsColor.Evaluate(EnviroManager.instance.solarTime));
                Shader.SetGlobalVector("_CirrusCloudAnimation", new Vector4(cirrusAnim.x, cirrusAnim.y, 0f, 0f));
            }
            else
            {
                 Shader.SetGlobalFloat("_CirrusClouds",0f);
            }

            if(settings.useFlatClouds)
            {
                Shader.SetGlobalFloat("_FlatClouds",1f);

                if(settings.flatCloudsBaseTex != null)
                Shader.SetGlobalTexture("_FlatCloudsBaseTexture",settings.flatCloudsBaseTex);

                if(settings.flatCloudsDetailTex != null)
                Shader.SetGlobalTexture("_FlatCloudsDetailTexture",settings.flatCloudsDetailTex);

                //_FlatCloudsAnimation;
                Shader.SetGlobalColor("_FlatCloudsLightColor", settings.flatCloudsLightColor.Evaluate(EnviroManager.instance.solarTime));
                Shader.SetGlobalColor("_FlatCloudsAmbientColor", settings.flatCloudsAmbientColor.Evaluate(EnviroManager.instance.solarTime));
                
                Vector3 lightDirection = Vector3.forward;
                if(EnviroManager.instance.Objects.directionalLight != null)
                lightDirection = EnviroManager.instance.Objects.directionalLight.transform.forward;
 
                Shader.SetGlobalVector("_FlatCloudsLightDirection",lightDirection);
                Shader.SetGlobalVector("_FlatCloudsLightingParams",new Vector4(settings.flatCloudsLightIntensity * 10f, settings.flatCloudsAmbientIntensity, settings.flatCloudsAbsorbtion,settings.flatCloudsHGPhase));
                Shader.SetGlobalVector("_FlatCloudsParams",new Vector4(settings.flatCloudsCoverage, settings.flatCloudsDensity * 5f, settings.flatCloudsAltitude,0f));
                Shader.SetGlobalVector("_FlatCloudsTiling",new Vector4(settings.flatCloudsBaseTiling, settings.flatCloudsDetailTiling, 0f,0f));      
                Shader.SetGlobalVector("_FlatCloudsAnimation", new Vector4(cloudFlatBaseAnim.x, cloudFlatBaseAnim.y, cloudFlatDetailAnim.x, cloudFlatDetailAnim.y));
            }
            else
            {
                 Shader.SetGlobalFloat("_FlatClouds",0f);
            }
        }

        //Save and Load 
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                settings = JsonUtility.FromJson<Enviro.EnviroFlatClouds>(JsonUtility.ToJson(preset.settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        private void UpdateWind ()
        {
          

            if(EnviroManager.instance.Environment != null)
            {
                cloudFlatBaseAnim += new Vector2(((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionX) * settings.flatCloudsWindIntensity) * Time.deltaTime * 0.01f, ((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionY) * settings.flatCloudsWindIntensity) * Time.deltaTime * 0.01f);
                cloudFlatDetailAnim += new Vector2(((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionX) * settings.flatCloudsDetailWindIntensity) * Time.deltaTime * 0.1f, ((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionY) * settings.flatCloudsDetailWindIntensity) * Time.deltaTime * 0.1f);
                cirrusAnim += new Vector2(((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionX) * settings.cirrusCloudsWindIntensity) * Time.deltaTime * 0.01f, ((EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionY) * settings.cirrusCloudsWindIntensity) * Time.deltaTime * 0.01f);
            }
            else
            {
                cloudFlatBaseAnim += new Vector2(settings.flatCloudsWindIntensity * Time.deltaTime * 0.01f,settings.flatCloudsWindIntensity * Time.deltaTime * 0.01f);
                cloudFlatDetailAnim += new Vector2(settings.flatCloudsDetailWindIntensity * Time.deltaTime * 0.1f,settings.flatCloudsDetailWindIntensity * Time.deltaTime * 0.1f);
                cirrusAnim += new Vector2(settings.cirrusCloudsWindIntensity * Time.deltaTime * 0.01f,settings.cirrusCloudsWindIntensity * Time.deltaTime * 0.01f);
            }

            cirrusAnim = EnviroHelper.PingPong(cirrusAnim);
            cloudFlatBaseAnim = EnviroHelper.PingPong(cloudFlatBaseAnim);
            cloudFlatDetailAnim = EnviroHelper.PingPong(cloudFlatDetailAnim);

        }
 
        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroFlatCloudsModule t =  ScriptableObject.CreateInstance<EnviroFlatCloudsModule>();
        t.name = "Flat Clouds Preset";
        t.settings = JsonUtility.FromJson<Enviro.EnviroFlatClouds>(JsonUtility.ToJson(settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroFlatCloudsModule module)
        {
            module.settings = JsonUtility.FromJson<Enviro.EnviroFlatClouds>(JsonUtility.ToJson(settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFlatCloudsModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFlatCloudsModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroFlatCloudsModule))]
    public class EnviroFlatCloudsModuleEditor : EnviroModuleEditor
    {  
        private EnviroFlatCloudsModule myTarget; 

        //Properties Cirrus
        private SerializedProperty useCirrusClouds,cirrusCloudsTex, cirrusCloudsAlpha,cirrusCloudsCoverage, cirrusCloudsColorPower, cirrusCloudsColor, cirrusCloudsWindIntensity;

        //Properties 2D
        private SerializedProperty useFlatClouds, flatCloudsBaseTex, flatCloudsDetailTex, flatCloudsLightColor, flatCloudsAmbientColor, flatCloudsLightIntensity, flatCloudsAmbientIntensity, 
        flatCloudsAbsorbtion, flatCloudsHGPhase, flatCloudsCoverage, flatCloudsDensity, flatCloudsAltitude, flatCloudsTonemapping, flatCloudsBaseTiling, flatCloudsDetailTiling, flatCloudsWindIntensity,flatCloudsDetailWindIntensity;

        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroFlatCloudsModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            useCirrusClouds = serializedObj.FindProperty("settings.useCirrusClouds");
            cirrusCloudsTex = serializedObj.FindProperty("settings.cirrusCloudsTex");
            cirrusCloudsAlpha = serializedObj.FindProperty("settings.cirrusCloudsAlpha");
            cirrusCloudsCoverage = serializedObj.FindProperty("settings.cirrusCloudsCoverage");
            cirrusCloudsColorPower = serializedObj.FindProperty("settings.cirrusCloudsColorPower");
            cirrusCloudsColor = serializedObj.FindProperty("settings.cirrusCloudsColor");
            cirrusCloudsWindIntensity = serializedObj.FindProperty("settings.cirrusCloudsWindIntensity");

            //2D Clouds
            useFlatClouds = serializedObj.FindProperty("settings.useFlatClouds");
            flatCloudsBaseTex = serializedObj.FindProperty("settings.flatCloudsBaseTex");
            flatCloudsDetailTex = serializedObj.FindProperty("settings.flatCloudsDetailTex");
            flatCloudsLightColor  = serializedObj.FindProperty("settings.flatCloudsLightColor");
            flatCloudsAmbientColor = serializedObj.FindProperty("settings.flatCloudsAmbientColor"); 
            flatCloudsLightIntensity = serializedObj.FindProperty("settings.flatCloudsLightIntensity"); 
            flatCloudsAmbientIntensity = serializedObj.FindProperty("settings.flatCloudsAmbientIntensity");
            flatCloudsAbsorbtion = serializedObj.FindProperty("settings.flatCloudsAbsorbtion");
            flatCloudsHGPhase = serializedObj.FindProperty("settings.flatCloudsHGPhase");
            flatCloudsCoverage = serializedObj.FindProperty("settings.flatCloudsCoverage");
            flatCloudsDensity = serializedObj.FindProperty("settings.flatCloudsDensity");
            flatCloudsAltitude  = serializedObj.FindProperty("settings.flatCloudsAltitude");
            flatCloudsTonemapping  = serializedObj.FindProperty("settings.flatCloudsTonemapping");
            flatCloudsBaseTiling = serializedObj.FindProperty("settings.flatCloudsBaseTiling");
            flatCloudsDetailTiling = serializedObj.FindProperty("settings.flatCloudsDetailTiling");
            flatCloudsWindIntensity = serializedObj.FindProperty("settings.flatCloudsWindIntensity");
            flatCloudsDetailWindIntensity = serializedObj.FindProperty("settings.flatCloudsDetailWindIntensity");

        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

             base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Flat Clouds", headerFoldout);
             
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.FlatClouds); 
                DestroyImmediate(this);
                return;
            }  
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            { 
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Cirrus Clouds
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showCirrusCloudsControls = GUILayout.Toggle(myTarget.showCirrusCloudsControls, "Cirrus Clouds", headerFoldout);               
                if(myTarget.showCirrusCloudsControls)
                {
                    GUILayout.Space(10);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(useCirrusClouds);
                    DisableInputEndQuality();
                    EditorGUILayout.PropertyField(cirrusCloudsTex);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(cirrusCloudsAlpha);
                    EditorGUILayout.PropertyField(cirrusCloudsCoverage);              
                    EditorGUILayout.PropertyField(cirrusCloudsColorPower);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(cirrusCloudsColor);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(cirrusCloudsWindIntensity);
                    
                } 
                GUILayout.EndVertical();

                if( myTarget.showCirrusCloudsControls)
                    GUILayout.Space(10);

                // 2D Clouds
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.show2DCloudsControls = GUILayout.Toggle(myTarget.show2DCloudsControls, "2D Clouds", headerFoldout);               
                if(myTarget.show2DCloudsControls)
                {
                    GUILayout.Space(10);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(useFlatClouds);
                    DisableInputEndQuality();
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(flatCloudsBaseTex);
                    EditorGUILayout.PropertyField(flatCloudsBaseTiling);
                    EditorGUILayout.PropertyField(flatCloudsDetailTex);
                    EditorGUILayout.PropertyField(flatCloudsDetailTiling);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(flatCloudsLightColor);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(flatCloudsLightIntensity);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(flatCloudsAmbientColor);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(flatCloudsAmbientIntensity);        
                    EditorGUILayout.PropertyField(flatCloudsAbsorbtion);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(flatCloudsHGPhase);
                    GUILayout.Space(5);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(flatCloudsCoverage);
                    EditorGUILayout.PropertyField(flatCloudsDensity);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(flatCloudsAltitude);
                    EditorGUILayout.PropertyField(flatCloudsTonemapping);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(flatCloudsWindIntensity);
                    EditorGUILayout.PropertyField(flatCloudsDetailWindIntensity);
                }  
                GUILayout.EndVertical();

                   if( myTarget.show2DCloudsControls)
                    GUILayout.Space(10);



                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();
 
            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFlatCloudsModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFogModule.cs---------------


using System.Collections; 
using System.Collections.Generic;
using UnityEngine;
using System.Runtime.InteropServices;
using System;
using UnityEngine.Rendering;

namespace Enviro 
{
    [Serializable]
    public class EnviroFogSettings
    { 
        /// Volumetrics Settings
        public bool volumetrics = true;
        public enum Quality
        {
            Low,
            Medium,
            High 
        }
 
        public int steps = 32;
        public Quality quality;

        [Range(0f,2f)]
        public float scattering;

        public AnimationCurve scatteringMultiplier = new AnimationCurve(new Keyframe(0, 1), new Keyframe(1, 1));
        [Range(0f,1f)]
        public float extinction;
        [Range(0f,1f)] 
        public float anistropy; 
        public float maxRange = 1000f;
        public float maxRangePointSpot = 100f;

        [Range(0f,1f)] 
        public float noiseIntensity;
        [Range(0f,0.01f)]
        public float noiseScale;
        public Vector3 windDirection;
        public Texture3D noise;
        public Texture2D ditheringTex;


        //Height Fog Settings
        public bool fog = true;

        public Vector3 floatingPointOriginMod;

        public float globalFogHeight = 0f;

        [Range(0.0f,1f)]
        public float fogDensity = 0.02f; // This is the global density factor, which can be thought of as the fog layer's thickness.

        [Range(0.001f, 0.1f)]
        public float fogHeightFalloff = 0.2f; // Height density factor, controls how the density increases as height decreases. Smaller values make the transition larger.
         public float fogHeight = 0.0f;
        [Range(0.0f, 1f)]
        public float fogDensity2 = 0.02f;
        [Range(0.001f, 0.1f)]
        public float fogHeightFalloff2 = 0.2f;
        public float fogHeight2;   
        [Range(0.0f,1.0f)]
        public float fogMaxOpacity = 1.0f; 
        [Range(0.01f,5000.0f)]
        public float startDistance = 0.0f; 
        [Range(0.0f,1.0f)]
        public float fogColorBlend = 0.5f;
        public Color fogColorMod = Color.white;

        [GradientUsage(true)]
        public Gradient ambientColorGradient;

        /// 3D Type
        /*public float fogRange = 2000f;
        public float lightIntensityMult = 0.1f;
        public float constantFog = 100f;
        public float heightFogExponent = 0f;
        public float heightFogAmount = 0f;
        public float noiseFogAmount = 0f;
        public float noiseFogScale = 0f; 
        public float reprojectionFactor = 0.0f;
        public float depthBias = 0.0f;
        */
    #if ENVIRO_HDRP
        //HDRP Fog
        public bool controlHDRPFog;
        public float fogAttenuationDistance = 400f;
        public float baseHeight = 0f;
        public float maxHeight = 50f;
        [GradientUsage(true)]
        public Gradient fogColorTint;
        
        //HDRP Volumetrics
        public bool controlHDRPVolumetrics;
        [GradientUsage(true)]
        public Gradient volumetricsColorTint;
        [Range(0f,1f)]
        public float ambientDimmer = 1f;
        [Range(0f,10f)]
        public float directLightMultiplier = 1f;
        [Range(0f,1f)]
        public float directLightShadowdimmer = 1f;
    #endif

    //Unity Fog
    public bool unityFog = false;
    public FogMode unityFogMode = FogMode.Exponential;
    public float unityFogDensity = 0.002f;
    public float unityFogStartDistance = 0f;
    public float unityFogEndDistance = 1000f;
    [GradientUsage(true)]     
    public Gradient unityFogColor = new Gradient();
    } 

    [Serializable]
    public class EnviroFogModule : EnviroModule
    {  
        //Settings
        public Enviro.EnviroFogSettings Settings;
        public EnviroFogModule preset;
        public bool showFogControls;
        public bool showVolumetricsControls;
    #if ENVIRO_HDRP
        public bool showHDRPFogControls;
    #endif
        public bool showUnityFogControls;

        //Fog Zones and Lights
        public List<EnviroVolumetricFogLight> fogLights = new List<EnviroVolumetricFogLight>();
        private Light myLight;

        //Materials
        public Material fogMat;
        public Material volumetricsMat;
        public Material blurMat;

        public Material blurMat2;

        // Textures
        public RenderTexture volumetricsRenderTexture;
        #if ENVIRO_URP && UNITY_6000_0_OR_NEWER
        public UnityEngine.Rendering.RenderGraphModule.TextureHandle volumetricsRenderTextureHandle;
        Material blitThroughMat;
        #endif
        //Point Lights
        struct PointLightParams
        {
            public Vector3 pos;
            public float range;
            public Vector3 color;
            float padding;
        }

        PointLightParams[] m_PointLightParams;
        ComputeBuffer m_PointLightParamsCB;

        //Spot Lights
        struct SpotLightParams
        {
            public Vector3 pos;
            public float range;
            public Vector3 color;
            public Vector3 lightDirection;
            public float lightCosHalfAngle;
            float padding;
        }
        SpotLightParams[] m_SpotLightParams;
        ComputeBuffer m_SpotLightParamsCB;


    #if ENVIRO_HDRP
        public UnityEngine.Rendering.HighDefinition.Fog fogHDRP;
    #endif

    private EnviroVolumetricFogLight directionaLight;
    private EnviroVolumetricFogLight additionalLight;
        /// 3D Type
        //public List<EnviroFogLight> vFogLights = new List<EnviroFogLight>();
        //
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       Update Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        public override void Enable()
        {
            if(EnviroManager.instance == null)
               return;

        #if !ENVIRO_HDRP
            if(EnviroManager.instance.Objects.directionalLight != null)
            {
                if(EnviroManager.instance.Objects.directionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>() == null)
                   directionaLight = EnviroManager.instance.Objects.directionalLight.gameObject.AddComponent<EnviroVolumetricFogLight>();
            }  

            if(EnviroManager.instance.Objects.additionalDirectionalLight != null)
            {
                if(EnviroManager.instance.Objects.additionalDirectionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>() == null)
                   additionalLight = EnviroManager.instance.Objects.additionalDirectionalLight.gameObject.AddComponent<EnviroVolumetricFogLight>();
            } 
        #endif
        }

        public override void Disable()
        {
            if(EnviroManager.instance == null)
               return;

            CleanupHeightFog();
            CleanupVolumetrics();
            
            if(EnviroManager.instance.Objects.directionalLight != null)
            {
                if(EnviroManager.instance.Objects.directionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>() != null)
                   DestroyImmediate(EnviroManager.instance.Objects.directionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>());
            } 

            if(EnviroManager.instance.Objects.additionalDirectionalLight != null)
            {
                if(EnviroManager.instance.Objects.additionalDirectionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>() != null)
                   DestroyImmediate(EnviroManager.instance.Objects.additionalDirectionalLight.gameObject.GetComponent<EnviroVolumetricFogLight>());
            }
        }
             
        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return; 

        #if ENVIRO_HDRP
            UpdateFogHDRP ();
        #else
            UpdateUnityFog ();
        #endif
        
            if(additionalLight != null && directionaLight != null)
            {
                if(EnviroManager.instance.isNight)
                {
                    additionalLight.enabled = true;
                    directionaLight.enabled = false;
                }
                else
                {
                    directionaLight.enabled = true;
                    additionalLight.enabled = false;
                }
            }
        }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       Public general functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool AddLight (EnviroVolumetricFogLight light)
        {
            fogLights.Add(light);
            return true;
        }
        public void RemoveLight (EnviroVolumetricFogLight light)
        {
         if(fogLights.Contains(light))
            fogLights.Remove(light);
        }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       HDRP
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if ENVIRO_HDRP
        private void UpdateFogHDRP ()
        {
            if(EnviroManager.instance.volumeHDRP != null && EnviroManager.instance.volumeProfileHDRP != null) 
            { 
                if(fogHDRP == null)
                {
                    UnityEngine.Rendering.HighDefinition.Fog TempFog;

                    if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.Fog>(out TempFog))
                    {
                        fogHDRP = TempFog;
                    }
                    else 
                    {
                        EnviroManager.instance.volumeProfileHDRP.Add<UnityEngine.Rendering.HighDefinition.Fog>();

                        if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.Fog>(out TempFog))
                        {
                            fogHDRP = TempFog;
                        }
                    }
                }
                else
                { 
                    if(Settings.controlHDRPFog)
                    {
                        fogHDRP.active = true;
                        fogHDRP.enabled.overrideState = true;
                        fogHDRP.enabled.value = Settings.controlHDRPFog;
                        fogHDRP.meanFreePath.overrideState = true;
                        fogHDRP.meanFreePath.value = Settings.fogAttenuationDistance;
                        fogHDRP.baseHeight.overrideState = true;
                        fogHDRP.baseHeight.value = Settings.baseHeight;
                        fogHDRP.maximumHeight.overrideState = true;
                        fogHDRP.maximumHeight.value = Settings.maxHeight;
                        fogHDRP.tint.overrideState = true;
                        fogHDRP.tint.value = Settings.fogColorTint.Evaluate(EnviroManager.instance.solarTime); 
                    }
                    else
                    {
                        fogHDRP.active = false;
                    }
                    if(Settings.controlHDRPVolumetrics)
                    {
                        fogHDRP.enableVolumetricFog.overrideState = true;
                        fogHDRP.enableVolumetricFog.value = true;
                        fogHDRP.albedo.overrideState = true;
                        fogHDRP.albedo.value = Settings.volumetricsColorTint.Evaluate(EnviroManager.instance.solarTime); 
                        fogHDRP.globalLightProbeDimmer.overrideState = true;
                        fogHDRP.globalLightProbeDimmer.value = Settings.ambientDimmer;

                        if(EnviroManager.instance.Lighting != null && EnviroManager.instance.Lighting.directionalLightHDRP != null)
                        {
                            EnviroManager.instance.Lighting.directionalLightHDRP.volumetricDimmer = Settings.directLightMultiplier;
                            EnviroManager.instance.Lighting.directionalLightHDRP.volumetricShadowDimmer = Settings.directLightShadowdimmer;
                        }
                        if(EnviroManager.instance.Lighting != null && EnviroManager.instance.Lighting.additionalLightHDRP != null)
                        { 
                            EnviroManager.instance.Lighting.additionalLightHDRP.volumetricDimmer = Settings.directLightMultiplier;
                            EnviroManager.instance.Lighting.additionalLightHDRP.volumetricShadowDimmer = Settings.directLightShadowdimmer;
                        }
                    }
                    else
                    {
                        fogHDRP.enableVolumetricFog.value = false;
                    }
                }
            }
        }
#endif

    private void UpdateUnityFog ()
    {
        RenderSettings.fog = Settings.unityFog; 
        RenderSettings.fogMode = Settings.unityFogMode;

        if(Settings.unityFogMode == FogMode.Linear)
        {
            RenderSettings.fogStartDistance = Settings.unityFogStartDistance;
            RenderSettings.fogEndDistance = Settings.unityFogEndDistance;
        }
        else
        {
            RenderSettings.fogDensity = Settings.unityFogDensity;
        }

        RenderSettings.fogColor = Settings.unityFogColor.Evaluate(EnviroManager.instance.solarTime) * (Settings.fogColorMod * EnviroManager.instance.solarTime);
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       Height Fog
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
        public void UpdateFogShader (Camera cam) 
        {  
            Shader.SetGlobalVector("_EnviroFogParameters", new Vector4(0f, Settings.fogHeightFalloff, Settings.fogDensity * 0.01f, Settings.fogHeight + Settings.globalFogHeight));
            Shader.SetGlobalVector("_EnviroFogParameters2", new Vector4(0f, Settings.fogHeightFalloff2, Settings.fogDensity2 * 0.01f, Settings.fogHeight2 + Settings.globalFogHeight));
            Shader.SetGlobalVector("_EnviroFogParameters3",new Vector4(1.0f - Settings.fogMaxOpacity,Settings.startDistance,0f,Settings.fogColorBlend));
            Shader.SetGlobalColor("_EnviroFogColor", Settings.ambientColorGradient.Evaluate(EnviroManager.instance.solarTime) * (Settings.fogColorMod * EnviroManager.instance.solarTime));
            if (EnviroManager.instance.Objects.worldAnchor != null) 
                Settings.floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                Settings.floatingPointOriginMod = Vector3.zero;
             
            Shader.SetGlobalVector("_EnviroCameraPos",cam.transform.position - Settings.floatingPointOriginMod);
            Shader.SetGlobalVector("_EnviroWorldOffset",Settings.floatingPointOriginMod);
        } 
 
        public void RenderHeightFog(Camera cam, RenderTexture source, RenderTexture destination)
        {
            UnityEngine.Profiling.Profiler.BeginSample("Enviro Fog Rendering");

            if(fogMat == null)
               fogMat = new Material(Shader.Find("Hidden/EnviroHeightFog"));

            UpdateFogShader(cam);

            fogMat.SetTexture("_MainTex",source); 
            Graphics.Blit(source, destination, fogMat);
            UnityEngine.Profiling.Profiler.EndSample();
        }

#if ENVIRO_URP 
#if UNITY_6000_0_OR_NEWER
        public void RenderHeightFogURP(EnviroURPRenderGraph renderer, UnityEngine.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.Universal.UniversalResourceData resourceData, UnityEngine.Rendering.Universal.UniversalCameraData cameraData, UnityEngine.Rendering.RenderGraphModule.TextureHandle src, UnityEngine.Rendering.RenderGraphModule.TextureHandle target)
        { 
             if(fogMat == null)
                fogMat = new Material(Shader.Find("Hidden/EnviroHeightFogURP"));
 
                UpdateFogShader(cameraData.camera);  
                fogMat.EnableKeyword("ENVIROURP");

            if(volumetricsRenderTextureHandle.IsValid())
            {
                renderer.Blit("Fog", renderGraph, fogMat, src, target, 0, volumetricsRenderTextureHandle,"_EnviroVolumetricFogTex"); 
            }
            else
            {
                renderer.Blit("Fog", renderGraph, fogMat, src, target, 0);      
            }
        }
#endif 
        public void RenderHeightFogURP(Camera cam,EnviroURPRenderPass pass,UnityEngine.Rendering.CommandBuffer cmd, RenderTexture source, UnityEngine.Rendering.RenderTargetIdentifier destination)
        {
            if(fogMat == null)
               fogMat = new Material(Shader.Find("Hidden/EnviroHeightFog"));
 
            UpdateFogShader(cam);
            fogMat.EnableKeyword("ENVIROURP");


            pass.CustomBlit(cmd,cam.cameraToWorldMatrix,source,destination,fogMat);
        }
#endif

#if ENVIRO_HDRP
        public void RenderHeightFogHDRP(Camera cam,UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination)
        {
            if(fogMat == null)
               fogMat = new Material(Shader.Find("Hidden/EnviroHeightFogHDRP"));
   
            UpdateFogShader(cam);
            fogMat.SetTexture("_MainTex",source);
            
            cmd.Blit(source, destination, fogMat);
        }
#endif

        private void CleanupHeightFog()
        {
            if(EnviroManager.instance == null)
               return;

            if(fogMat != null)
               DestroyImmediate(fogMat);

            if(EnviroManager.instance.removeZoneParamsCB != null)
            EnviroHelper.ReleaseComputeBuffer(ref EnviroManager.instance.removeZoneParamsCB);

            if(EnviroManager.instance.clearZoneCB != null)
            EnviroHelper.ReleaseComputeBuffer(ref EnviroManager.instance.clearZoneCB);   

            if(EnviroManager.instance.clearCB != null)
            EnviroHelper.ReleaseComputeBuffer(ref EnviroManager.instance.clearCB);   
        }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       Volumetrics
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        public void RenderVolumetrics(Camera camera, RenderTexture source)
        {
            UnityEngine.Profiling.Profiler.BeginSample("Enviro Volumetrics Rendering");

            if(Settings.volumetrics == false || camera.cameraType == CameraType.Reflection)
            {       
                Shader.DisableKeyword("ENVIRO_VOLUMELIGHT"); 
                return;
            }
            else
            {
                Shader.EnableKeyword("ENVIRO_VOLUMELIGHT"); 
            }

            if(volumetricsMat == null)
               volumetricsMat = new Material(Shader.Find("Hidden/Volumetrics"));

            if(blurMat == null)
               blurMat = new Material(Shader.Find("Hidden/EnviroBlur"));

            CreateVolumetricsBuffers();
            SetUpPointLightBuffers();
            SetUpSpotLightBuffers();

            UpdateVolumetricsShader(volumetricsMat);

            //if(cloudsTex != null)
            //   volumetricsMat.SetTexture("_CloudsTex", cloudsTex);

            RenderTextureDescriptor desc = source.descriptor;
            desc.msaaSamples = 1;

            if(volumetricsRenderTexture != null)
            DestroyImmediate(volumetricsRenderTexture);

            volumetricsRenderTexture = new RenderTexture(desc);

        if(Settings.quality == EnviroFogSettings.Quality.High)
        {      
            RenderTexture target = RenderTexture.GetTemporary(desc);
            
            volumetricsMat.SetTexture("_MainTex",source);
            Graphics.Blit(source,target,volumetricsMat);

            RenderTexture temp = RenderTexture.GetTemporary(desc);

            // horizontal bilateral blur at full res
            blurMat.SetTexture("_MainTex",target);
            Graphics.Blit(target, temp, blurMat, 0);
            // vertical bilateral blur at full res
            blurMat.SetTexture("_MainTex",temp);
            Graphics.Blit(temp, target, blurMat, 1);

            Graphics.Blit(target, volumetricsRenderTexture);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
        }
        else if(Settings.quality == EnviroFogSettings.Quality.Medium)
        {
            desc.width = source.width / 2;
            desc.height = source.height / 2;
            RenderTexture target = RenderTexture.GetTemporary(desc);
            RenderTexture depth = RenderTexture.GetTemporary(desc);
            depth.filterMode = FilterMode.Point;

            volumetricsMat.SetTexture("_MainTex",source);
            Graphics.Blit(source,target,volumetricsMat);

            blurMat.SetTexture("_MainTex",source);
            Graphics.Blit(source, depth, blurMat, 4);

            blurMat.SetTexture("_HalfResDepthBuffer", depth);
            blurMat.SetTexture("_HalfResColor", target);

            RenderTexture temp = RenderTexture.GetTemporary(desc);
            // horizontal bilateral blur at half res
             blurMat.SetTexture("_MainTex",target);
            Graphics.Blit(target, temp, blurMat, 2);
                
            // vertical bilateral blur at half res
             blurMat.SetTexture("_MainTex",temp);
            Graphics.Blit(temp, target, blurMat, 3);
                
            // upscale to full res
             blurMat.SetTexture("_MainTex",target);
            Graphics.Blit(target, volumetricsRenderTexture, blurMat, 5);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
            RenderTexture.ReleaseTemporary(depth);
        }
        else if (Settings.quality == EnviroFogSettings.Quality.Low)
        {
            desc.width = source.width / 2;
            desc.height = source.height / 2;
            RenderTexture depthHalf = RenderTexture.GetTemporary(desc);
            depthHalf.filterMode = FilterMode.Point;
            desc.width = source.width / 4;
            desc.height = source.height / 4;
            RenderTexture target = RenderTexture.GetTemporary(desc);
            RenderTexture depthQuarter = RenderTexture.GetTemporary(desc);
            depthQuarter.filterMode = FilterMode.Point;
            
            volumetricsMat.SetTexture("_MainTex",source);
            Graphics.Blit(source,target,volumetricsMat);

            blurMat.SetTexture("_MainTex",source);
            Graphics.Blit(source, depthHalf, blurMat,4);
            Graphics.Blit(source, depthQuarter, blurMat,6);


            blurMat.SetTexture("_HalfResDepthBuffer", depthHalf);
            blurMat.SetTexture("_QuarterResDepthBuffer", depthQuarter);
            //blurMat.SetTexture("_HalfResColor", target);
            blurMat.SetTexture("_QuarterResColor", target);


            RenderTexture temp = RenderTexture.GetTemporary(desc);

            // horizontal bilateral blur at half res
             blurMat.SetTexture("_MainTex",target);
            Graphics.Blit(target, temp, blurMat, 8);     
            // vertical bilateral blur at half res
             blurMat.SetTexture("_MainTex",temp);
            Graphics.Blit(temp, target, blurMat, 9);
                
            // upscale to full res
             blurMat.SetTexture("_MainTex",target);
            Graphics.Blit(target, volumetricsRenderTexture, blurMat, 7);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
            RenderTexture.ReleaseTemporary(depthHalf);
            RenderTexture.ReleaseTemporary(depthQuarter);
        }

        Shader.SetGlobalTexture("_EnviroVolumetricFogTex", volumetricsRenderTexture);

        UnityEngine.Profiling.Profiler.EndSample();
        }

#if ENVIRO_URP

        public void RenderVolumetricsURP(Camera camera, EnviroURPRenderPass pass, UnityEngine.Rendering.CommandBuffer cmd, RenderTexture source)
        { 
            if(Settings.volumetrics == false || camera.cameraType == CameraType.Reflection)
            {       
                Shader.DisableKeyword("ENVIRO_VOLUMELIGHT"); 
                return;
            }
            else
            {
                Shader.EnableKeyword("ENVIRO_VOLUMELIGHT"); 
            }

            //Shader.EnableKeyword("ENVIRO_VOLUMELIGHT"); 

            if(volumetricsMat == null)
               volumetricsMat = new Material(Shader.Find("Hidden/VolumetricsURP"));

            if(blurMat == null)
               blurMat = new Material(Shader.Find("Hidden/EnviroBlur"));

            CreateVolumetricsBuffers(); 
            SetUpPointLightBuffers();  
            SetUpSpotLightBuffers();

            UpdateVolumetricsShader(volumetricsMat);

            volumetricsMat.EnableKeyword("ENVIROURP");
            blurMat.EnableKeyword("ENVIROURP");

            RenderTextureDescriptor desc = source.descriptor;
            desc.colorFormat = RenderTextureFormat.ARGBHalf;
            desc.msaaSamples = 1; 
            desc.depthBufferBits = 0;

            if(volumetricsRenderTexture != null)
            DestroyImmediate(volumetricsRenderTexture);

            volumetricsRenderTexture = new RenderTexture(desc);

        if(Settings.quality == EnviroFogSettings.Quality.High)
        {      
            RenderTexture target = RenderTexture.GetTemporary(desc);
 
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,target,volumetricsMat); 

            RenderTexture temp = RenderTexture.GetTemporary(desc);

            // horizontal bilateral blur at full res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,temp,blurMat,0);
            // vertical bilateral blur at full res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,temp,target,blurMat,1);

            //Graphics.Blit(target, volumetricsRenderTexture);
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,volumetricsRenderTexture);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
        }
        else if(Settings.quality == EnviroFogSettings.Quality.Medium)
        {
            desc.width = source.width / 2;
            desc.height = source.height / 2;
            RenderTexture target = RenderTexture.GetTemporary(desc);
            RenderTexture depth = RenderTexture.GetTemporary(desc);
            depth.filterMode = FilterMode.Point;

            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,target,volumetricsMat);
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,depth,blurMat,4);

            blurMat.SetTexture("_HalfResDepthBuffer", depth);
            blurMat.SetTexture("_HalfResColor", target);

            RenderTexture temp = RenderTexture.GetTemporary(desc);
            // horizontal bilateral blur at half res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,temp,blurMat,2);
                
            // vertical bilateral blur at half res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,temp,target,blurMat,3);
                
            // upscale to full res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,volumetricsRenderTexture,blurMat,5);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
            RenderTexture.ReleaseTemporary(depth);
        }
        else if (Settings.quality == EnviroFogSettings.Quality.Low)
        {
            desc.width = source.width / 2;
            desc.height = source.height / 2;
            RenderTexture depthHalf = RenderTexture.GetTemporary(desc);
            depthHalf.filterMode = FilterMode.Point;
            desc.width = source.width / 4;
            desc.height = source.height / 4;
            RenderTexture target = RenderTexture.GetTemporary(desc);
            RenderTexture depthQuarter = RenderTexture.GetTemporary(desc);
            depthQuarter.filterMode = FilterMode.Point;
            
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,target,volumetricsMat);

            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,depthHalf,blurMat,4);
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,source,depthQuarter,blurMat,6);

            blurMat.SetTexture("_HalfResDepthBuffer", depthHalf);
            blurMat.SetTexture("_QuarterResDepthBuffer", depthQuarter);
            //blurMat.SetTexture("_HalfResColor", target);
            blurMat.SetTexture("_QuarterResColor", target);
 

            RenderTexture temp = RenderTexture.GetTemporary(desc);

            // horizontal bilateral blur at half res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,temp,blurMat,8);     
            // vertical bilateral blur at half res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,temp,target,blurMat,9);
                
            // upscale to full res
            pass.CustomBlit(cmd,camera.cameraToWorldMatrix,target,volumetricsRenderTexture,blurMat,7);
            RenderTexture.ReleaseTemporary(temp);
            RenderTexture.ReleaseTemporary(target);
            RenderTexture.ReleaseTemporary(depthHalf);
            RenderTexture.ReleaseTemporary(depthQuarter);
        }

            Shader.SetGlobalTexture("_EnviroVolumetricFogTex", volumetricsRenderTexture);
        }

#if UNITY_6000_0_OR_NEWER
        //URP New Render Graph
        public void RenderVolumetricsURP(EnviroURPRenderGraph renderer, UnityEngine.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.Universal.UniversalResourceData resourceData, UnityEngine.Rendering.Universal.UniversalCameraData cameraData, UnityEngine.Rendering.RenderGraphModule.TextureHandle src)
        { 
            if(Settings.volumetrics == false || cameraData.cameraType == CameraType.Reflection)
            {       
                Shader.DisableKeyword("ENVIRO_VOLUMELIGHT"); 
                return;
            }
            else
            {
                Shader.EnableKeyword("ENVIRO_VOLUMELIGHT"); 
            }

            if(volumetricsMat == null)
               volumetricsMat = new Material(Shader.Find("Hidden/VolumetricsURP"));

            volumetricsMat.EnableKeyword("ENVIROURP17");

            if(blurMat == null)
               blurMat = new Material(Shader.Find("Hidden/EnviroBlurURP"));

            if(blurMat2 == null) 
               blurMat2 = new Material(Shader.Find("Hidden/EnviroBlurURP"));

            CreateVolumetricsBuffers(); 
            SetUpPointLightBuffers();  
            SetUpSpotLightBuffers();

            UpdateVolumetricsShader(volumetricsMat);

            volumetricsMat.EnableKeyword("ENVIROURP");
            blurMat.EnableKeyword("ENVIROURP17");
            blurMat2.EnableKeyword("ENVIROURP17");
            
            //if(cloudsTex != null)
            //   volumetricsMat.SetTexture("_CloudsTex", cloudsTex);

            UnityEngine.Rendering.RenderGraphModule.TextureDesc desc = src.GetDescriptor(renderGraph);
  
            desc.colorFormat = UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_SFloat;
            desc.msaaSamples = UnityEngine.Rendering.MSAASamples.None; 
            desc.depthBufferBits = 0;

            RenderTextureDescriptor renderTextureDescriptor = new RenderTextureDescriptor(desc.width,desc.height,RenderTextureFormat.ARGBHalf,0);


            volumetricsRenderTextureHandle = renderGraph.CreateTexture(desc);

        if(Settings.quality == EnviroFogSettings.Quality.High)
        {      
            UnityEngine.Rendering.RenderGraphModule.TextureHandle target = renderGraph.CreateTexture(desc);
            
            renderer.Blit("Render Volumetrics Mask", renderGraph,volumetricsMat,src,target,0);

            UnityEngine.Rendering.RenderGraphModule.TextureHandle temp = renderGraph.CreateTexture(desc);

            // We somehow need two materials otherwise it does not set the correct main tex. Must be rendergraph bug?!
            renderer.Blit("Horizontal Blur", renderGraph,blurMat,target,temp,0);
            renderer.Blit("Vertical Blur", renderGraph,blurMat2,temp,target,1);
  
            if(blitThroughMat == null)
               blitThroughMat = new Material(Shader.Find("Hidden/EnviroBlitThroughURP17"));

            renderer.Blit("Volumetrics Final Blit", renderGraph,blitThroughMat,target,volumetricsRenderTextureHandle,0);

        }
        else if(Settings.quality == EnviroFogSettings.Quality.Medium)
        {
            desc.width = src.GetDescriptor(renderGraph).width / 2;
            desc.height = src.GetDescriptor(renderGraph).height / 2;
            UnityEngine.Rendering.RenderGraphModule.TextureHandle target = renderGraph.CreateTexture(desc);
            UnityEngine.Rendering.RenderGraphModule.TextureDesc descPointFilter = desc;
            descPointFilter.filterMode = FilterMode.Point;
            descPointFilter.colorFormat = UnityEngine.Experimental.Rendering.GraphicsFormat.R32_SFloat;

            UnityEngine.Rendering.RenderGraphModule.TextureHandle depth = renderGraph.CreateTexture(descPointFilter);

            renderer.Blit("Render Volumetrics Mask", renderGraph,volumetricsMat,src,target,0);        
            
            renderer.Blit("depth blur",renderGraph,blurMat,src,depth,4);


            UnityEngine.Rendering.RenderGraphModule.TextureHandle temp = renderGraph.CreateTexture(desc);
            
            // horizontal bilateral blur at half res
            renderer.Blit("horizontal bilateral blur", renderGraph,blurMat,target,temp,2, depth, "_HalfResDepthBuffer");//, target , "_HalfResColor");
                 
            // vertical bilateral blur at half res
            renderer.Blit("vertical bilateral blur", renderGraph,blurMat2,temp,target,3, depth,"_HalfResDepthBuffer");//, target , "_HalfResColor");
                
            // upscale to full res
            renderer.Blit("upscale", renderGraph,blurMat,target,volumetricsRenderTextureHandle,5, depth,"_HalfResDepthBuffer", target, "_HalfResColor");//, target , "_HalfResColor");
   
        }
        else if (Settings.quality == EnviroFogSettings.Quality.Low)
        {
            desc.width = src.GetDescriptor(renderGraph).width / 2;
            desc.height = src.GetDescriptor(renderGraph).height / 2;
            
            UnityEngine.Rendering.RenderGraphModule.TextureDesc depthHalfdesc = desc;
            depthHalfdesc.colorFormat = UnityEngine.Experimental.Rendering.GraphicsFormat.R32_SFloat;
            depthHalfdesc.filterMode = FilterMode.Point;

            UnityEngine.Rendering.RenderGraphModule.TextureHandle depthHalf = renderGraph.CreateTexture(depthHalfdesc);

            desc.width = src.GetDescriptor(renderGraph).width / 4;
            desc.height = src.GetDescriptor(renderGraph).height / 4;
            UnityEngine.Rendering.RenderGraphModule.TextureHandle target = renderGraph.CreateTexture(desc);

            UnityEngine.Rendering.RenderGraphModule.TextureDesc depthQuarterdesc = desc;
            depthQuarterdesc.colorFormat = UnityEngine.Experimental.Rendering.GraphicsFormat.R32_SFloat;
            depthQuarterdesc.filterMode = FilterMode.Point;

            UnityEngine.Rendering.RenderGraphModule.TextureHandle depthQuarter = renderGraph.CreateTexture(depthQuarterdesc);
            
            renderer.Blit("Render Volumetrics Mask", renderGraph,volumetricsMat,src,target,0);

            renderer.Blit("depth blur", renderGraph,blurMat,src,depthHalf,4);
            renderer.Blit("depth blur", renderGraph,blurMat,src,depthQuarter,6, depthHalf, "_HalfResDepthBuffer");
 
 
            UnityEngine.Rendering.RenderGraphModule.TextureHandle temp = renderGraph.CreateTexture(desc);

            // horizontal bilateral blur at half res 
            renderer.Blit("horizontal bilateral blur", renderGraph,blurMat,target,temp,8,depthQuarter, "_QuarterResDepthBuffer", target , "_QuarterResColor");     
            // vertical bilateral blur at half res
            renderer.Blit("horizontal bilateral blur", renderGraph,blurMat2,temp,target,9,depthQuarter, "_QuarterResDepthBuffer");     
             
            // upscale to full res 
            renderer.Blit("upscale", renderGraph,blurMat,target,volumetricsRenderTextureHandle,7,depthQuarter,"_QuarterResDepthBuffer", target , "_QuarterResColor");
    
        }
           // if(Settings.volumetrics == true || cameraData.cameraType != CameraType.Reflection)
           // {  
           // Shader.SetGlobalTexture("_EnviroVolumetricFogTex", volumetricsRenderTextureHandle);
           // }
        }
#endif
#endif

        private void UpdateVolumetricsShader(Material mat)
        {    
            if(EnviroManager.instance.Lighting != null)
            {
               myLight = EnviroHelper.GetDirectionalLight();
            }
            else
            {
                if(myLight == null)
                   myLight = EnviroHelper.GetDirectionalLight();
            }

            mat.SetInt("_Steps", Settings.steps);

            if(myLight == null)
            { 
                mat.SetVector("_DirLightDir", new Vector4(0f, 0f, 0f, 1.0f / 2.0f));
                Shader.SetGlobalColor("_EnviroDirLightColor", Color.white * 1.0f);
            }
            else
            {
                mat.SetVector("_DirLightDir", new Vector4(myLight.transform.forward.x, myLight.transform.forward.y, myLight.transform.forward.z, 1.0f / (myLight.range * myLight.range)));
                Shader.SetGlobalColor("_EnviroDirLightColor", myLight.color * myLight.intensity);
            }
            mat.SetFloat("_MaxRayLength", Settings.maxRange);
            mat.SetFloat("_MaxRayLengthLights", Settings.maxRangePointSpot);
 
            mat.SetVector("_WindDirection", new Vector4(Settings.windDirection.x, Settings.windDirection.y,Settings.windDirection.z));
            mat.SetVector("_NoiseData", new Vector4(Settings.noiseScale, Settings.noiseIntensity));
            mat.SetVector("_MieG", new Vector4(Settings.anistropy, 1 + (Settings.anistropy * Settings.anistropy), 2 * Settings.anistropy, 1.0f / (4.0f * Mathf.PI)));
            mat.SetVector("_VolumetricLight", new Vector4(Settings.scattering * Settings.scatteringMultiplier.Evaluate(EnviroManager.instance.solarTime), Settings.extinction, 1f, 0f));// - SkyboxExtinctionCoef));
 
            mat.SetTexture("_NoiseTexture",Settings.noise); 
            mat.SetTexture("_DitherTexture",Settings.ditheringTex);

            mat.SetVector("_Randomness", new Vector4(UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value)); 
        }

        private void CreateVolumetricsBuffers()
        {
            int pointLightCount = 0, spotLightCount = 0;

            for(int i = 0; i < fogLights.Count; i++)
            {
                Enviro.EnviroVolumetricFogLight fogLight = fogLights[i];

                if (fogLight == null)
                    continue;

                bool isOn = fogLight.isOn;

                switch(fogLight.light.type)
                {
                    case LightType.Point: 	if (isOn) pointLightCount++; break;
                    case LightType.Spot: 	if (isOn) spotLightCount++; break;
                }
            } 

            EnviroHelper.CreateBuffer(ref m_PointLightParamsCB, pointLightCount, Marshal.SizeOf(typeof(PointLightParams)));
            EnviroHelper.CreateBuffer(ref m_SpotLightParamsCB, spotLightCount, Marshal.SizeOf(typeof(SpotLightParams)));
            EnviroHelper.CreateBuffer(ref EnviroManager.instance.clearCB, 1, 4);
        } 

        private void CleanupVolumetrics()
        {
            if(volumetricsMat != null)
               DestroyImmediate(volumetricsMat);

            if(blurMat != null)
                DestroyImmediate(blurMat);

            if(volumetricsRenderTexture != null)
                DestroyImmediate(volumetricsRenderTexture);

            EnviroHelper.ReleaseComputeBuffer(ref m_PointLightParamsCB);
            EnviroHelper.ReleaseComputeBuffer(ref m_SpotLightParamsCB);
            EnviroHelper.ReleaseComputeBuffer(ref EnviroManager.instance.clearCB);  
        }

        void SetUpPointLightBuffers()
        {
            int count = m_PointLightParamsCB == null ? 0 : m_PointLightParamsCB.count;
            volumetricsMat.SetFloat("_PointLightsCount", count);

            if (count == 0)
            {
                // Can't not set the buffer
                volumetricsMat.SetBuffer("_PointLights", EnviroManager.instance.clearCB);
                return;
            }
 
            if (m_PointLightParams == null || m_PointLightParams.Length != count)
                m_PointLightParams = new PointLightParams[count];

            int lightID = 0;
   
            for (int i = 0; i < fogLights.Count; i++)
            {
                Enviro.EnviroVolumetricFogLight fl = fogLights[i];

                if (fl == null || fl.light.type != LightType.Point || !fl.isOn)
                    continue;

                Light light = fl.light;
                m_PointLightParams[lightID].pos = light.transform.position;
                float range = light.range * fl.range;
                m_PointLightParams[lightID].range = 1.0f / (range * range);
                m_PointLightParams[lightID].color = new Vector3(light.color.r, light.color.g, light.color.b) * light.intensity * fl.intensity;
                lightID++;
            } 

            // TODO: try a constant buffer with setfloats instead for perf
            m_PointLightParamsCB.SetData(m_PointLightParams);
            volumetricsMat.SetBuffer("_PointLights", m_PointLightParamsCB);
        }

        void SetUpSpotLightBuffers()
        {
            int count = m_SpotLightParamsCB == null ? 0 : m_SpotLightParamsCB.count;
        
            volumetricsMat.SetFloat("_SpotLightsCount", count);

            if (count == 0)
            {
                // Can't not set the buffer
                volumetricsMat.SetBuffer("_SpotLights", EnviroManager.instance.clearCB);
                return; 
            }

            if (m_SpotLightParams == null || m_SpotLightParams.Length != count)
                m_SpotLightParams = new SpotLightParams[count];

            int lightID = 0;

            for (int i = 0; i < fogLights.Count; i++)
                {
                Enviro.EnviroVolumetricFogLight fl = fogLights[i];

                if (fl == null || fl.light.type != LightType.Spot || !fl.isOn)
                    continue;

                Light light = fl.light;
                m_SpotLightParams[lightID].pos = light.transform.position;
                float range = light.range * fl.range;
                m_SpotLightParams[lightID].range = 1.0f / (range * range);
                m_SpotLightParams[lightID].color = new Vector3(light.color.r, light.color.g, light.color.b) * light.intensity * fl.intensity;

                m_SpotLightParams[lightID].lightDirection = light.transform.forward;
                m_SpotLightParams[lightID].lightCosHalfAngle = Mathf.Cos(light.spotAngle * 0.5f * Mathf.Deg2Rad);
                lightID++;
                }
            m_SpotLightParamsCB.SetData(m_SpotLightParams);
            volumetricsMat.SetBuffer("_SpotLights", m_SpotLightParamsCB);
        }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///       Save and Load
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroFogSettings>(JsonUtility.ToJson(preset.Settings));
            }
            else
            { 
                Debug.Log("Please assign a saved module to load from!");
            }
        }
 
        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroFogModule t =  ScriptableObject.CreateInstance<EnviroFogModule>();
        t.name = "Fog Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroFogSettings>(JsonUtility.ToJson(Settings));

        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif 
        }

        public void SaveModuleValues (EnviroFogModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroFogSettings>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFogModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFogModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroFogModule))]
    public class EnviroFogModuleEditor : EnviroModuleEditor
    {  
        private EnviroFogModule myTarget; 

        //Properties
        private SerializedProperty fog, volumetrics, ditheringTex, quality, steps, scattering,scatteringMultiplier, extinction, anistropy, maxRange,maxRangePointSpot, noiseIntensity, noiseScale, windDirection, noise;
        private SerializedProperty globalFogHeight, fogDensity, fogHeightFalloff, fogHeight, fogDensity2, fogHeightFalloff2, fogHeight2, fogMaxOpacity, startDistance, fogColorBlend,fogColorMod,ambientColorGradient;
        private SerializedProperty unityFog, unityFogDensity, unityFogColor, unityFogMode, unityFogStartDistance, unityFogEndDistance;
    
    #if ENVIRO_HDRP
        private SerializedProperty controlHDRPFog, fogAttenuationDistance, baseHeight, maxHeight, fogColorTint;
        private SerializedProperty controlHDRPVolumetrics, volumetricsColorTint, ambientDimmer, directLightMultiplier, directLightShadowdimmer;
    #endif
        public override void OnEnable()
        {
            if(!target)
                return;

            myTarget = (EnviroFogModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            //Volumetrics
            volumetrics = serializedObj.FindProperty("Settings.volumetrics");
            quality = serializedObj.FindProperty("Settings.quality");
            steps = serializedObj.FindProperty("Settings.steps");
            scattering = serializedObj.FindProperty("Settings.scattering");
            scatteringMultiplier = serializedObj.FindProperty("Settings.scatteringMultiplier"); 
            extinction = serializedObj.FindProperty("Settings.extinction");
            anistropy = serializedObj.FindProperty("Settings.anistropy");
            maxRange = serializedObj.FindProperty("Settings.maxRange");
            maxRangePointSpot = serializedObj.FindProperty("Settings.maxRangePointSpot");
            noiseIntensity = serializedObj.FindProperty("Settings.noiseIntensity");
            noiseScale = serializedObj.FindProperty("Settings.noiseScale");
            windDirection= serializedObj.FindProperty("Settings.windDirection");
            noise = serializedObj.FindProperty("Settings.noise");
            ditheringTex = serializedObj.FindProperty("Settings.ditheringTex");

            //Height Fog
            fog = serializedObj.FindProperty("Settings.fog");
            globalFogHeight = serializedObj.FindProperty("Settings.globalFogHeight");
            fogDensity = serializedObj.FindProperty("Settings.fogDensity");
            fogHeightFalloff = serializedObj.FindProperty("Settings.fogHeightFalloff");
            fogHeight = serializedObj.FindProperty("Settings.fogHeight");
            fogDensity2 = serializedObj.FindProperty("Settings.fogDensity2");
            fogHeightFalloff2 = serializedObj.FindProperty("Settings.fogHeightFalloff2");
            fogHeight2 = serializedObj.FindProperty("Settings.fogHeight2");
            fogMaxOpacity = serializedObj.FindProperty("Settings.fogMaxOpacity");
            startDistance = serializedObj.FindProperty("Settings.startDistance");
            fogColorBlend = serializedObj.FindProperty("Settings.fogColorBlend");
            ambientColorGradient = serializedObj.FindProperty("Settings.ambientColorGradient");
            fogColorMod = serializedObj.FindProperty("Settings.fogColorMod");

            //HDRP
  #if ENVIRO_HDRP
            controlHDRPFog = serializedObj.FindProperty("Settings.controlHDRPFog");
            fogAttenuationDistance = serializedObj.FindProperty("Settings.fogAttenuationDistance");
            baseHeight = serializedObj.FindProperty("Settings.baseHeight");
            maxHeight = serializedObj.FindProperty("Settings.maxHeight");
            fogColorTint= serializedObj.FindProperty("Settings.fogColorTint");

            controlHDRPVolumetrics= serializedObj.FindProperty("Settings.controlHDRPVolumetrics");
            volumetricsColorTint = serializedObj.FindProperty("Settings.volumetricsColorTint");
            ambientDimmer = serializedObj.FindProperty("Settings.ambientDimmer");
            directLightMultiplier = serializedObj.FindProperty("Settings.directLightMultiplier");
            directLightShadowdimmer = serializedObj.FindProperty("Settings.directLightShadowdimmer");
  #endif

        unityFog = serializedObj.FindProperty("Settings.unityFog");
        unityFogDensity = serializedObj.FindProperty("Settings.unityFogDensity");
        unityFogColor = serializedObj.FindProperty("Settings.unityFogColor");
        unityFogMode = serializedObj.FindProperty("Settings.unityFogMode");
        unityFogStartDistance = serializedObj.FindProperty("Settings.unityFogStartDistance");
        unityFogEndDistance = serializedObj.FindProperty("Settings.unityFogEndDistance");
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Fog", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Fog); //Add Remove
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Enviro Fog
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showFogControls = GUILayout.Toggle(myTarget.showFogControls, "Fog Controls", headerFoldout);               
                if(myTarget.showFogControls)
                { 
                    GUILayout.Space(5);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(fog);
                    DisableInputEndQuality();
                    GUILayout.Space(5);
                    if(myTarget.Settings.fog)
                    {
                    EditorGUILayout.LabelField("Global",headerStyle);
                    EditorGUILayout.PropertyField( globalFogHeight); 
                    GUILayout.Space(5);
                    DisableInputStart();
                    EditorGUILayout.LabelField("Fog Layer 1",headerStyle);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(fogDensity);
                    EditorGUILayout.PropertyField(fogHeightFalloff);
                    EditorGUILayout.PropertyField(fogHeight);
                    GUILayout.Space(10);

                    EditorGUILayout.LabelField("Fog Layer 2",headerStyle);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(fogDensity2);
                    EditorGUILayout.PropertyField(fogHeightFalloff2);
                    EditorGUILayout.PropertyField(fogHeight2);
                    GUILayout.Space(10);
                    DisableInputEnd();

                    EditorGUILayout.LabelField("Opacity and Distance",headerStyle);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(fogMaxOpacity);
                    EditorGUILayout.PropertyField(startDistance);
                    GUILayout.Space(10); 
                    DisableInputStart();
                    EditorGUILayout.LabelField("Color",headerStyle);
                    GUILayout.Space(5);   
                    EditorGUILayout.PropertyField(fogColorBlend);
                    EditorGUILayout.PropertyField(fogColorMod);        
                    DisableInputEnd();         
                    EditorGUILayout.PropertyField(ambientColorGradient);                        
                    GUILayout.Space(10); 
                    }                 
                }
                GUILayout.EndVertical();

                //HDRP Fog
            #if ENVIRO_HDRP
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showHDRPFogControls = GUILayout.Toggle(myTarget.showHDRPFogControls, "HDRP Fog Controls", headerFoldout);               
                if(myTarget.showHDRPFogControls)
                { 
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(controlHDRPFog);
                    GUILayout.Space(5);
                    if(myTarget.Settings.controlHDRPFog)
                    {
                    EditorGUILayout.LabelField("Density",headerStyle);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(fogAttenuationDistance); 
                    EditorGUILayout.PropertyField(baseHeight); 
                    EditorGUILayout.PropertyField(maxHeight);
                    DisableInputEnd();
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Color",headerStyle);
                    EditorGUILayout.PropertyField(fogColorTint);         
                    }                 
                }
                GUILayout.EndVertical();
            #else 
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showUnityFogControls = GUILayout.Toggle(myTarget.showUnityFogControls, "Unity Fog Controls", headerFoldout);               
                if(myTarget.showUnityFogControls)
                {  
                    GUILayout.Space(5);
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(unityFog);
                    DisableInputEndQuality();

                    GUILayout.Space(5);
                    if(myTarget.Settings.unityFog)
                    {  
                        EditorGUILayout.LabelField("Density",headerStyle);
                       
                        EditorGUILayout.PropertyField(unityFogMode);
                         
                        DisableInputStart();
                        if(myTarget.Settings.unityFogMode == FogMode.Linear)
                        {
                        EditorGUILayout.PropertyField(unityFogStartDistance); 
                        EditorGUILayout.PropertyField(unityFogEndDistance); 
                        }
                        else
                        {
                        EditorGUILayout.PropertyField(unityFogDensity); 
                        }
                        DisableInputEnd();
                        GUILayout.Space(5);
                        EditorGUILayout.LabelField("Color",headerStyle);
                        EditorGUILayout.PropertyField(unityFogColor);         
                    }                 
                }
                GUILayout.EndVertical();

            #endif

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showVolumetricsControls = GUILayout.Toggle(myTarget.showVolumetricsControls, "Volumetrics Controls", headerFoldout);               
                if(myTarget.showVolumetricsControls)
                { 
                    GUILayout.Space(5);
        #if !ENVIRO_HDRP
                    DisableInputStartQuality();
                    EditorGUILayout.PropertyField(volumetrics);
                    DisableInputEndQuality();
                    GUILayout.Space(5);
                    if(myTarget.Settings.volumetrics && myTarget.Settings.fog)
                    {
                        DisableInputStartQuality();
                        EditorGUILayout.PropertyField(quality);
                        EditorGUILayout.PropertyField(steps);
                        DisableInputEndQuality();
                        DisableInputStart();
                        EditorGUILayout.PropertyField(scattering);
                         DisableInputEnd();
                        EditorGUILayout.PropertyField(scatteringMultiplier);
                         DisableInputStart();             
                        EditorGUILayout.PropertyField(extinction);
                    
                        EditorGUILayout.PropertyField(anistropy);
                        DisableInputEnd();
                        EditorGUILayout.PropertyField(maxRange);
                        EditorGUILayout.PropertyField(maxRangePointSpot);     
                        //EditorGUILayout.PropertyField(noiseIntensity);
                        //EditorGUILayout.PropertyField(noiseScale);
                        //EditorGUILayout.PropertyField(windDirection);
                        //EditorGUILayout.PropertyField(noise);
                        EditorGUILayout.PropertyField(ditheringTex);            
                    } 

        #else       
                    EditorGUILayout.PropertyField(controlHDRPVolumetrics);
                    GUILayout.Space(5);
                    if(myTarget.Settings.controlHDRPVolumetrics && myTarget.Settings.controlHDRPFog)
                    {
                        EditorGUILayout.LabelField("Global",headerStyle);
                        EditorGUILayout.PropertyField(volumetricsColorTint);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(ambientDimmer);
                        DisableInputEnd();
                        GUILayout.Space(5);
                        EditorGUILayout.LabelField("Directional Lights",headerStyle);
                        DisableInputStart();
                        EditorGUILayout.PropertyField(directLightMultiplier);
                        EditorGUILayout.PropertyField(directLightShadowdimmer);
                        DisableInputEnd();
                    }
        #endif 
                }
                GUILayout.EndVertical();

                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroFogModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPRenderer.cs---------------


#if ENVIRO_HDRP
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.HighDefinition;
using System;
using System.Collections.Generic;

namespace Enviro
{
    [Serializable, VolumeComponentMenu("Post-processing/Enviro/Effects Renderer")]
    public class EnviroHDRPRenderer : CustomPostProcessVolumeComponent, IPostProcessComponent
    {
        public bool IsActive() => EnviroManager.instance != null;
        public override CustomPostProcessInjectionPoint injectionPoint => (CustomPostProcessInjectionPoint)0;
        private Material blitTrough;
        private List<EnviroVolumetricCloudRenderer> volumetricCloudsRender = new List<EnviroVolumetricCloudRenderer>();
        private Vector3 floatingPointOriginMod = Vector3.zero;

        public override void Setup()
        {
            if (blitTrough == null)
                blitTrough = new Material(Shader.Find("Hidden/Enviro/BlitTroughHDRP"));
        }

        public override void Cleanup()
        {
            if (blitTrough != null)
                CoreUtils.Destroy(blitTrough);
        }

        public override void Render(CommandBuffer cmd, HDCamera camera, RTHandle source, RTHandle destination)
        {  
            //Do nothing
            if (!EnviroHelper.CanRenderOnCamera(camera.camera) || camera.camera.cameraType == CameraType.Preview)
            {
                blitTrough.SetTexture("_InputTexture", source);
                CoreUtils.DrawFullScreen(cmd, blitTrough);
                return;
            }     

            if(EnviroHelper.ResetMatrix(camera.camera))
                camera.camera.ResetProjectionMatrix();

            EnviroQuality myQuality = EnviroHelper.GetQualityForCamera(camera.camera);

            //Set what to render on this camera.
            bool renderVolumetricClouds = false;
            bool renderFog = false;

            if(EnviroManager.instance.Quality != null)
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = myQuality.volumetricCloudsOverride.volumetricClouds;  

                if(EnviroManager.instance.Fog != null)
                    renderFog = myQuality.fogOverride.fog;  
            }
            else
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = EnviroManager.instance.VolumetricClouds.settingsQuality.volumetricClouds;

                if(EnviroManager.instance.Fog != null)
                    renderFog = EnviroManager.instance.Fog.Settings.fog;
            }

            if (EnviroManager.instance.Objects.worldAnchor != null) 
                floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                floatingPointOriginMod = Vector3.zero; 

            if (renderVolumetricClouds)
            {
                //Create us a volumetric clouds renderer if null.
                if(GetCloudsRenderer(camera.camera) == null)
                {
                   CreateCloudsRenderer(camera.camera);
                }
            }
            //Set some global matrixes used for all the enviro effects.
            SetMatrix(camera.camera);
 
            //Clouds
            if(EnviroManager.instance.Fog != null && EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && renderFog)
            { 
                RenderTexture temp1 = RenderTexture.GetTemporary(source.rt.descriptor);
                RTHandle temp1Handle = RTHandles.Alloc(temp1);
 
                if(camera.camera.transform.position.y - floatingPointOriginMod.y < EnviroManager.instance.VolumetricClouds.settingsLayer1.bottomCloudsHeight)
                {
                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(camera.camera);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsHDRP(camera.camera,cmd, source, temp1Handle, renderer, myQuality);

                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && camera.camera.cameraType != CameraType.Reflection)
                    {
                        RenderTexture temp2 = RenderTexture.GetTemporary(source.rt.descriptor);
                        RTHandle temp2Handle = RTHandles.Alloc(temp2);
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsHDRP(camera.camera,cmd,temp1Handle,temp2Handle,renderer);
                        EnviroManager.instance.Fog.RenderHeightFogHDRP(camera.camera,cmd,temp2Handle,destination);                
                        RenderTexture.ReleaseTemporary(temp2);     
                    }
                    else
                    {
                        EnviroManager.instance.Fog.RenderHeightFogHDRP(camera.camera,cmd,temp1Handle,destination);
                    }
                } 
                else
                { 

                    EnviroManager.instance.Fog.RenderHeightFogHDRP(camera.camera,cmd,source,temp1Handle);
                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(camera.camera);

                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && camera.camera.cameraType != CameraType.Reflection)
                    {
                        RenderTexture temp2 = RenderTexture.GetTemporary(source.rt.descriptor);
                        RTHandle temp2Handle = RTHandles.Alloc(temp2);
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsHDRP(camera.camera,cmd, temp1Handle, temp2Handle, renderer, myQuality);     
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsHDRP(camera.camera,cmd,temp2Handle,destination,renderer);
                        RenderTexture.ReleaseTemporary(temp2);     
                    }
                    else
                    {
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsHDRP(camera.camera,cmd, temp1Handle, destination, renderer, myQuality);
                    }
                    
                } 
          
                RenderTexture.ReleaseTemporary(temp1);
                //temp1Handle.Release();
            }
            else if(EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && !renderFog)
            {
                EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(camera.camera);
                  
                if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && camera.camera.cameraType != CameraType.Reflection)
                {
                    RenderTexture temp1 = RenderTexture.GetTemporary(source.rt.descriptor);
                    RTHandle temp1Handle = RTHandles.Alloc(temp1);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsHDRP(camera.camera,cmd, source, temp1Handle, renderer, myQuality);
                    EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsHDRP(camera.camera,cmd,temp1Handle,destination,renderer);
                    RenderTexture.ReleaseTemporary(temp1);
                    //temp1Handle.Release();
                }
                else
                {
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsHDRP(camera.camera,cmd, source, destination, renderer, myQuality);
                }
                
            } 
            else if (Enviro.EnviroManager.instance.Fog != null && renderFog)
            {
                EnviroManager.instance.Fog.RenderHeightFogHDRP(camera.camera,cmd,source,destination);
            }
            else
            {
                blitTrough.SetTexture("_InputTexture", source);
                CoreUtils.DrawFullScreen(cmd, blitTrough);
            }

            if(!renderVolumetricClouds)
            Shader.SetGlobalTexture("_EnviroClouds", Texture2D.blackTexture);
 
        }

        private EnviroVolumetricCloudRenderer CreateCloudsRenderer(Camera cam)
        {
            EnviroVolumetricCloudRenderer r = new EnviroVolumetricCloudRenderer();
            r.camera = cam;
            volumetricCloudsRender.Add(r);
            return r;
        }

        private EnviroVolumetricCloudRenderer GetCloudsRenderer(Camera cam)
        {
            for (int i = 0; i < volumetricCloudsRender.Count; i++)
            {
                if(volumetricCloudsRender[i].camera == cam)
                   return volumetricCloudsRender[i];
            }
            return CreateCloudsRenderer(cam); 
        }

        private void SetMatrix(Camera myCam)
        {
        #if ENABLE_VR && ENABLE_XR_MODULE
            if (UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced) 
            {
                // Both stereo eye inverse view matrices
                Matrix4x4 left_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse;
                Matrix4x4 right_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse;

                // Both stereo eye inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 left_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left);
                Matrix4x4 right_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right);
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(left_screen_from_view, true).inverse;
                Matrix4x4 right_view_from_screen = GL.GetGPUProjectionMatrix(right_screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                {
                    left_view_from_screen[1, 1] *= -1;
                    right_view_from_screen[1, 1] *= -1;
                }

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_RightWorldFromView", right_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
                Shader.SetGlobalMatrix("_RightViewFromScreen", right_view_from_screen);
            }
            else
            {
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            } 
            #else
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            #endif
        } 
    }
} 
#endif

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPRenderer.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSky.cs---------------


#if ENVIRO_HDRP 
using System;
using UnityEngine.Rendering.HighDefinition;

namespace UnityEngine.Rendering.HighDefinition
{
    [VolumeComponentMenu("Sky/Enviro 3 Skybox")]
    [SkyUniqueID(990)]  
    public class EnviroHDRPSky : SkySettings
    {
        public override int GetHashCode()
        {
            int hash = base.GetHashCode();

            unchecked
            {
                
            }

            return hash;
        }

        public override int GetHashCode(Camera camera)
        {
            // Implement if your sky depends on the camera settings (like position for instance)
            return GetHashCode();
        }
 
        public override Type GetSkyRendererType() { return typeof(EnviroHDRPSkyRenderer); }
    }
}
#endif


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSky.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSkyRenderer.cs---------------


#if ENVIRO_HDRP
using System.Collections;
using UnityEngine.Rendering;

namespace UnityEngine.Rendering.HighDefinition  
{
    class EnviroHDRPSkyRenderer : SkyRenderer
    {
        Material skyMat; 
        MaterialPropertyBlock m_PropertyBlock = new MaterialPropertyBlock();

        public EnviroHDRPSkyRenderer()
        {
 
        }

 
        public override void Build()
        {
            if(skyMat == null)
               skyMat = CoreUtils.CreateEngineMaterial(Shader.Find("Enviro/HDRP/Sky"));
        }
 
        public override void Cleanup()
        {
            CoreUtils.Destroy(skyMat);
        }
 
        protected override bool Update(BuiltinSkyParameters builtinParams)
        {
            return false;
        }

        public override void RenderSky(BuiltinSkyParameters builtinParams, bool renderForCubemap, bool renderSunDisk)
        {
            if (Enviro.EnviroManager.instance == null || Enviro.EnviroManager.instance.Sky == null)
                return;

            if (skyMat == null)
                Build();

            Enviro.EnviroManager.instance.Sky.UpdateSkybox(skyMat);

            if(Enviro.EnviroManager.instance.Sky != null && Enviro.EnviroManager.instance.Lighting != null)
            {
                Shader.SetGlobalColor("_AmbientColorTintHDRP", Enviro.EnviroManager.instance.Lighting.Settings.ambientColorTintHDRP.Evaluate(Enviro.EnviroManager.instance.solarTime));
            }
 
            var enviroSky = builtinParams.skySettings as EnviroHDRPSky;
       
            m_PropertyBlock.SetMatrix("_PixelCoordToViewDirWS", builtinParams.pixelCoordToViewDirMatrix);
            Shader.SetGlobalMatrix("_PixelCoordToViewDirWS", builtinParams.pixelCoordToViewDirMatrix);
            
            Shader.SetGlobalFloat("_EnviroSkyIntensity", GetSkyIntensity(enviroSky, builtinParams.debugSettings)); 
   
            if(Enviro.EnviroManager.instance.Objects.directionalLight != null)
                Enviro.EnviroManager.instance.Objects.directionalLight.transform.position = Vector3.zero;

            if(Enviro.EnviroManager.instance.Objects.additionalDirectionalLight != null)
                Enviro.EnviroManager.instance.Objects.additionalDirectionalLight.transform.position = Vector3.zero;

            if(builtinParams.hdCamera.camera.cameraType == CameraType.Reflection && renderForCubemap)
            {
             //   return;
            }
     
               CoreUtils.DrawFullScreen(builtinParams.commandBuffer, skyMat, m_PropertyBlock, renderForCubemap ? 0 : 1);
            }
        }
    }
#endif


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSkyRenderer.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSkySettingsEditor.cs---------------


#if ENVIRO_HDRP
using UnityEditor.Rendering;
using UnityEngine.Rendering.HighDefinition;

namespace UnityEditor.Rendering.HighDefinition
{
    [CanEditMultipleObjects]
    [VolumeComponentEditor(typeof(EnviroHDRPSky))]
    class EnviroSkyLiteSettingsEditor : SkySettingsEditor
    {

        public override void OnEnable()
        {
            base.OnEnable();

            m_CommonUIElementsMask = (uint)SkySettingsUIElement.UpdateMode | (uint)SkySettingsUIElement.SkyIntensity;

            var o = new PropertyFetcher<EnviroHDRPSky>(serializedObject);
        }

        public override void OnInspectorGUI()
        {
            base.CommonSkySettingsGUI();
        }
    }
}
#endif



#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHDRPSkySettingsEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHelper.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Enviro
{
    public static class EnviroHelper
    { 
        public static string assetPath = "Assets/Enviro 3 - Sky and Weather";
        public static Vector3 PingPong (Vector3 value)
        {
            Vector3 result = value;
    
            if (result.x > 1f)
                result.x = -1f;
            else if (result.x < -1f)
                result.x = 1f;

            if (result.y > 1f)
                result.y = -1f;
            else if (result.y < -1f)
                result.y = 1f;

            if (result.z > 1f)
                result.z = -1f;
            else if (result.z < -1f)
                result.z = 1f;

            return result;
        }

        public static Vector2 PingPong (Vector2 value)
        {
            Vector2 result = value;
    
            if (result.x > 1f)
                result.x = -1f;
            else if (result.x < -1f)
                result.x = 1f;

            if (result.y > 1f)
                result.y = -1f;
            else if (result.y < -1f)
                result.y = 1f;
                
            return result;
        }

        public static float Remap(float value, float from1, float to1, float from2, float to2)
        {
            return (value - from1) / (to1 - from1) * (to2 - from2) + from2;
        }

        // Checks if Enviro Effects should render on this camera for URP/HDRP
        public static bool CanRenderOnCamera (Camera cam)
        {
            if(EnviroManager.instance != null)
            { 
                //if (cam.hideFlags != HideFlags.None) return true;

                if(cam.cameraType == CameraType.SceneView || cam.cameraType == CameraType.Reflection)
                   return true;

                if(cam == EnviroManager.instance.Camera)
                   return true;

                if(EnviroManager.instance.Objects.globalReflectionProbe != null && cam == EnviroManager.instance.Objects.globalReflectionProbe.renderCam)
                   return true;

                for (int i = 0; i < EnviroManager.instance.Cameras.Count; i++)
                {
                    if(cam == EnviroManager.instance.Cameras[i].camera)
                       return true;
                }

                return false;
            }
            else
            {
                return false;
            }
        }

        ///Get the Light component from Enviro Directional light if lighting module is activated or any other active directional light
        public static Light GetDirectionalLight ()
        {
            Light result = null;

            if(EnviroManager.instance.Lighting != null)
            {
                if(EnviroManager.instance.Lighting.Settings.lightingMode == EnviroLighting.LightingMode.Single)
                {
                    if(EnviroManager.instance.Objects.directionalLight != null)
                       result = EnviroManager.instance.Objects.directionalLight;
                }
                else
                {
                    if(!EnviroManager.instance.isNight)
                    {
                        if(EnviroManager.instance.Objects.directionalLight != null)
                           result = EnviroManager.instance.Objects.directionalLight;
                    }
                    else
                    {
                        if(EnviroManager.instance.Objects.additionalDirectionalLight != null)
                           result = EnviroManager.instance.Objects.additionalDirectionalLight;
                    }
                }
            }
            else
            {
                //Find other Directional Lights in scene
                Light[] results = GameObject.FindObjectsOfType<Light>();
                for(int i = 0; i < results.Length; i++)
                {
                    if(results[i].type == LightType.Directional && results[i].gameObject.activeSelf && results[i].enabled)
                        {
                            result = results[i];
                            break;
                        }
                }
            }
            return result;
        }


        public static void CreateBuffer(ref ComputeBuffer buffer, int count, int stride)
        {
            if (buffer != null && buffer.count == count)
                return;

            if(buffer != null)
            {
                buffer.Release();
                buffer = null;
            }

            if (count <= 0)
                return;

            buffer = new ComputeBuffer(count, stride);
        }
        public static void ReleaseComputeBuffer(ref ComputeBuffer buffer)
        {
            if(buffer != null)
                buffer.Release();
                
            buffer = null;
        }


        public static Vector4 GetProjectionExtents(Camera camera)
        {
            return GetProjectionExtents(camera, 0.0f, 0.0f);
        }

        public static Vector4 GetProjectionExtents(Camera camera, float texelOffsetX, float texelOffsetY)
        {
            if (camera == null)
                return Vector4.zero;

            float oneExtentY = camera.orthographic ? camera.orthographicSize : Mathf.Tan(0.5f * Mathf.Deg2Rad * camera.fieldOfView);
            float oneExtentX = oneExtentY * camera.aspect;
            float texelSizeX = oneExtentX / (0.5f * camera.pixelWidth);
            float texelSizeY = oneExtentY / (0.5f * camera.pixelHeight);
            float oneJitterX = texelSizeX * texelOffsetX;
            float oneJitterY = texelSizeY * texelOffsetY;

            return new Vector4(oneExtentX, oneExtentY, oneJitterX, oneJitterY);
        }

        public static Vector4 GetProjectionExtents(Camera camera, Camera.StereoscopicEye eye)
        {
            return GetProjectionExtents(camera, eye, 0.0f, 0.0f);
        }

        public static Vector4 GetProjectionExtents(Camera camera, Camera.StereoscopicEye eye, float texelOffsetX, float texelOffsetY)
        {
            Matrix4x4 inv;

            if(camera.stereoEnabled)
                inv = Matrix4x4.Inverse(camera.GetStereoProjectionMatrix(eye));
            else
                inv = Matrix4x4.Inverse(camera.projectionMatrix);
                
            Vector3 ray00 = inv.MultiplyPoint3x4(new Vector3(-1.0f, -1.0f, 0.95f));
            Vector3 ray11 = inv.MultiplyPoint3x4(new Vector3(1.0f, 1.0f, 0.95f));

            ray00 /= -ray00.z;
            ray11 /= -ray11.z; 

            float oneExtentX = 0.5f * (ray11.x - ray00.x);
            float oneExtentY = 0.5f * (ray11.y - ray00.y);
            float texelSizeX = oneExtentX / (0.5f * camera.pixelWidth);
            float texelSizeY = oneExtentY / (0.5f * camera.pixelHeight);
            float oneJitterX = 0.5f * (ray11.x + ray00.x) + texelSizeX * texelOffsetX;
            float oneJitterY = 0.5f * (ray11.y + ray00.y) + texelSizeY * texelOffsetY;

            return new Vector4(oneExtentX, oneExtentY, oneJitterX, oneJitterY);
        }

        public static EnviroQuality GetQualityForCamera(Camera cam)
        {
            if(EnviroManager.instance.Quality != null)
            {
                EnviroQuality myQuality = EnviroManager.instance.Quality.Settings.defaultQuality;

                for(int i = 0; i < EnviroManager.instance.Cameras.Count; i++)
                {
                    if(EnviroManager.instance.Cameras[i].camera != null && EnviroManager.instance.Cameras[i].camera == cam && EnviroManager.instance.Cameras[i].quality != null)
                    {
                        myQuality = EnviroManager.instance.Cameras[i].quality;
                        break;
                    }
                }

                return myQuality;
            }
            else
            {
                return null;
            }
        }


        public static bool ResetMatrix(Camera cam)
        {
                for(int i = 0; i < EnviroManager.instance.Cameras.Count; i++)
                {
                    if(EnviroManager.instance.Cameras[i].camera != null && EnviroManager.instance.Cameras[i].camera == cam)
                    {
                        return EnviroManager.instance.Cameras[i].resetMatrix;
                    }
                }

            return false;
        }

        //Find the default profile.
        public static EnviroModule GetDefaultPreset(string name)
        {
    #if UNITY_EDITOR
            string[] assets = UnityEditor.AssetDatabase.FindAssets(name, null);

            for (int idx = 0; idx < assets.Length; idx++)
            {
                string path = UnityEditor.AssetDatabase.GUIDToAssetPath(assets[idx]);

                if (path.Contains(".asset"))
                {
                    return UnityEditor.AssetDatabase.LoadAssetAtPath<EnviroModule>(path);
                }
            }
    #endif
            return null;
        }

#if ENVIRO_HDRP
        public static UnityEngine.Rendering.VolumeProfile GetDefaultSkyAndFogProfile(string name)
        {
#if UNITY_EDITOR
            string[] assets = UnityEditor.AssetDatabase.FindAssets(name, null);

            for (int idx = 0; idx < assets.Length; idx++)
            {
                string path = UnityEditor.AssetDatabase.GUIDToAssetPath(assets[idx]);

                if (path.Contains(name + ".asset")) 
                {
                    return UnityEditor.AssetDatabase.LoadAssetAtPath<UnityEngine.Rendering.VolumeProfile>(path);
                }
            }
#endif
            return null;
        }
#endif
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroHelper.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightingModule.cs---------------


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroLighting
    {
        // DirectLighting
        public enum LightingMode
        {
            Single,
            Dual
        };

        public LightingMode lightingMode;
        public bool setDirectLighting = true;
        public int updateIntervallFrames = 2;
        public AnimationCurve sunIntensityCurve;
        public AnimationCurve moonIntensityCurve;
        public Gradient sunColorGradient;
        public Gradient moonColorGradient;

        public AnimationCurve sunIntensityCurveHDRP = new AnimationCurve();
        public AnimationCurve moonIntensityCurveHDRP  = new AnimationCurve();
        public AnimationCurve lightColorTemperatureHDRP = new AnimationCurve();
        [GradientUsageAttribute(true)]
        public Gradient lightColorTintHDRP;
        [GradientUsageAttribute(true)]
        public Gradient ambientColorTintHDRP;
        public bool controlExposure = true;
        public AnimationCurve sceneExposure = new AnimationCurve();
        public bool controlIndirectLighting = true;
        public AnimationCurve diffuseIndirectIntensity = new AnimationCurve();
        public AnimationCurve reflectionIndirectIntensity = new AnimationCurve();

        [Range(0f,2f)]
        public float directLightIntensityModifier = 1f;

        //Ambient Lighting
        public bool setAmbientLighting = true;
        public UnityEngine.Rendering.AmbientMode ambientMode;
        [GradientUsage(true)]
        public Gradient ambientSkyColorGradient;
        [GradientUsage(true)]
        public Gradient ambientEquatorColorGradient;
        [GradientUsage(true)]
        public Gradient ambientGroundColorGradient;
        public AnimationCurve ambientIntensityCurve;

        [Range(0f,2f)]
        public float ambientIntensityModifier = 1f;

        [Range(0f,2f)]
        public float ambientSkyboxUpdateIntervall = 0.1f;
              
        [Range(0f,1f)]
        public float shadowIntensity = 1f;
    } 

    [Serializable]
    [ExecuteInEditMode]
    public class EnviroLightingModule : EnviroModule
    {
        public Enviro.EnviroLighting Settings;
        public EnviroLightingModule preset;

        private int currentFrame;
        private float lastAmbientSkyboxUpdate;

        //Inspector
        public bool showDirectLightingControls;
        public bool showAmbientLightingControls;
        public bool showReflectionControls;

        #if ENVIRO_HDRP
        public UnityEngine.Rendering.HighDefinition.HDAdditionalLightData directionalLightHDRP;
        public UnityEngine.Rendering.HighDefinition.HDAdditionalLightData additionalLightHDRP;
        public UnityEngine.Rendering.HighDefinition.Exposure exposureHDRP;
        public UnityEngine.Rendering.HighDefinition.IndirectLightingController indirectLightingHDRP;
        #endif

        public override void Enable ()
        {
            if(EnviroManager.instance == null)
               return;

            Setup();
        }

        public override void Disable ()
        {
            if(EnviroManager.instance == null)
               return;

            Cleanup();
        }

        //Applies changes when you switch the lighting mode.
        public void ApplyLightingChanges ()
        {
            Cleanup();
            Setup();
        }

        private void Setup()
        {
            if(EnviroManager.instance.Objects.directionalLight == null)
            {
                GameObject newLight = new GameObject();

                if(Settings.lightingMode == EnviroLighting.LightingMode.Single)
                    newLight.name = "Sun and Moon Directional Light";
                else
                    newLight.name = "Sun Directional Light";

                newLight.transform.SetParent(EnviroManager.instance.transform);
                newLight.transform.localPosition = Vector3.zero;
                EnviroManager.instance.Objects.directionalLight = newLight.AddComponent<Light>();
                EnviroManager.instance.Objects.directionalLight.type = LightType.Directional;
                EnviroManager.instance.Objects.directionalLight.shadows = LightShadows.Soft;
            }

            if(EnviroManager.instance.Objects.additionalDirectionalLight == null && Settings.lightingMode == EnviroLighting.LightingMode.Dual)
            {
                GameObject newLight = new GameObject();
                newLight.name = "Moon Directional Light";
                newLight.transform.SetParent(EnviroManager.instance.transform);
                newLight.transform.localPosition = Vector3.zero;
                EnviroManager.instance.Objects.additionalDirectionalLight = newLight.AddComponent<Light>();
                EnviroManager.instance.Objects.additionalDirectionalLight.type = LightType.Directional;
                EnviroManager.instance.Objects.additionalDirectionalLight.shadows = LightShadows.Soft;
            }
            else if (EnviroManager.instance.Objects.additionalDirectionalLight != null && Settings.lightingMode == EnviroLighting.LightingMode.Single)
            {
                DestroyImmediate(EnviroManager.instance.Objects.additionalDirectionalLight.gameObject);
            }
        }

        private void Cleanup()
        {
            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Objects.directionalLight != null)
               DestroyImmediate(EnviroManager.instance.Objects.directionalLight.gameObject);

            if(EnviroManager.instance.Objects.additionalDirectionalLight != null)
               DestroyImmediate(EnviroManager.instance.Objects.additionalDirectionalLight.gameObject);
        }

        // Update Method
        public override void UpdateModule ()
        {
            if(!active)
               return; 

             if(EnviroManager.instance == null)
               return;

            currentFrame++;

            if(currentFrame >= Settings.updateIntervallFrames)
            {
                EnviroManager.instance.updateSkyAndLighting = true;
                currentFrame = 0;
            }
            else
            {
                EnviroManager.instance.updateSkyAndLighting = false;
            }



            //Update Direct Lighting
            if(EnviroManager.instance.Objects.directionalLight != null && Settings.setDirectLighting)
            {
                #if !ENVIRO_HDRP
                if(EnviroManager.instance.updateSkyAndLighting)
                   UpdateDirectLighting ();
                #else
                if(EnviroManager.instance.updateSkyAndLighting)
                    UpdateDirectLightingHDRP(); 
                #endif
            }
 
            if (Settings.setAmbientLighting)
            {
                #if !ENVIRO_HDRP
                UpdateAmbientLighting ();
                #else
                if(EnviroManager.instance.updateSkyAndLighting)
                   UpdateAmbientLightingHDRP ();
                #endif
            }

            #if ENVIRO_HDRP
            if(EnviroManager.instance.updateSkyAndLighting)
                UpdateExposureHDRP ();
            #endif

     
        }

        public void UpdateDirectLighting ()
        {
            if(Settings.lightingMode == EnviroLighting.LightingMode.Single)
            {
                if(!EnviroManager.instance.isNight)
                {
                    //Set light to sun
                    EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.sun.transform.rotation;
                    EnviroManager.instance.Objects.directionalLight.intensity = Settings.sunIntensityCurve.Evaluate(EnviroManager.instance.solarTime) * Settings.directLightIntensityModifier;
                    EnviroManager.instance.Objects.directionalLight.color = Settings.sunColorGradient.Evaluate(EnviroManager.instance.solarTime);
                }
                else
                {
                    //Set light to moon
                    EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.moon.transform.rotation;
                    EnviroManager.instance.Objects.directionalLight.intensity = Settings.moonIntensityCurve.Evaluate(EnviroManager.instance.lunarTime) * Settings.directLightIntensityModifier;
                    EnviroManager.instance.Objects.directionalLight.color = Settings.moonColorGradient.Evaluate(EnviroManager.instance.lunarTime);
                }
                
                    EnviroManager.instance.Objects.directionalLight.shadowStrength = Settings.shadowIntensity;    
            }
            else
            {
                //Sun
                EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.sun.transform.rotation;
                EnviroManager.instance.Objects.directionalLight.intensity = Settings.sunIntensityCurve.Evaluate(EnviroManager.instance.solarTime) * Settings.directLightIntensityModifier;
                EnviroManager.instance.Objects.directionalLight.color = Settings.sunColorGradient.Evaluate(EnviroManager.instance.solarTime);
                EnviroManager.instance.Objects.directionalLight.shadowStrength = Settings.shadowIntensity;    
                //Moon
                EnviroManager.instance.Objects.additionalDirectionalLight.transform.rotation = EnviroManager.instance.Objects.moon.transform.rotation;
                EnviroManager.instance.Objects.additionalDirectionalLight.intensity = Settings.moonIntensityCurve.Evaluate(EnviroManager.instance.lunarTime) * Settings.directLightIntensityModifier;
                EnviroManager.instance.Objects.additionalDirectionalLight.color = Settings.moonColorGradient.Evaluate(EnviroManager.instance.lunarTime);
                EnviroManager.instance.Objects.additionalDirectionalLight.shadowStrength = Settings.shadowIntensity;               
            }

           
        }

#if ENVIRO_HDRP
        public void UpdateDirectLightingHDRP ()
        {
            if(directionalLightHDRP == null && EnviroManager.instance.Objects.directionalLight != null)
               directionalLightHDRP = EnviroManager.instance.Objects.directionalLight.gameObject.GetComponent<UnityEngine.Rendering.HighDefinition.HDAdditionalLightData>();

            if(additionalLightHDRP == null && EnviroManager.instance.Objects.additionalDirectionalLight != null)
               additionalLightHDRP = EnviroManager.instance.Objects.additionalDirectionalLight.gameObject.GetComponent<UnityEngine.Rendering.HighDefinition.HDAdditionalLightData>();

            if(Settings.lightingMode == EnviroLighting.LightingMode.Single)
            {
                if(!EnviroManager.instance.isNight)
                {
                    //Set light to sun
                    EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.sun.transform.rotation;
                    EnviroManager.instance.Objects.directionalLight.color = Settings.lightColorTintHDRP.Evaluate(EnviroManager.instance.solarTime);
                    EnviroManager.instance.Objects.directionalLight.useColorTemperature = true;
                    EnviroManager.instance.Objects.directionalLight.colorTemperature = Settings.lightColorTemperatureHDRP.Evaluate(EnviroManager.instance.solarTime);

                    if(directionalLightHDRP != null)
                       directionalLightHDRP.SetIntensity(Settings.sunIntensityCurveHDRP.Evaluate(EnviroManager.instance.solarTime) * Settings.directLightIntensityModifier);

                }
                else
                {
                    //Set light to moon
                    EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.moon.transform.rotation;
                    EnviroManager.instance.Objects.directionalLight.color = Settings.lightColorTintHDRP.Evaluate(EnviroManager.instance.solarTime);
                    EnviroManager.instance.Objects.directionalLight.useColorTemperature = true;
                    EnviroManager.instance.Objects.directionalLight.colorTemperature = Settings.lightColorTemperatureHDRP.Evaluate(EnviroManager.instance.solarTime);

                    if(directionalLightHDRP != null)
                       directionalLightHDRP.SetIntensity(Settings.moonIntensityCurveHDRP.Evaluate(EnviroManager.instance.lunarTime) * Settings.directLightIntensityModifier);
                }

                if(directionalLightHDRP != null)
                    directionalLightHDRP.shadowDimmer = Settings.shadowIntensity;
            }
            else
            {
                //Sun
                EnviroManager.instance.Objects.directionalLight.transform.rotation = EnviroManager.instance.Objects.sun.transform.rotation;
                EnviroManager.instance.Objects.directionalLight.color = Settings.lightColorTintHDRP.Evaluate(EnviroManager.instance.solarTime);
                EnviroManager.instance.Objects.directionalLight.useColorTemperature = true;
                EnviroManager.instance.Objects.directionalLight.colorTemperature = Settings.lightColorTemperatureHDRP.Evaluate(EnviroManager.instance.solarTime);

                if(directionalLightHDRP != null)
                {
                   directionalLightHDRP.SetIntensity(Settings.sunIntensityCurveHDRP.Evaluate(EnviroManager.instance.solarTime) * Settings.directLightIntensityModifier);
                   directionalLightHDRP.shadowDimmer = Settings.shadowIntensity;
                }
                //Moon
                if(EnviroManager.instance.Objects.additionalDirectionalLight != null)
                {
                    EnviroManager.instance.Objects.additionalDirectionalLight.transform.rotation = EnviroManager.instance.Objects.moon.transform.rotation;
                    EnviroManager.instance.Objects.additionalDirectionalLight.color = Settings.lightColorTintHDRP.Evaluate(EnviroManager.instance.solarTime);
                    EnviroManager.instance.Objects.additionalDirectionalLight.useColorTemperature = true;
                    EnviroManager.instance.Objects.additionalDirectionalLight.colorTemperature = Settings.lightColorTemperatureHDRP.Evaluate(EnviroManager.instance.solarTime);
                }

                if(additionalLightHDRP != null)
                {
                    additionalLightHDRP.SetIntensity(Settings.moonIntensityCurveHDRP.Evaluate(EnviroManager.instance.lunarTime) * Settings.directLightIntensityModifier);
                    additionalLightHDRP.shadowDimmer = Settings.shadowIntensity;
                }
            }
        }

        public void UpdateAmbientLightingHDRP ()
        {
            if(EnviroManager.instance.volumeHDRP != null && EnviroManager.instance.volumeProfileHDRP != null)
            {
                if(indirectLightingHDRP == null)
                {
                    UnityEngine.Rendering.HighDefinition.IndirectLightingController TempIndirectLight;

                    if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.IndirectLightingController>(out TempIndirectLight))
                    {
                        indirectLightingHDRP = TempIndirectLight;
                    }
                    else
                    {
                        EnviroManager.instance.volumeProfileHDRP.Add<UnityEngine.Rendering.HighDefinition.IndirectLightingController>();

                        if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.IndirectLightingController>(out TempIndirectLight))
                        {
                            indirectLightingHDRP = TempIndirectLight;
                        }
                    }
                } 
                else
                {
                    if(Settings.controlIndirectLighting)
                    {
                        indirectLightingHDRP.active = true;
                        indirectLightingHDRP.indirectDiffuseLightingMultiplier.overrideState = true;
                        indirectLightingHDRP.indirectDiffuseLightingMultiplier.value = Settings.diffuseIndirectIntensity.Evaluate(EnviroManager.instance.solarTime);
                        indirectLightingHDRP.reflectionLightingMultiplier.overrideState = true;
                        indirectLightingHDRP.reflectionLightingMultiplier.value = Settings.reflectionIndirectIntensity.Evaluate(EnviroManager.instance.solarTime);
                    }
                    else
                    {
                        indirectLightingHDRP.active = false;
                    }
                }


            }
        }

        public void UpdateExposureHDRP ()
        {
            if(EnviroManager.instance.volumeHDRP != null && EnviroManager.instance.volumeProfileHDRP != null)
            {
                if(exposureHDRP == null)
                {
                    UnityEngine.Rendering.HighDefinition.Exposure TempExposure;

                    if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.Exposure>(out TempExposure))
                    {
                        exposureHDRP = TempExposure;
                    }
                    else
                    {
                        EnviroManager.instance.volumeProfileHDRP.Add<UnityEngine.Rendering.HighDefinition.Exposure>();

                        if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.Exposure>(out TempExposure))
                        {
                            exposureHDRP = TempExposure;
                        }
                    }
                } 
                else
                {
                    if(Settings.controlExposure)
                    {
                        exposureHDRP.active = true;
                        exposureHDRP.mode.overrideState = true;
                        exposureHDRP.mode.value = UnityEngine.Rendering.HighDefinition.ExposureMode.Fixed;
                        exposureHDRP.fixedExposure.overrideState = true;
                        exposureHDRP.fixedExposure.value = Settings.sceneExposure.Evaluate(EnviroManager.instance.solarTime);
                    }
                    else
                    {
                        exposureHDRP.active = false;
                    }
                }
            } 
        }
#endif

        public void UpdateAmbientLighting (bool forced = false)
        {
            RenderSettings.ambientMode = Settings.ambientMode;

            float intensity = Settings.ambientIntensityCurve.Evaluate(EnviroManager.instance.solarTime) *  Settings.ambientIntensityModifier;

            RenderSettings.ambientIntensity = intensity;
             
            if(forced)
            {
                UpdateAmbient(Settings.ambientMode,intensity);
                
                if(EnviroManager.instance.Time != null)
                {
                    lastAmbientSkyboxUpdate = EnviroManager.instance.Time.Settings.timeOfDay + Settings.ambientSkyboxUpdateIntervall;
                }
            }
            else
            { 
                if(EnviroManager.instance.Time != null)
                {
                    if (lastAmbientSkyboxUpdate < EnviroManager.instance.Time.Settings.timeOfDay || lastAmbientSkyboxUpdate > EnviroManager.instance.Time.Settings.timeOfDay + (Settings.ambientSkyboxUpdateIntervall + 0.01f))
                    {
                        UpdateAmbient(Settings.ambientMode,intensity);
                        lastAmbientSkyboxUpdate = EnviroManager.instance.Time.Settings.timeOfDay + Settings.ambientSkyboxUpdateIntervall;
                    }
                }
                else
                {
                    if (lastAmbientSkyboxUpdate < Time.realtimeSinceStartup || lastAmbientSkyboxUpdate > Time.realtimeSinceStartup + (Settings.ambientSkyboxUpdateIntervall + 0.01f))
                    {
                        UpdateAmbient(Settings.ambientMode,intensity);
                        lastAmbientSkyboxUpdate = Time.realtimeSinceStartup + Settings.ambientSkyboxUpdateIntervall;
                    }
                }
            }
        }

        private void UpdateAmbient(UnityEngine.Rendering.AmbientMode ambientMode, float intensity)
        {   
            switch (ambientMode)
            {
                case UnityEngine.Rendering.AmbientMode.Flat:
                    RenderSettings.ambientSkyColor = Settings.ambientSkyColorGradient.Evaluate(EnviroManager.instance.solarTime) * intensity;
                break;

                case UnityEngine.Rendering.AmbientMode.Trilight:
                    RenderSettings.ambientSkyColor = Settings.ambientSkyColorGradient.Evaluate(EnviroManager.instance.solarTime) * intensity;
                    RenderSettings.ambientEquatorColor = Settings.ambientEquatorColorGradient.Evaluate(EnviroManager.instance.solarTime) * intensity;
                    RenderSettings.ambientGroundColor = Settings.ambientGroundColorGradient.Evaluate(EnviroManager.instance.solarTime) * intensity;
                break;

                case UnityEngine.Rendering.AmbientMode.Skybox:
                    DynamicGI.UpdateEnvironment();
                break;
            }
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroLighting>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroLightingModule t =  ScriptableObject.CreateInstance<EnviroLightingModule>();
        t.name = "Lighting Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroLighting>(JsonUtility.ToJson(Settings));

        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroLightingModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroLighting>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightingModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightingModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroLightingModule))]
    public class EnviroLightingModuleEditor : EnviroModuleEditor
    {  
        private EnviroLightingModule myTarget; 

        //Properties 
        //Direct Lighting
        private SerializedProperty updateIntervallFrames,directLightIntensityModifier,sunIntensityCurve, moonIntensityCurve, sunColorGradient, moonColorGradient, lightingMode;  
        //Ambient Lighting
        private SerializedProperty shadowIntensity, ambientIntensityModifier,ambientMode, ambientSkyboxUpdateIntervall, ambientSkyColorGradient, ambientEquatorColorGradient, ambientGroundColorGradient, ambientIntensityCurve;
       
#if ENVIRO_HDRP
        private SerializedProperty sunIntensityCurveHDRP, moonIntensityCurveHDRP, lightColorTemperatureHDRP, lightColorTintHDRP,ambientColorTintHDRP, controlExposure, sceneExposure, controlIndirectLighting, diffuseIndirectIntensity, reflectionIndirectIntensity;
#endif
        //On Enable
        public override void OnEnable()
        {
            
            if(!target)
                return; 
 
            base.OnEnable();

            myTarget = (EnviroLightingModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            //Direct Lighting
            updateIntervallFrames = serializedObj.FindProperty("Settings.updateIntervallFrames");      
            lightingMode = serializedObj.FindProperty("Settings.lightingMode");      
            sunIntensityCurve = serializedObj.FindProperty("Settings.sunIntensityCurve");      
            moonIntensityCurve = serializedObj.FindProperty("Settings.moonIntensityCurve");         
            sunColorGradient = serializedObj.FindProperty("Settings.sunColorGradient");       
            moonColorGradient = serializedObj.FindProperty("Settings.moonColorGradient");      
            directLightIntensityModifier = serializedObj.FindProperty("Settings.directLightIntensityModifier");
            shadowIntensity = serializedObj.FindProperty("Settings.shadowIntensity");
            //Ambient Lighting
            ambientMode = serializedObj.FindProperty("Settings.ambientMode");
            ambientSkyColorGradient = serializedObj.FindProperty("Settings.ambientSkyColorGradient");          
            ambientEquatorColorGradient = serializedObj.FindProperty("Settings.ambientEquatorColorGradient");          
            ambientGroundColorGradient = serializedObj.FindProperty("Settings.ambientGroundColorGradient");          
            ambientIntensityCurve = serializedObj.FindProperty("Settings.ambientIntensityCurve");
            ambientIntensityModifier = serializedObj.FindProperty("Settings.ambientIntensityModifier");
            ambientSkyboxUpdateIntervall = serializedObj.FindProperty("Settings.ambientSkyboxUpdateIntervall");
            #if ENVIRO_HDRP
            sunIntensityCurveHDRP = serializedObj.FindProperty("Settings.sunIntensityCurveHDRP");
            moonIntensityCurveHDRP = serializedObj.FindProperty("Settings.moonIntensityCurveHDRP");
            lightColorTemperatureHDRP = serializedObj.FindProperty("Settings.lightColorTemperatureHDRP");
            lightColorTintHDRP = serializedObj.FindProperty("Settings.lightColorTintHDRP");
            ambientColorTintHDRP = serializedObj.FindProperty("Settings.ambientColorTintHDRP");
            controlExposure = serializedObj.FindProperty("Settings.controlExposure");
            sceneExposure = serializedObj.FindProperty("Settings.sceneExposure");
            controlIndirectLighting = serializedObj.FindProperty("Settings.controlIndirectLighting");
            diffuseIndirectIntensity = serializedObj.FindProperty("Settings.diffuseIndirectIntensity");
            reflectionIndirectIntensity = serializedObj.FindProperty("Settings.reflectionIndirectIntensity");
            #endif
        } 
/*

*/
        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = new Color(0.0f,0.0f,0.5f,1f);
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Lighting", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Lighting);
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showDirectLightingControls = GUILayout.Toggle(myTarget.showDirectLightingControls, "Direct Lighting Controls", headerFoldout);              
                if(myTarget.showDirectLightingControls)
                {
                    GUILayout.Space(10);
                    myTarget.Settings.setDirectLighting = EditorGUILayout.BeginToggleGroup("Set Direct Lighting",myTarget.Settings.setDirectLighting);
                    EditorGUILayout.PropertyField(lightingMode);
                    if (GUILayout.Button("Apply Lighting Mode Changes"))
                    {
                        myTarget.ApplyLightingChanges();
                    }
                    GUILayout.Space(10);
                    
                    EditorGUILayout.LabelField("Lighting Updates",headerStyle);
                    EditorGUILayout.PropertyField(updateIntervallFrames);
                     GUILayout.Space(5);
                    EditorGUILayout.LabelField("Light Intensity",headerStyle);
                    #if !ENVIRO_HDRP
                    EditorGUILayout.PropertyField(sunIntensityCurve);
                    EditorGUILayout.PropertyField(moonIntensityCurve);
                    #else
                    EditorGUILayout.PropertyField(sunIntensityCurveHDRP);
                    EditorGUILayout.PropertyField(moonIntensityCurveHDRP);
                    #endif
                    DisableInputStart();
                    EditorGUILayout.PropertyField(directLightIntensityModifier);
                    EditorGUILayout.PropertyField(shadowIntensity);    
                    DisableInputEnd();
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Light Color",headerStyle);
                    #if !ENVIRO_HDRP
                    EditorGUILayout.PropertyField(sunColorGradient);
                    EditorGUILayout.PropertyField(moonColorGradient);
                    #else
                    EditorGUILayout.PropertyField(lightColorTintHDRP);
                    EditorGUILayout.PropertyField(lightColorTemperatureHDRP);
                    #endif 
                    #if ENVIRO_HDRP
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Exposure",headerStyle);
                    EditorGUILayout.PropertyField(controlExposure);
                    EditorGUILayout.PropertyField(sceneExposure);
                    #endif
                    EditorGUILayout.EndToggleGroup();
                }
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showAmbientLightingControls = GUILayout.Toggle(myTarget.showAmbientLightingControls, "Ambient Lighting Controls", headerFoldout);              
                if(myTarget.showAmbientLightingControls)
                {
                    GUILayout.Space(10);

                    myTarget.Settings.setAmbientLighting = EditorGUILayout.BeginToggleGroup("Set Ambient Lighting",myTarget.Settings.setAmbientLighting);           
               #if !ENVIRO_HDRP 
                    EditorGUILayout.PropertyField(ambientMode);
                    GUILayout.Space(10); 
                        if(myTarget.Settings.ambientMode == UnityEngine.Rendering.AmbientMode.Flat)
                        {
                            EditorGUILayout.LabelField("Ambient Color",headerStyle);
                            EditorGUILayout.PropertyField(ambientSkyColorGradient);
                            GUILayout.Space(5); 
                            EditorGUILayout.LabelField("Ambient Updates",headerStyle);
                            EditorGUILayout.PropertyField(ambientSkyboxUpdateIntervall);  
                            GUILayout.Space(5); 
                            EditorGUILayout.LabelField("Ambient Intensity",headerStyle);
                            EditorGUILayout.PropertyField(ambientIntensityCurve);
                            DisableInputStart();
                            EditorGUILayout.PropertyField(ambientIntensityModifier);
                            DisableInputEnd();
              
                        }
                        else if(myTarget.Settings.ambientMode == UnityEngine.Rendering.AmbientMode.Trilight)
                        {
                            EditorGUILayout.LabelField("Ambient Color",headerStyle);
                            EditorGUILayout.PropertyField(ambientSkyColorGradient);
                            EditorGUILayout.PropertyField(ambientEquatorColorGradient);
                            EditorGUILayout.PropertyField(ambientGroundColorGradient);
                            GUILayout.Space(5); 
                            EditorGUILayout.LabelField("Ambient Updates",headerStyle);
                            EditorGUILayout.PropertyField(ambientSkyboxUpdateIntervall);  
                            GUILayout.Space(5); 
                            EditorGUILayout.LabelField("Ambient Intensity",headerStyle);
                            EditorGUILayout.PropertyField(ambientIntensityCurve);
                            DisableInputStart();
                            EditorGUILayout.PropertyField(ambientIntensityModifier);
                            DisableInputEnd();
                
                        }
                        else 
                        {
                             EditorGUILayout.LabelField("Ambient Updates",headerStyle);
                             EditorGUILayout.PropertyField(ambientSkyboxUpdateIntervall); 
                             GUILayout.Space(5); 
                             EditorGUILayout.LabelField("Ambient Intensity",headerStyle);
                             EditorGUILayout.PropertyField(ambientIntensityCurve);
                             DisableInputStart();
                             EditorGUILayout.PropertyField(ambientIntensityModifier);
                             DisableInputEnd();
                        }             
                #else
                GUILayout.Space(5);
                EditorGUILayout.PropertyField(controlIndirectLighting);
                if(myTarget.Settings.controlIndirectLighting)
                {
                    EditorGUILayout.PropertyField(diffuseIndirectIntensity);
                    EditorGUILayout.PropertyField(reflectionIndirectIntensity);
                }
                GUILayout.Space(5);
                if(EnviroManager.instance.Sky != null)
                {
                    EditorGUILayout.LabelField("Indirect Color",headerStyle);
                    EditorGUILayout.PropertyField(ambientColorTintHDRP);    
                }       
                #endif   
                 
                    EditorGUILayout.EndToggleGroup();
                }
                GUILayout.EndVertical();

                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);
                    GUILayout.BeginHorizontal("",wrapStyle);
                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightingModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightningModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic; 
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroLightning
    {
        public Enviro.Lightning prefab;
        public bool lightningStorm = false;
        [Range(1f,60f)]
        public float randomLightingDelay = 10.0f;
        [Range(0f,10000f)]
        public float randomSpawnRange = 5000.0f;
        [Range(0f,10000f)]
        public float randomTargetRange = 5000.0f;
    } 

    [Serializable]
    public class EnviroLightningModule : EnviroModule
    {  
        public Enviro.EnviroLightning Settings;
        public EnviroLightningModule preset;
        public bool showLightningControls;
        private bool spawned = false;

        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(Application.isPlaying && Settings.lightningStorm && Settings.prefab != null)
            {
                CastLightningBoltRandom();
            }
        }

        public void CastLightningBolt(Vector3 from, Vector3 to)
        {
            if(Settings.prefab != null)
            {
                Enviro.Lightning lightn = (Enviro.Lightning)Instantiate(Settings.prefab,from,Quaternion.identity);
                lightn.target = to;

                //Play Thunder SFX with delay if Audio module is used.
                if(EnviroManager.instance.Audio != null)
                {
                    EnviroManager.instance.StartCoroutine(PlayThunderSFX(0.05f));
                }
            }
            else
            {
                Debug.Log("Please assign a lightning prefab in your Enviro Ligthning module!");
            }
        }

        public void CastLightningBoltRandom()
        {
            if(!spawned)
            {
                //Calculate some random spawn and target locations.
                Vector2 circlSpawn = UnityEngine.Random.insideUnitCircle * Settings.randomSpawnRange;
                Vector2 circlTarget = UnityEngine.Random.insideUnitCircle * Settings.randomTargetRange;
                Vector3 spawnPosition = new Vector3(circlSpawn.x + EnviroManager.instance.transform.position.x,2500f,circlSpawn.y + EnviroManager.instance.transform.position.z);
                Vector3 targetPosition = new Vector3(circlTarget.x + spawnPosition.x,0f,circlTarget.y + spawnPosition.z);
                EnviroManager.instance.StartCoroutine(LightningStorm(spawnPosition,targetPosition));
            }
        } 
    
        private IEnumerator LightningStorm(Vector3 spwn, Vector3 targ)
        {
            spawned = true;
            yield return new WaitForSeconds(Settings.randomLightingDelay);
            CastLightningBolt(spwn,targ);
            spawned = false;
        }

        private IEnumerator PlayThunderSFX(float delay)
        {
            yield return new WaitForSeconds(delay);
            EnviroManager.instance.Audio.PlayRandomThunderSFX();
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroLightning>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            } 
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroLightningModule t =  ScriptableObject.CreateInstance<EnviroLightningModule>();
        t.name = "Lightning Preset";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroLightning>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroLightningModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroLightning>(JsonUtility.ToJson(Settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightningModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightningModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroLightningModule))]
    public class EnviroLightningModuleEditor : EnviroModuleEditor
    {  
        private EnviroLightningModule myTarget; 

        //Properties
        private SerializedProperty prefab, lightningStorm,randomLightingDelay, randomSpawnRange, randomTargetRange;


        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroLightningModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            prefab = serializedObj.FindProperty("Settings.prefab"); 
            lightningStorm = serializedObj.FindProperty("Settings.lightningStorm");  
            randomLightingDelay = serializedObj.FindProperty("Settings.randomLightingDelay"); 
            randomSpawnRange = serializedObj.FindProperty("Settings.randomSpawnRange"); 
            randomTargetRange = serializedObj.FindProperty("Settings.randomTargetRange"); 
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();
            
            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Lightning", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Lightning); //Add Remove
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                RenderDisableInputBox(); 
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Set Values
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showLightningControls = GUILayout.Toggle(myTarget.showLightningControls, "Lightning Controls", headerFoldout);               
                if(myTarget.showLightningControls)
                {
                    GUILayout.Space(10);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(lightningStorm);
                    DisableInputEnd();
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(prefab);      
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Random Lighting Storm", headerStyle);
                    DisableInputStart();
                    EditorGUILayout.PropertyField(randomLightingDelay);
                    DisableInputEnd();
                    EditorGUILayout.PropertyField(randomSpawnRange);
                    EditorGUILayout.PropertyField(randomTargetRange);
                }
                GUILayout.EndVertical();


                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroLightningModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManager.cs---------------


using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;

namespace Enviro
{
    

    [ExecuteInEditMode]
    public class EnviroManager : EnviroManagerBase
    {     
        private static EnviroManager _instance; // Creat a static instance for easy access!

        public static EnviroManager instance
        { 
            get
            {
                if (_instance == null)
                    _instance = GameObject.FindObjectOfType<EnviroManager>();

                return _instance;
            }
        }
  
        //General
        public GeneralObjects Objects = new GeneralObjects();
        
        //Setup
        public bool dontDestroyOnLoad;
        public Camera Camera;
        public string CameraTag = "MainCamera";
        public List<EnviroCameras> Cameras = new List<EnviroCameras>();
        [Tooltip("'Optional': Assign a transform here to change what object Enviro and weather effects should follow. If not set it will use the camera transform.")]
        public Transform optionalFollowTransform;
  
        //Inspector
        public bool showSetup;
        public bool showModules;
        public bool showEvents;
        public bool showThirdParty;
 
        // Publics 
        [Range(0.2f,0.7f)]
        public float dayNightSwitch = 0.45f;
        public bool isNight;
        public float solarTime;
        public float lunarTime;
        public bool notFirstFrame = false;

        //Effect Removal Zones
        public List<EnviroEffectRemovalZone> removalZones = new List<EnviroEffectRemovalZone>();
   
        struct ZoneParams
        {
            public float type;
            public Vector3 pos;
            public float radius;
            public Vector3 size;
            public Vector3 axis;   
            public float stretch;
            public float density;
            public float feather;
            public Matrix4x4 transform;
            public float pad0;
            public float pad1;
        }

        public ComputeBuffer clearZoneCB;
        public ComputeBuffer removeZoneParamsCB;
        public ComputeBuffer clearCB;

        ZoneParams[] removalZoneParams;

        //Non time module controls
        [Range(0f,360f)]
        public float sunRotationX;
        [Range(0f,360f)]
        public float sunRotationY;
        [Range(0f,360f)]
        public float moonRotationX;
        [Range(0f,360f)]
        public float moonRotationY;
        public bool showNonTimeControls;
        /////// 
        //Events
        public Enviro.EnviroEvents Events;
        public delegate void HourPassed();
        public delegate void DayPassed();
        public delegate void YearPassed();
        public delegate void WeatherChanged(EnviroWeatherType weatherType);
        public delegate void ZoneWeatherChanged(EnviroWeatherType weatherType, Enviro.EnviroZone zone);
        public delegate void SeasonChanged(EnviroEnvironment.Seasons season);
        public delegate void isNightEvent();
        public delegate void isDayEvent();
 
        public event HourPassed OnHourPassed;
        public event DayPassed OnDayPassed;
        public event YearPassed OnYearPassed;
        public event WeatherChanged OnWeatherChanged;
        public event ZoneWeatherChanged OnZoneWeatherChanged;
        public event SeasonChanged OnSeasonChanged; 
        public event isNightEvent OnNightTime;
        public event isDayEvent OnDayTime;

        //Zones
        public EnviroZone currentZone;
        public EnviroZone defaultZone;
        public List<EnviroZone> zones = new List<EnviroZone>();

        public virtual void NotifyHourPassed()
        {
            if (OnHourPassed != null)
                OnHourPassed();
        }
        public virtual void NotifyDayPassed()
        {
            if (OnDayPassed != null)
                OnDayPassed();
        }
        public virtual void NotifyYearPassed()
        {
            if (OnYearPassed != null)
                OnYearPassed(); 
        }
        public virtual void NotifyWeatherChanged(EnviroWeatherType type)
        {
            if (OnWeatherChanged != null)
                OnWeatherChanged(type);
        }
        public virtual void NotifyZoneWeatherChanged(EnviroWeatherType type, EnviroZone zone)
        {
            if (OnZoneWeatherChanged != null)
                OnZoneWeatherChanged(type, zone);
        }
        public virtual void NotifySeasonChanged(EnviroEnvironment.Seasons season)
        {
            if (OnSeasonChanged != null)
                OnSeasonChanged(season);
        }
        public virtual void NotifyIsNight()
        {
            if (OnNightTime != null)
                OnNightTime();
        }
        public virtual void NotifyIsDay()
        {
            if (OnDayTime != null)
                OnDayTime();
        }

        //Event Invoke
        private void HourPassedInvoke()
        {
            Events.onHourPassedActions.Invoke();
        }
        private void DayPassedInvoke()
        {
            Events.onDayPassedActions.Invoke();
        }
        private void YearPassedInvoke()
        {
            Events.onYearPassedActions.Invoke();
        }
        private void WeatherChangedInvoke()
        {
            Events.onWeatherChangedActions.Invoke();
        }
        private void SeasonsChangedInvoke()
        {
            Events.onSeasonChangedActions.Invoke();
        }
        private void NightTimeInvoke()
        {
            Events.onNightActions.Invoke ();
        }
        private void DayTimeInvoke()
        {
            Events.onDayActions.Invoke ();
        }
        private void ZoneChangedInvoke()
        {
            Events.onZoneChangedActions.Invoke ();
        }

        //Lighting updates
        public bool updateSkyAndLighting = true;
        public bool updateSkyAndLightingHDRP = true;
 
        // HDRP
#if ENVIRO_HDRP 
        public UnityEngine.Rendering.Volume volumeHDRP;
        public UnityEngine.Rendering.VolumeProfile volumeProfileHDRP;
#endif
        //////



        void OnEnable()
        {
    #if UNITY_EDITOR
            if(UnityEditor.PrefabUtility.IsPartOfAnyPrefab(gameObject))
               UnityEditor.PrefabUtility.UnpackPrefabInstance(gameObject,UnityEditor.PrefabUnpackMode.OutermostRoot,UnityEditor.InteractionMode.UserAction);
    #endif

            if(configuration == null)
               Debug.Log("Please create or assign a configuration asset in your Enviro Manager!");

            CreateGeneralObjects ();
    #if ENVIRO_HDRP
            CreateHDRPVolume ();
    #endif
            UpdateManager();
            EnableModules();

    #if !ENVIRO_HDRP && !ENVIRO_URP
            //Add Enviro Render Component to main camera in builtin rp
           AddCameraComponents();
    #endif

            EventInit();
            SetSRPKeywords (); 
        }  

        void OnDisable()
        {  
            if(Fog != null)
               Fog.Disable();

            ReleaseZoneBuffers();
        }
 
        private void AddCameraComponents()
        {
            if(Camera != null)
            {
                if(Camera.gameObject.GetComponent<EnviroRenderer>() == null)
                   Camera.gameObject.AddComponent<EnviroRenderer>();
            }

            for(int i = 0; i < Cameras.Count; i++)
            {
                if(Cameras[i].camera != null)
                {
                    if(Cameras[i].camera.gameObject.GetComponent<EnviroRenderer>() == null)
                        Cameras[i].camera.gameObject.AddComponent<EnviroRenderer>();
                }
            }
        }

        // Change the camera to a new one.
        public void ChangeCamera (Camera cam)
        {
            Camera = cam;

    #if !ENVIRO_HDRP && !ENVIRO_URP
            AddCameraComponents();
    #endif
        }
 
        public void AddAdditionalCamera (Camera cam, bool reset = false)
        {
            bool added = false;

            for(int i = 0; i < Cameras.Count; i++)
            {
                if(Cameras[i].camera != null && Cameras[i].camera == cam)
                added = true;
            }

            if(!added)
            {
                EnviroCameras newCam = new EnviroCameras();
                newCam.camera = cam;
                newCam.resetMatrix = reset;

                Cameras.Add(newCam);
            #if !ENVIRO_HDRP && !ENVIRO_URP
                AddCameraComponents();
            #endif
            }
        }

        void Start ()
        {   

            // Set dont destroy on load on start
            if(dontDestroyOnLoad && Application.isPlaying)
                DontDestroyOnLoad(gameObject);

            //Set a first frame bool that will be used for events.
            notFirstFrame = false;
            StartCoroutine(FirstFrame());

            StartModules ();
        }
 
        //Update modules
        void Update()
        {     
            if(!Application.isPlaying)
                LoadConfiguration();

            UpdateManager ();

            //Update all modules
            UpdateModules ();

            //Update non time case
            if(Time == null)
               UpdateNonTime();
        }

        void LateUpdate() 
        { 
            if(Camera != null)
            {
                if(optionalFollowTransform != null)
                {
                    transform.position = optionalFollowTransform.position;
                }
                else
                {
                    transform.position = Camera.transform.position;
                }
            }    
        }

        void CreateGeneralObjects ()
        {
            if(Objects.sun == null)
            {
                Objects.sun = new GameObject();
                Objects.sun.name = "Sun";
                Objects.sun.transform.SetParent(transform);
                Objects.sun.transform.localPosition = Vector3.zero;
            }

            if(Objects.moon == null)
            {
                Objects.moon = new GameObject();
                Objects.moon.name = "Moon";
                Objects.moon.transform.SetParent(transform);
                Objects.moon.transform.localPosition = Vector3.zero;
            }
  
            if(Objects.stars == null)
            { 
                Objects.stars = new GameObject();
                Objects.stars.name = "Stars";
                Objects.stars.transform.SetParent(transform);
                Objects.stars.transform.localPosition = Vector3.zero;
            }
        }

        // Set the solar and lunar time based on sun rotation.
        private void UpdateNonTime()
        {
            if(Objects.sun != null)
            {
                Objects.sun.transform.eulerAngles = new Vector3(sunRotationX,sunRotationY,0f);

                if(sunRotationX > 0f && sunRotationX <= 90f)
                   solarTime = EnviroHelper.Remap(sunRotationX, 0f, 90f, 0.5f, 1f);
                else if (sunRotationX > 90f && sunRotationX <= 180f)
                   solarTime = EnviroHelper.Remap(sunRotationX, 90f, 180f, 1f, 0.5f);
                else if (sunRotationX > 180f && sunRotationX <= 270f)
                   solarTime = EnviroHelper.Remap(sunRotationX, 180f, 270f, 0.5f, 0.0f);
                else if (sunRotationX > 270f && sunRotationX <= 360f)
                   solarTime = EnviroHelper.Remap(sunRotationX, 270f, 360f, 0.0f, 0.5f);
                else solarTime = 0.5f;
            }
            if(Objects.moon != null)
            {
                Objects.moon.transform.eulerAngles = new Vector3(moonRotationX,moonRotationY,0f);
                 
                if(moonRotationX > 0f && moonRotationX <= 90f)
                   lunarTime = EnviroHelper.Remap(moonRotationX, 0f, 90f, 0.5f, 1f);
                else if (moonRotationX > 90f && moonRotationX <= 180f)
                   lunarTime = EnviroHelper.Remap(moonRotationX, 90f, 180f, 1f, 0.5f);
                else if (moonRotationX > 180f && moonRotationX <= 270f)
                   lunarTime = EnviroHelper.Remap(moonRotationX, 180f, 270f, 0.5f, 0.0f);
                else if (moonRotationX > 270f && moonRotationX <= 360f)
                   lunarTime = EnviroHelper.Remap(moonRotationX, 270f, 360f, 0.0f, 0.5f);
                else lunarTime = 0.5f; 
            }
        }

        //Effect Removal Zones
        public bool AddRemovalZone (EnviroEffectRemovalZone zone)
        {
            removalZones.Add(zone);
            return true;
        }
        public void RemoveRemovaleZone (EnviroEffectRemovalZone zone)
        {

         if(removalZones.Contains(zone))
            removalZones.Remove(zone);

        }
 
        private void SetupZoneBuffers() 
        { 
            int count = 0;

            for (int z = 0; z < removalZones.Count; z++)
            {
                if (removalZones[z] != null && removalZones[z].enabled && removalZones[z].gameObject.activeSelf)
                count++;
            }

            Shader.SetGlobalFloat("_EnviroRemovalZonesCount", count);

            if (count == 0)
            {
                // Can't not set the buffer
                Shader.SetGlobalBuffer("_EnviroRemovalZones", clearZoneCB);
                return;
            } 

            if (removalZoneParams == null || removalZoneParams.Length != count)
                removalZoneParams = new ZoneParams[count];

            int zoneID = 0;
            for (int i = 0; i < removalZones.Count; i++)
            {
                Enviro.EnviroEffectRemovalZone fz = removalZones[i];
                if (fz == null || !fz.enabled || !fz.gameObject.activeSelf)
                    continue;

                Transform t = fz.transform;

                removalZoneParams[zoneID].type = (int)fz.type;
                removalZoneParams[zoneID].pos = t.position;
                removalZoneParams[zoneID].radius = fz.radius * fz.radius;
                removalZoneParams[zoneID].size = fz.size;
                removalZoneParams[zoneID].axis = -t.up;
                removalZoneParams[zoneID].stretch = 1.0f/fz.stretch - 1.0f;
                removalZoneParams[zoneID].density = fz.density;
                removalZoneParams[zoneID].feather = 1.0f - fz.feather;
                removalZoneParams[zoneID].transform = t.transform.worldToLocalMatrix;
                removalZoneParams[zoneID].pad0 = 0f;
                removalZoneParams[zoneID].pad1 = 0f;

                zoneID++;
            }  
            removeZoneParamsCB.SetData(removalZoneParams);
            Shader.SetGlobalBuffer("_EnviroRemovalZones", removeZoneParamsCB);
        }

        private void CreateZoneBuffers()
        {
            EnviroHelper.CreateBuffer(ref removeZoneParamsCB, removalZones.Count, Marshal.SizeOf(typeof(ZoneParams)));
            EnviroHelper.CreateBuffer(ref clearZoneCB, 1, 4);
        }

        private void ReleaseZoneBuffers()
        {
            if(removeZoneParamsCB != null)
            EnviroHelper.ReleaseComputeBuffer(ref removeZoneParamsCB);
            if(clearZoneCB != null)
            EnviroHelper.ReleaseComputeBuffer(ref clearZoneCB);
        }
 
        IEnumerator FirstFrame ()
        {
            yield return 0;
            notFirstFrame = true;
        }

        ///HDRP Section
        public void CreateHDRPVolume ()
        {
#if ENVIRO_HDRP
            if(volumeProfileHDRP == null)
            {
               volumeProfileHDRP = EnviroHelper.GetDefaultSkyAndFogProfile("Enviro HDRP Sky and Fog Volume");
            }

            if(volumeHDRP == null)
            {
                GameObject volume = new GameObject();
                volume.name = "Enviro Sky and Fog Volume";
                volume.transform.SetParent(transform);
                volume.transform.localPosition = Vector3.zero;   
                volumeHDRP = volume.AddComponent<UnityEngine.Rendering.Volume>();     
                volumeHDRP.sharedProfile = volumeProfileHDRP;  
                volumeHDRP.priority = 1;
            }
            else
            {
                volumeHDRP.sharedProfile = volumeProfileHDRP;  
            }
#endif
        }
 
        private void CheckCameraSetup ()
        {
            //Auto assign camera with the camera tag when camera not set.
            if(Camera == null)
            {
                for (int i = 0; i < Camera.allCameras.Length; i++)
                {
                    if (Camera.allCameras[i].tag == CameraTag)
                    {
                        Camera = Camera.allCameras[i];
                #if !ENVIRO_HDRP || !ENVIRO_URP
                        AddCameraComponents();
                #endif
                    }
                }
            }
        }

        private void SetSRPKeywords ()
        {
            #if ENVIRO_HDRP
            Shader.EnableKeyword("ENVIROHDRP");
            Shader.DisableKeyword("ENVIROURP");
            #elif ENVIRO_URP
            Shader.EnableKeyword("ENVIROURP");
            Shader.DisableKeyword("ENVIROHDRP");
            #else
            Shader.DisableKeyword("ENVIROURP");
            Shader.DisableKeyword("ENVIROHDRP");
            #endif
        }

        //Saves time and weather conditions
        public void Save()
        {
            if(Time != null)
            {
                PlayerPrefs.SetFloat("Time_Hours", Time.GetTimeOfDay());
                PlayerPrefs.SetInt("Time_Days", Time.days);
                PlayerPrefs.SetInt("Time_Months", Time.months);
                PlayerPrefs.SetInt("Time_Years", Time.years);
            }

            if(Weather != null)
            {
                for (int i = 0; i < Weather.Settings.weatherTypes.Count; i++)
                {
                    if (Weather.Settings.weatherTypes[i] == Weather.targetWeatherType)
                        PlayerPrefs.SetInt("currentWeather", i);
                }
            }
        }

        //Loads time and weather conditions
        public void Load()
        {
            if(Time != null)
            {
                if (PlayerPrefs.HasKey("Time_Hours"))
                    Time.SetTimeOfDay(PlayerPrefs.GetFloat("Time_Hours"));
                if (PlayerPrefs.HasKey("Time_Days"))
                    Time.days = PlayerPrefs.GetInt("Time_Days");
                if (PlayerPrefs.HasKey("Time_Months"))
                    Time.months = PlayerPrefs.GetInt("Time_Months");
                if (PlayerPrefs.HasKey("Time_Years"))
                    Time.years = PlayerPrefs.GetInt("Time_Years");
            }
            if(Weather != null)
            {
                if (PlayerPrefs.HasKey("currentWeather"))
                    Weather.ChangeWeatherInstant(PlayerPrefs.GetInt("currentWeather"));
            }
            
        }

        //Events
        private void EventInit()
        {
            if(Time != null)
            {
                OnHourPassed += () => HourPassedInvoke ();
                OnDayPassed += () => DayPassedInvoke ();
                OnYearPassed += () => YearPassedInvoke ();

                OnNightTime += () => NightTimeInvoke ();
                OnDayTime += () => DayTimeInvoke ();
            }
 
            if(Weather != null)
            { 
               OnWeatherChanged += (EnviroWeatherType type) =>  WeatherChangedInvoke ();
               OnZoneWeatherChanged += (EnviroWeatherType type, EnviroZone zone) =>  ZoneChangedInvoke ();
            }

            if(Environment != null)
            {
               OnSeasonChanged += (EnviroEnvironment.Seasons season) => SeasonsChangedInvoke ();
            } 
        }

        //Updates manager variables.
        private void UpdateManager ()
        {
            if(Application.isPlaying)
               CheckCameraSetup ();

            if(solarTime > dayNightSwitch)
            {
                if(isNight == true)
                    NotifyIsDay();

                isNight = false;
            }
            else
            {
                if(isNight == false)
                    NotifyIsNight();

                isNight = true;
            }

            //Effect Removal Zones:
            if(Fog != null || Effects != null)
            { 
                CreateZoneBuffers();
                SetupZoneBuffers();
            } 
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManager.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManagerBase.cs---------------


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Enviro
{
    [System.Serializable]
    public class GeneralObjects
    {
        public GameObject sun;
        public GameObject moon;
        public GameObject stars;
        public Light directionalLight;
        public Light additionalDirectionalLight;
        public EnviroReflectionProbe globalReflectionProbe;
        public GameObject effects;
        public GameObject audio;
        public WindZone windZone;
        public GameObject worldAnchor;
    }

    [System.Serializable]
    public class EnviroCameras
    {
        public Camera camera;
        public EnviroQuality quality;
        [Tooltip("Resets projection matrix of the camera. Might help with reflection cameras to render clouds.")]
        public bool resetMatrix = false;
    }

    public class EnviroManagerBase : MonoBehaviour
    {
        //Modules
        public EnviroConfiguration configuration;

        [SerializeField]
        private EnviroConfiguration lastConfiguration;

        public EnviroTimeModule Time;
        public EnviroLightingModule Lighting;
        public EnviroReflectionsModule Reflections;
        public EnviroSkyModule Sky;
        public EnviroFogModule Fog;
        public EnviroVolumetricCloudsModule VolumetricClouds;
        public EnviroFlatCloudsModule FlatClouds;
        public EnviroWeatherModule Weather;
        public EnviroAuroraModule Aurora;
        public EnviroAudioModule Audio;
        public EnviroEffectsModule Effects;
        public EnviroLightningModule Lightning;
        public EnviroQualityModule Quality;
        public EnviroEnvironmentModule Environment;
        //public EnviroEventModule Events;

        //Enum
        public enum ModuleType
        {
            Time,
            Lighting,
            Reflections,
            Sky,
            Fog,
            VolumetricClouds,
            FlatClouds,
            Weather,
            Aurora,
            Effects,
            Lightning,
            Environment,
            Audio,
            Quality
        }

        public void EnableModules()
        {
            if(Time != null)
               Time.Enable();

            if(Sky != null)
               Sky.Enable();

            if(Lighting != null)
               Lighting.Enable();

            if(Reflections != null)
               Reflections.Enable();

            if(VolumetricClouds != null)
               VolumetricClouds.Enable();

            if(FlatClouds != null)
               FlatClouds.Enable();

            if(Fog != null)
               Fog.Enable();

            if(Weather != null)
               Weather.Enable();

            if(Aurora != null)
               Aurora.Enable();

            if(Environment != null)
               Environment.Enable();

            if(Audio != null)
               Audio.Enable();

            if(Effects != null)
               Effects.Enable();

            if(Lightning != null)
               Lightning.Enable();

            if(Quality != null)
               Quality.Enable();
        }

        public void DisableModules()
        {
            if(Time != null)
               Time.Disable();

            if(Sky != null)
               Sky.Disable();

            if(Lighting != null)
               Lighting.Disable();

            if(Reflections != null)
               Reflections.Disable();

            if(VolumetricClouds != null)
               VolumetricClouds.Disable();

            if(FlatClouds != null)
               FlatClouds.Disable();

            if(Fog != null)
               Fog.Disable();

            if(Weather != null)
               Weather.Disable();

            if(Aurora != null)
               Aurora.Disable();

            if(Environment != null)
               Environment.Disable();

            if(Audio != null)
               Audio.Disable();

            if(Effects != null)
               Effects.Disable();

            if(Lightning != null)
               Lightning.Disable();

            if(Quality != null)
               Quality.Disable();
        }

        public void DisableAndRemoveModules()
        {
            if(Time != null)
            {
               Time.Disable();
               Time = null;
            }

            if(Sky != null)
            {
               Sky.Disable();
               Sky = null;
            }

            if(Lighting != null)
            {
                Lighting.Disable();
                Lighting = null;
            }

            if(Reflections != null)
            {
                Reflections.Disable();
                Reflections = null;
            }

            if(VolumetricClouds != null)
            {
                VolumetricClouds.Disable();
                VolumetricClouds = null;
            }

            if(FlatClouds != null)
            {
                FlatClouds.Disable();
                FlatClouds = null;
            }

            if(Fog != null)
            {
                Fog.Disable();
                Fog = null;
            }

            if(Weather != null)
            {
                Weather.Disable();
                Weather = null;
            }

            if(Aurora != null)
            {
                Aurora.Disable();
                Aurora = null;
            }

            if(Environment != null)
            {
                Environment.Disable();
                Environment = null;
            }

            if(Audio != null)
            {
                Audio.Disable();
                Audio = null;
            }

            if(Effects != null)
            {
                Effects.Disable();
                Effects = null;
            }

            if(Lightning != null)
            {
                Lightning.Disable();
                Lightning = null;
            }

            if(Quality != null)
            {
                Quality.Disable();
                Quality = null;
            }
        }

        public void StartModules ()
        {
            if(Time != null)
            {
               Time = Instantiate(Time);
            }

            if(Sky != null)
            {
               Sky = Instantiate(Sky);
            }

            if(Lighting != null)
            {
               Lighting = Instantiate(Lighting);
            }

            if(Reflections != null)
            {
               Reflections = Instantiate(Reflections);
            }

            if(Fog != null)
            {
               Fog = Instantiate(Fog);
            }

            if(VolumetricClouds != null)
            {
               VolumetricClouds = Instantiate(VolumetricClouds);
            }

            if(FlatClouds != null)
            {
               FlatClouds = Instantiate(FlatClouds);
            }

            if(Weather != null)
            {
               Weather = Instantiate(Weather);
            }

            if(Aurora != null)
            {
               Aurora = Instantiate(Aurora);
            }

            if(Environment != null)
            {
               Environment = Instantiate(Environment);
            }

            if(Audio != null)
            {
               Audio = Instantiate(Audio);
            }

            if(Effects != null)
            {
               Effects = Instantiate(Effects);
            }

            if(Lightning != null)
            {
               Lightning = Instantiate(Lightning);
            }

            if(Quality != null)
            {
               Quality = Instantiate(Quality);
            }
        }

        public void UpdateModules ()
        {
            if(Time != null)
               Time.UpdateModule();

            if(Sky != null)
               Sky.UpdateModule();

            if(Lighting != null)
               Lighting.UpdateModule();

            if(Reflections != null)
               Reflections.UpdateModule();

            if(Fog != null)
               Fog.UpdateModule();

            if(VolumetricClouds != null)
               VolumetricClouds.UpdateModule();

            if(FlatClouds != null)
               FlatClouds.UpdateModule();

            if(Weather != null)
               Weather.UpdateModule();

            if(Aurora != null)
               Aurora.UpdateModule();

            if(Environment != null)
               Environment.UpdateModule();

            if(Audio != null)
               Audio.UpdateModule();

            if(Effects != null)
               Effects.UpdateModule();

            if(Lightning != null)
               Lightning.UpdateModule();

            if(Quality != null)
               Quality.UpdateModule();
        }

        //Saves all the modules settings to its assigned presets.
        public void SaveAllModules()
        {
            if(Time != null && Time.preset != null)
               Time.SaveModuleValues(Time.preset);

            if(Sky != null && Sky.preset != null)
               Sky.SaveModuleValues(Sky.preset);

            if(Lighting != null && Lighting.preset != null)
               Lighting.SaveModuleValues(Lighting.preset);

            if(Reflections != null && Reflections.preset != null)
               Reflections.SaveModuleValues(Reflections.preset);

            if(Fog != null && Fog.preset != null)
               Fog.SaveModuleValues(Fog.preset);

            if(VolumetricClouds != null && VolumetricClouds.preset != null)
               VolumetricClouds.SaveModuleValues(VolumetricClouds.preset);

            if(FlatClouds != null && FlatClouds.preset != null)
               FlatClouds.SaveModuleValues(FlatClouds.preset);

            if(Weather != null && Weather.preset != null)
               Weather.SaveModuleValues(Weather.preset);

            if(Aurora != null && Aurora.preset != null)
               Aurora.SaveModuleValues(Aurora.preset);

            if(Environment != null && Environment.preset != null)
               Environment.SaveModuleValues(Environment.preset);

            if(Audio != null && Audio.preset != null)
               Audio.SaveModuleValues(Audio.preset);

            if(Effects != null && Effects.preset != null)
               Effects.SaveModuleValues(Effects.preset);

            if(Lightning != null && Lightning.preset != null)
               Lightning.SaveModuleValues(Lightning.preset);

            if(Quality != null && Quality.preset != null)
               Quality.SaveModuleValues(Quality.preset);
#if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(configuration);
#endif
        }

        //Loads all the modules settings from its assigned presets.
        public void LoadAllModules()
        {
            if(Time != null)
               Time.LoadModuleValues();

            if(Sky != null)
               Sky.LoadModuleValues();

            if(Lighting != null)
               Lighting.LoadModuleValues();

            if(Reflections != null)
               Reflections.LoadModuleValues();

            if(Fog != null)
               Fog.LoadModuleValues();

            if(VolumetricClouds != null)
               VolumetricClouds.LoadModuleValues();

            if(FlatClouds != null)
               FlatClouds.LoadModuleValues();

            if(Weather != null)
               Weather.LoadModuleValues();

            if(Aurora != null)
               Aurora.LoadModuleValues();

            if(Environment != null)
               Environment.LoadModuleValues();

            if(Audio != null)
               Audio.LoadModuleValues();

            if(Effects != null)
               Effects.LoadModuleValues();

            if(Lightning != null)
               Lightning.LoadModuleValues();

            if(Quality != null)
               Quality.LoadModuleValues();
#if UNITY_EDITOR
            //Set the head configuration dirty to not loose our child values!
            UnityEditor.EditorUtility.SetDirty(configuration);
#endif
        }

        public void LoadConfiguration()
        {
            if(configuration != null)
            {
                if(configuration != lastConfiguration)
                DisableModules();

                Time = configuration.timeModule;
                Sky = configuration.Sky;
                Lighting = configuration.lightingModule;
                Reflections = configuration.reflectionsModule;
                VolumetricClouds = configuration.volumetricCloudModule;
                FlatClouds = configuration.flatCloudModule;
                Fog = configuration.fogModule;
                Weather = configuration.Weather;
                Aurora = configuration.Aurora;
                Environment = configuration.Environment;
                Audio = configuration.Audio;
                Effects = configuration.Effects;
                Lightning = configuration.Lightning;
                Quality = configuration.Quality;

                if(configuration != lastConfiguration)
                EnableModules();

                lastConfiguration = configuration;
            }
            else if (configuration == null)
             DisableAndRemoveModules();
        }

        //Adds a module based on ModelType
        public void AddModule (ModuleType type)
        {
            switch (type)
            {
                case ModuleType.Time:
                    if(Time != null)
                    {
                        Debug.Log("Time module already attached!");
                        return;
                    }
                    else
                    {
                        Time = ScriptableObject.CreateInstance<EnviroTimeModule>();
                        Time.name = "Time Module";
                        Time.preset = (EnviroTimeModule)EnviroHelper.GetDefaultPreset("Default Time Preset");
                        Time.LoadModuleValues();
                        Time.Enable();

                        #if UNITY_EDITOR
                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.timeModule = Time;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Time,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                        #endif
                    }
                break;

                case ModuleType.Sky:
                    if(Sky != null)
                    {
                        Debug.Log("Sky module already attached!");
                        return;
                    }
                    else
                    {
                        Sky = ScriptableObject.CreateInstance<EnviroSkyModule>();
                        Sky.name = "Sky Module";
                        Sky.preset = (EnviroSkyModule)EnviroHelper.GetDefaultPreset("Default Sky Preset");
                        Sky.LoadModuleValues();
                        Sky.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Sky = Sky;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Sky,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Lighting:
                    if(Lighting != null)
                    {
                        Debug.Log("Lighting module already attached!");
                        return;
                    }
                    else
                    {
                        Lighting = ScriptableObject.CreateInstance<EnviroLightingModule>();
                        Lighting.name = "Lighting Module";
                        Lighting.preset = (EnviroLightingModule)EnviroHelper.GetDefaultPreset("Default Lighting Preset");
                        Lighting.LoadModuleValues();
                        Lighting.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.lightingModule = Lighting;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Lighting,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Reflections:
                    if(Reflections != null)
                    {
                        Debug.Log("Reflections module already attached!");
                        return;
                    }
                    else
                    {
                        Reflections = ScriptableObject.CreateInstance<EnviroReflectionsModule>();
                        Reflections.name = "Reflections Module";
                        Reflections.preset = (EnviroReflectionsModule)EnviroHelper.GetDefaultPreset("Default Reflections Preset");
                        Reflections.LoadModuleValues();
                        Reflections.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.reflectionsModule = Reflections;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Reflections,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Fog:
                    if(Fog != null)
                    {
                        Debug.Log("Fog module already attached!");
                        return;
                    }
                    else
                    {
                        Fog = ScriptableObject.CreateInstance<EnviroFogModule>();
                        Fog.name = "Fog Module";
                        Fog.preset = (EnviroFogModule)EnviroHelper.GetDefaultPreset("Default Fog Preset");
                        Fog.LoadModuleValues();
                        Fog.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.fogModule = Fog;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Fog,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.VolumetricClouds:
                    if(VolumetricClouds != null)
                    {
                        Debug.Log("Volumetric clouds module already attached!");
                        return;
                    }
                    else
                    {
                        VolumetricClouds = ScriptableObject.CreateInstance<EnviroVolumetricCloudsModule>();
                        VolumetricClouds.name = "Volumetric Cloud Module";
                        VolumetricClouds.preset = (EnviroVolumetricCloudsModule)EnviroHelper.GetDefaultPreset("Default Volumetric Clouds Preset");
                        VolumetricClouds.LoadModuleValues();
                        VolumetricClouds.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.volumetricCloudModule = VolumetricClouds;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(VolumetricClouds,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.FlatClouds:
                    if(FlatClouds != null)
                    {
                        Debug.Log("Flat clouds module already attached!");
                        return;
                    }
                    else
                    {
                        FlatClouds = ScriptableObject.CreateInstance<EnviroFlatCloudsModule>();
                        FlatClouds.name = "Flat Clouds Module";
                        FlatClouds.preset = (EnviroFlatCloudsModule)EnviroHelper.GetDefaultPreset("Default Flat Clouds Preset");
                        FlatClouds.LoadModuleValues();
                        FlatClouds.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.flatCloudModule = FlatClouds;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(FlatClouds,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Weather:
                    if(Weather != null)
                    {
                        Debug.Log("Weather module already attached!");
                        return;
                    }
                    else
                    {
                        Weather = ScriptableObject.CreateInstance<EnviroWeatherModule>();
                        Weather.name = "Weather Module";
                        Weather.preset = (EnviroWeatherModule)EnviroHelper.GetDefaultPreset("Default Weather Preset");
                        Weather.LoadModuleValues();
                        Weather.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Weather = Weather;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Weather,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Aurora:
                    if(Aurora != null)
                    {
                        Debug.Log("Aurora module already attached!");
                        return;
                    }
                    else
                    {
                        Aurora = ScriptableObject.CreateInstance<EnviroAuroraModule>();
                        Aurora.name = "Aurora Module";
                        Aurora.preset = (EnviroAuroraModule)EnviroHelper.GetDefaultPreset("Default Aurora Preset");
                        Aurora.LoadModuleValues();
                        Aurora.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Aurora = Aurora;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Aurora,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Environment:
                    if(Environment != null)
                    {
                        Debug.Log("Environment module already attached!");
                        return;
                    }
                    else
                    {
                        Environment = ScriptableObject.CreateInstance<EnviroEnvironmentModule>();
                        Environment.name = "Environment Module";
                        Environment.preset = (EnviroEnvironmentModule)EnviroHelper.GetDefaultPreset("Default Environment Preset");
                        Environment.LoadModuleValues();
                        Environment.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Environment = Environment;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Environment,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Audio:
                    if(Audio != null)
                    {
                        Debug.Log("Audio module already attached!");
                        return;
                    }
                    else
                    {
                        Audio = ScriptableObject.CreateInstance<EnviroAudioModule>();
                        Audio.name = "Audio Module";
                        Audio.preset = (EnviroAudioModule)EnviroHelper.GetDefaultPreset("Default Audio Preset");
                        Audio.LoadModuleValues();
                        Audio.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Audio = Audio;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Audio,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Effects:
                    if(Effects != null)
                    {
                        Debug.Log("Effects module already attached!");
                        return;
                    }
                    else
                    {
                        Effects = ScriptableObject.CreateInstance<EnviroEffectsModule>();
                        Effects.name = "Effects Module";
                        Effects.preset = (EnviroEffectsModule)EnviroHelper.GetDefaultPreset("Default Effects Preset");
                        Effects.LoadModuleValues();
                        Effects.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Effects = Effects;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Effects,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Lightning:
                    if(Lightning != null)
                    {
                        Debug.Log("Lighting module already attached!");
                        return;
                    }
                    else
                    {
                        Lightning = ScriptableObject.CreateInstance<EnviroLightningModule>();
                        Lightning.name = "Lightning Module";
                        Lightning.preset = (EnviroLightningModule)EnviroHelper.GetDefaultPreset("Default Lightning Preset");
                        Lightning.LoadModuleValues();
                        Lightning.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Lightning = Lightning;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Lightning,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;

                case ModuleType.Quality:
                    if(Quality != null)
                    {
                        Debug.Log("Quality module already attached!");
                        return;
                    }
                    else
                    {
                        Quality = ScriptableObject.CreateInstance<EnviroQualityModule>();
                        Quality.name = "Quality Module";
                        Quality.preset = (EnviroQualityModule)EnviroHelper.GetDefaultPreset("Default Quality Module Preset");
                        Quality.LoadModuleValues();
                        Quality.Enable();

                        if(configuration != null && !Application.isPlaying)
                        {
                            configuration.Quality = Quality;
                            #if UNITY_EDITOR
                            UnityEditor.AssetDatabase.AddObjectToAsset(Quality,configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                break;
            }
        }

        //Removes a module
        public void RemoveModule (ModuleType type)
        {
            switch (type)
            {
                case ModuleType.Time:
                    if(Time != null)
                    {
                        Time.Disable();
                        DestroyImmediate(Time,true);

                        if(!Application.isPlaying)
                        {
                            #if UNITY_EDITOR
                            DestroyImmediate(configuration.timeModule,true);
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }

                    }
                    else
                    {
                        Debug.Log("No time module attached!");
                        return;
                    }
                break;

                case ModuleType.Sky:
                    if(Sky != null)
                    {
                        Sky.Disable();
                        DestroyImmediate(Sky,true);
                        if(!Application.isPlaying)
                        {
                            DestroyImmediate(configuration.Sky,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No sky module attached!");
                        return;
                    }
                break;

                case ModuleType.Lighting:
                    if(Lighting != null)
                    {
                        Lighting.Disable();
                        DestroyImmediate(Lighting,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.lightingModule,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No lighting module attached!");
                        return;
                    }
                break;

                case ModuleType.Reflections:
                    if(Reflections != null)
                    {
                        Reflections.Disable();
                        DestroyImmediate(Reflections,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.reflectionsModule,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No reflections module attached!");
                        return;
                    }
                break;

                case ModuleType.Fog:
                    if(Fog != null)
                    {
                        Fog.Disable();
                        DestroyImmediate(Fog,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.fogModule,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No fog module attached!");
                        return;
                    }
                break;

                case ModuleType.VolumetricClouds:
                    if(VolumetricClouds != null)
                    {
                        VolumetricClouds.Disable();
                        DestroyImmediate(VolumetricClouds,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.volumetricCloudModule,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No volumetric cloud module attached!");
                        return;
                    }
                break;

                case ModuleType.FlatClouds:
                    if(FlatClouds != null)
                    {
                        FlatClouds.Disable();
                        DestroyImmediate(FlatClouds,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.flatCloudModule,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No flat cloud module attached!");
                        return;
                    }
                break;

                case ModuleType.Weather:
                    if(Weather != null)
                    {
                        Weather.Disable();
                        DestroyImmediate(Weather,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Weather,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No weather module attached!");
                        return;
                    }
                break;

                case ModuleType.Aurora:
                    if(Aurora != null)
                    {
                        Aurora.Disable();
                        DestroyImmediate(Aurora,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Aurora,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No aurora module attached!");
                        return;
                    }
                break;

                case ModuleType.Environment:
                    if(Environment != null)
                    {
                        Environment.Disable();
                        DestroyImmediate(Environment,true);

                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Environment,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No environment module attached!");
                        return;
                    }
                break;

                case ModuleType.Audio:
                    if(Audio != null)
                    {
                        Audio.Disable();
                        DestroyImmediate(Audio,true);
                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Audio,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No audio module attached!");
                        return;
                    }
                break;

                case ModuleType.Effects:
                    if(Effects != null)
                    {
                        Effects.Disable();
                        DestroyImmediate(Effects,true);
                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Effects,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No effects module attached!");
                        return;
                    }
                break;

                case ModuleType.Lightning:
                    if(Lightning != null)
                    {
                        Lightning.Disable();
                        DestroyImmediate(Lightning,true);
                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Lightning,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No lightning module attached!");
                        return;
                    }
                break;

                case ModuleType.Quality:
                    if(Quality != null)
                    {
                        Quality.Disable();
                        DestroyImmediate(Quality,true);
                        if(!Application.isPlaying)
                        {
                            if(configuration != null)
                            DestroyImmediate(configuration.Quality,true);
                            #if UNITY_EDITOR
                            UnityEditor.EditorUtility.SetDirty(configuration);
                            UnityEditor.AssetDatabase.SaveAssets();
                            UnityEditor.AssetDatabase.Refresh();
                            #endif
                        }
                    }
                    else
                    {
                        Debug.Log("No quality module attached!");
                        return;
                    }
                break;
            }
        }


    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManagerBase.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManagerInspector.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro{
    [CustomEditor(typeof(EnviroManager))]
    public class EnviroManagerInspector : EnviroBaseInspector
    {
        private EnviroManager myTarget;

        private Editor currentTimeModuleEditor, currentSkyModuleEditor, currentLightingModuleEditor, currentReflectionsModuleEditor, currentFogModuleEditor, currentVolumetricCloudModuleEditor,currentFlatCloudModuleEditor,currentWeatherModuleEditor,currentAuroraModuleEditor,currentLightningModuleEditor, currentAudioModuleEditor,currentEnvironmentModuleEditor,currentEffectsModuleEditor ,currentQualityModuleEditor;
        private SerializedProperty configuration, modules, Camera, CameraTag, dontDestroyOnLoad ,worldAnchor ,optionalFollowTransform;
        private SerializedProperty sunRotationX,sunRotationY,moonRotationX,moonRotationY,dayNightSwitch;
        //Events
        private SerializedProperty onHourPassedActions, onDayPassedActions, onYearPassedActions, onWeatherChangedActions, onSeasonChangedActions, onNightActions, onDayActions;

        void OnEnable()
        {
            myTarget = (EnviroManager)target;
            serializedObj = new SerializedObject(myTarget);
            configuration = serializedObj.FindProperty("configuration");
            Camera = serializedObj.FindProperty("Camera");
            CameraTag = serializedObj.FindProperty("CameraTag");
            dontDestroyOnLoad = serializedObj.FindProperty("dontDestroyOnLoad");
            sunRotationX = serializedObj.FindProperty("sunRotationX");
            sunRotationY = serializedObj.FindProperty("sunRotationY");
            moonRotationX = serializedObj.FindProperty("moonRotationX");
            moonRotationY = serializedObj.FindProperty("moonRotationY");
            dayNightSwitch = serializedObj.FindProperty("dayNightSwitch");
            worldAnchor = serializedObj.FindProperty("Objects.worldAnchor");
            optionalFollowTransform = serializedObj.FindProperty("optionalFollowTransform");
            //Events
            onHourPassedActions = serializedObj.FindProperty("Events.onHourPassedActions");
            onDayPassedActions = serializedObj.FindProperty("Events.onDayPassedActions");
            onYearPassedActions = serializedObj.FindProperty("Events.onYearPassedActions");
            onWeatherChangedActions = serializedObj.FindProperty("Events.onWeatherChangedActions");
            onSeasonChangedActions = serializedObj.FindProperty("Events.onSeasonChangedActions");
            onNightActions = serializedObj.FindProperty("Events.onNightActions");
            onDayActions = serializedObj.FindProperty("Events.onDayActions");
        }

        public override void OnInspectorGUI()
        {
            SetupGUIStyles();

            GUILayout.BeginVertical("", boxStyle);
            GUILayout.Label("Enviro - Sky and Weather Manager",headerStyleMid);
            GUILayout.Space(5);
            GUILayout.Label("Version: 3.1.7", headerStyleMid);


            //Help Box Button
            //RenderHelpBoxButton();

           // if(showHelpBox)
           // RenderHelpBox("This is a help text test!");

            GUILayout.EndVertical();

            GUILayout.BeginVertical("",boxStyle);
            myTarget.showSetup = GUILayout.Toggle(myTarget.showSetup, "Setup", headerFoldout);

            EditorGUI.BeginChangeCheck();

            if(myTarget.showSetup)
            {
                GUILayout.BeginVertical("",boxStyleModified);
                GUILayout.Label("Camera Setup", headerStyle);

               // GUILayout.Space(10);
               // GUILayout.Label("Main Camera", headerStyle);
                EditorGUILayout.PropertyField(Camera);

                if(myTarget.Camera == null)
                   CameraTag.stringValue = EditorGUILayout.TagField("Camera Tag", CameraTag.stringValue);

                GUILayout.Space(10);
                GUILayout.Label("Additional Cameras", headerStyle);
                GUILayout.Space(5);
                if (GUILayout.Button ("Add"))
                {
                        myTarget.Cameras.Add (new EnviroCameras());
                }
                GUILayout.Space(5);
                for (int i = 0; i < myTarget.Cameras.Count; i++)
                {
                    GUILayout.BeginVertical("", boxStyleModified);
                    myTarget.Cameras[i].camera = (Camera)EditorGUILayout.ObjectField ("Camera", myTarget.Cameras[i].camera, typeof(Camera), true);
                    myTarget.Cameras[i].quality = (EnviroQuality)EditorGUILayout.ObjectField ("Quality", myTarget.Cameras[i].quality, typeof(EnviroQuality), true);
                    myTarget.Cameras[i].resetMatrix = EditorGUILayout.Toggle("Reset Matrix",  myTarget.Cameras[i].resetMatrix);
                    
                    if (GUILayout.Button ("Remove"))
                    {
                        myTarget.Cameras.RemoveAt (i);
                    }

                    GUILayout.EndVertical(); 
                }
                GUILayout.EndVertical();

                GUILayout.BeginVertical("",boxStyleModified);
                GUILayout.Label("General Setup", headerStyle);
                EditorGUILayout.PropertyField(dontDestroyOnLoad);
                EditorGUILayout.PropertyField(worldAnchor);
                EditorGUILayout.PropertyField(optionalFollowTransform);
                GUILayout.EndVertical();

                GUILayout.BeginVertical("", boxStyleModified);

    #if ENVIRO_HDRP
                GUILayout.Label("Render Pipeline:   HDRP", headerStyle);
    #elif ENVIRO_URP
                GUILayout.Label("Render Pipeline:   URP", headerStyle);
    #else
                GUILayout.Label("Render Pipeline:   Legacy", headerStyle);
    #endif

                GUILayout.Space(10);
    #if !ENVIRO_HDRP
                if (GUILayout.Button("Activate HDRP Support"))
                    {
                        AddDefineSymbol("ENVIRO_HDRP");
                        RemoveDefineSymbol("ENVIRO_URP");
                    }
    #endif

    #if !ENVIRO_URP
                    if (GUILayout.Button("Activate URP Support"))
                    {
                        AddDefineSymbol("ENVIRO_URP");
                        RemoveDefineSymbol("ENVIRO_HDRP");
                    }
    #endif

    #if ENVIRO_URP || ENVIRO_HDRP
                if (GUILayout.Button("Activate Legacy Support"))
                    {
                        RemoveDefineSymbol("ENVIRO_URP");
                        RemoveDefineSymbol("ENVIRO_HDRP");
                    }
    #endif
                GUILayout.EndVertical();
            }
            GUILayout.EndVertical();

            GUILayout.BeginVertical("", boxStyle);
            myTarget.showModules = GUILayout.Toggle(myTarget.showModules, "Modules", headerFoldout);
            if(myTarget.showModules)
            {

            if(myTarget.configuration == null)
            {
                GUILayout.Label("Please assign or create a new configuration.");
                EditorGUILayout.PropertyField(configuration);
                    if(GUILayout.Button("Create new Configuration"))
                    {
                        myTarget.configuration = EnviroConfigurationCreation.CreateMyAsset();
                        serializedObj.Update();
                    }
            }
            else
            {
                GUILayout.BeginVertical("", boxStyleModified);

                if(!Application.isPlaying)
                EditorGUILayout.PropertyField(configuration);
                  if(GUILayout.Button("Save all Modules"))
                    {
                        myTarget.SaveAllModules();
                    }
                if(GUILayout.Button("Load all Modules"))
                    {
                        myTarget.LoadAllModules();
                    }

                GUILayout.EndVertical();

                GUILayout.BeginVertical("", wrapStyle);
                GUILayout.BeginHorizontal("", headerStyle);

                EditorGUI.BeginDisabledGroup(myTarget.Time != null);
                if(GUILayout.Button("Time"))
                {
                    if (myTarget.Time == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Time);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Sky != null);
                if(GUILayout.Button("Sky"))
                {
                    if (myTarget.Sky == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Sky);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Lighting != null);
                if(GUILayout.Button("Lighting"))
                {
                    if (myTarget.Lighting == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Lighting);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Reflections != null);
                if(GUILayout.Button("Reflections"))
                {
                    if (myTarget.Reflections == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Reflections);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Fog != null);
                if(GUILayout.Button("Fog"))
                {
                    if (myTarget.Fog == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Fog);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.VolumetricClouds != null);
                if(GUILayout.Button("Volumetric Clouds"))
                { 
                    if (myTarget.VolumetricClouds == null)
                    myTarget.AddModule(EnviroManager.ModuleType.VolumetricClouds);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.FlatClouds != null);
                if(GUILayout.Button("Flat Clouds"))
                {
                    if (myTarget.FlatClouds == null)
                    myTarget.AddModule(EnviroManager.ModuleType.FlatClouds);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Aurora != null);
                if(GUILayout.Button("Aurora"))
                {
                    if (myTarget.Aurora == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Aurora);
                }
                EditorGUI.EndDisabledGroup();

                GUILayout.EndHorizontal();

                //////////////////////////////////////

                GUILayout.BeginHorizontal("", headerStyle);


                EditorGUI.BeginDisabledGroup(myTarget.Environment != null);
                if(GUILayout.Button("Environment"))
                {
                    if (myTarget.Environment == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Environment);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Lightning != null);
                if(GUILayout.Button("Lightning"))
                {
                    if (myTarget.Lightning == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Lightning);
                }
                EditorGUI.EndDisabledGroup();


                EditorGUI.BeginDisabledGroup(myTarget.Weather != null);
                if(GUILayout.Button("Weather"))
                {
                    if (myTarget.Weather == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Weather);
                }
                EditorGUI.EndDisabledGroup();


                EditorGUI.BeginDisabledGroup(myTarget.Audio != null);
                if(GUILayout.Button("Audio"))
                {
                    if (myTarget.Audio == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Audio);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Effects != null);
                if(GUILayout.Button("Effects"))
                {
                    if (myTarget.Effects == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Effects);
                }
                EditorGUI.EndDisabledGroup();

                EditorGUI.BeginDisabledGroup(myTarget.Quality != null);
                if(GUILayout.Button("Quality"))
                {
                    if (myTarget.Quality == null)
                    myTarget.AddModule(EnviroManager.ModuleType.Quality);
                }
                EditorGUI.EndDisabledGroup();

                GUILayout.EndHorizontal();
                GUILayout.EndVertical();


    /////////Modules Start
                GUILayout.Space(10);
                if(myTarget.Time != null)
                {
                    if(currentTimeModuleEditor == null)
                    currentTimeModuleEditor = Editor.CreateEditor(myTarget.Time);

                    currentTimeModuleEditor.OnInspectorGUI();
                }
                else
                {

                    GUI.backgroundColor = baseModuleColor;
                    GUILayout.BeginVertical("",boxStyleModified);
                    GUI.backgroundColor = Color.white;
                    EditorGUILayout.BeginHorizontal();
                    myTarget.showNonTimeControls = GUILayout.Toggle(myTarget.showNonTimeControls, "Sun and Moon Controls", headerFoldout);
                    EditorGUILayout.EndHorizontal();
                    if(myTarget.showNonTimeControls)
                    {
                        EditorGUILayout.LabelField("This module will control your sun and moon position when no time module is used.");
                        serializedObj.UpdateIfRequiredOrScript ();
                        EditorGUI.BeginChangeCheck();
                        GUI.backgroundColor = categoryModuleColor;
                        GUILayout.BeginVertical("",boxStyleModified);
                        GUI.backgroundColor = Color.white;

                        EditorGUILayout.PropertyField(sunRotationX);
                        EditorGUILayout.PropertyField(sunRotationY);
                        EditorGUILayout.PropertyField(moonRotationX);
                        EditorGUILayout.PropertyField(moonRotationY);
                        GUILayout.Space(5);
                        EditorGUILayout.PropertyField(dayNightSwitch);
                        GUILayout.EndVertical();
                    }
                    GUILayout.EndVertical();

                    if(myTarget.showNonTimeControls)
                    GUILayout.Space(10);
                }

                if(myTarget.Lighting != null)
                {
                    if(currentLightingModuleEditor == null)
                    currentLightingModuleEditor = Editor.CreateEditor(myTarget.Lighting);

                    currentLightingModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Reflections != null)
                {
                    if(currentReflectionsModuleEditor == null)
                    currentReflectionsModuleEditor = Editor.CreateEditor(myTarget.Reflections);

                    currentReflectionsModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Sky != null)
                {
                    if(currentSkyModuleEditor == null)
                    currentSkyModuleEditor = Editor.CreateEditor(myTarget.Sky);

                    currentSkyModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Fog != null)
                {
                    if(currentFogModuleEditor == null)
                    currentFogModuleEditor = Editor.CreateEditor(myTarget.Fog);

                    currentFogModuleEditor.OnInspectorGUI();
                }

                if(myTarget.VolumetricClouds != null)
                {
                    if(currentVolumetricCloudModuleEditor == null)
                    currentVolumetricCloudModuleEditor = Editor.CreateEditor(myTarget.VolumetricClouds);

                    currentVolumetricCloudModuleEditor.OnInspectorGUI();
                }

                if(myTarget.FlatClouds != null)
                {
                    if(currentFlatCloudModuleEditor == null)
                    currentFlatCloudModuleEditor = Editor.CreateEditor(myTarget.FlatClouds);

                    currentFlatCloudModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Aurora != null)
                {
                    if(currentAuroraModuleEditor == null)
                    currentAuroraModuleEditor = Editor.CreateEditor(myTarget.Aurora);

                    currentAuroraModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Lightning != null)
                {
                    if(currentLightningModuleEditor == null)
                    currentLightningModuleEditor = Editor.CreateEditor(myTarget.Lightning);

                    currentLightningModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Environment != null)
                {
                    if(currentEnvironmentModuleEditor == null)
                    currentEnvironmentModuleEditor = Editor.CreateEditor(myTarget.Environment);

                    currentEnvironmentModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Weather != null)
                {
                    if(currentWeatherModuleEditor == null)
                    currentWeatherModuleEditor = Editor.CreateEditor(myTarget.Weather);

                    currentWeatherModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Audio != null)
                {
                    if(currentAudioModuleEditor == null)
                    currentAudioModuleEditor = Editor.CreateEditor(myTarget.Audio);

                    currentAudioModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Effects != null)
                {
                    if(currentEffectsModuleEditor == null)
                    currentEffectsModuleEditor = Editor.CreateEditor(myTarget.Effects);

                    currentEffectsModuleEditor.OnInspectorGUI();
                }

                if(myTarget.Quality != null)
                {
                    if(currentQualityModuleEditor == null)
                    currentQualityModuleEditor = Editor.CreateEditor(myTarget.Quality);

                    currentQualityModuleEditor.OnInspectorGUI();
                }
            }
            }
            GUILayout.EndVertical();

            //Modules End

            GUILayout.BeginVertical("",boxStyle);
            myTarget.showEvents = GUILayout.Toggle(myTarget.showEvents, "Events", headerFoldout);

            if(myTarget.showEvents)
            {
                GUI.backgroundColor = thirdPartyModuleColor;
                GUILayout.BeginVertical("", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(5);
                EditorGUILayout.PropertyField(onHourPassedActions);
                EditorGUILayout.PropertyField(onDayPassedActions);
                EditorGUILayout.PropertyField(onYearPassedActions);
                GUILayout.Space(5);
                EditorGUILayout.PropertyField(onWeatherChangedActions);
                EditorGUILayout.PropertyField(onSeasonChangedActions);
                GUILayout.Space(5);
                EditorGUILayout.PropertyField(onDayActions);
                EditorGUILayout.PropertyField(onNightActions);
                 GUILayout.EndVertical();
            }
            GUILayout.EndVertical();

            GUILayout.BeginVertical("",boxStyle);
            myTarget.showThirdParty = GUILayout.Toggle(myTarget.showThirdParty, "Third Party Support", headerFoldout);

            if(myTarget.showThirdParty)
            {
                GUILayout.Space(5);

                //WAPI
                GUI.backgroundColor = thirdPartyModuleColor;
                GUILayout.BeginVertical("World Manager API", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
#if WORLDAPI_PRESENT

                //GUILayout.Label("World Manager API detected!", headerStyle);
                //GUILayout.Space(5);
                RenderIntegrationTextBox("You can add support for WAPI from the ('Components' -> 'Enviro 3' -> 'Integrations' -> 'WAPI') menu.");
#else
                GUILayout.Label("World Manager API no found!", headerStyle);
#endif
                GUILayout.EndVertical();

                //MicroSplat
                GUI.backgroundColor = thirdPartyModuleColor;
                GUILayout.BeginVertical("MicroSplat", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
                RenderIntegrationTextBox("You can add support for MicroSplat and Better Lit Shaders from the ('Components' -> 'Enviro 3' -> 'Integrations' -> 'Microsplat') menu.");
                GUILayout.EndVertical();
                //////////

                //Mirror
                GUI.backgroundColor = thirdPartyModuleColor;
                GUILayout.BeginVertical("Mirror Networking", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
#if ENVIRO_MIRROR_SUPPORT
                //GUILayout.Label("Mirror Networking support activated.", headerStyle);
                //GUILayout.Space(5);
                RenderIntegrationTextBox("Please add the 'Mirror Server' component to a new GameObject in your scene. ('Components' -> 'Enviro 3' -> 'Integrations' -> 'Mirror Server')");
                RenderIntegrationTextBox("Please add the 'Mirror Player' component to your player prefab. ('Components' -> 'Enviro 3' -> 'Integrations' -> 'Mirror Player')");
                GUILayout.Space(10);
                if (GUILayout.Button("Deactivate Mirror Support"))
                {
                    RemoveDefineSymbol("ENVIRO_MIRROR_SUPPORT");
                }
#else
                if (GUILayout.Button("Activate Mirror Support"))
                {
                    AddDefineSymbol("ENVIRO_MIRROR_SUPPORT");
                }
                if (GUILayout.Button("Deactivate Mirror Support"))
                {
                    RemoveDefineSymbol("ENVIRO_MIRROR_SUPPORT");
                }
#endif
                GUILayout.EndVertical();
                //////////

                //Photon
                GUI.backgroundColor = thirdPartyModuleColor;
                GUILayout.BeginVertical("Photon PUN Networking", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
#if ENVIRO_PHOTON_SUPPORT
                RenderIntegrationTextBox("Please add the 'Photon Integration' component to a new GameObject in your scene. ('Components' -> 'Enviro 3' -> 'Integrations' -> 'Photon Integration')");
                GUILayout.Space(10);
                if (GUILayout.Button("Deactivate Photon Support"))
                {
                    RemoveDefineSymbol("ENVIRO_PHOTON_SUPPORT");
                }
#else
                if (GUILayout.Button("Activate Photon Support"))
                {
                    AddDefineSymbol("ENVIRO_PHOTON_SUPPORT");
                }
                if (GUILayout.Button("Deactivate Photon Support"))
                {
                    RemoveDefineSymbol("ENVIRO_PHOTON_SUPPORT");
                }
#endif
                GUILayout.EndVertical();
                //////////

            }
            GUILayout.EndVertical();
            ApplyChanges();
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroManagerInspector.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMicrosplatIntegration.cs---------------


ï»¿using UnityEngine;
using System.Collections;


namespace Enviro
{

    [ExecuteInEditMode] 
    [AddComponentMenu("Enviro 3/Integrations/MicroSplat Integration")]
    public class EnviroMicrosplatIntegration : MonoBehaviour  
    { 
        [Header("Wetness")]
        public bool UpdateWetness = true;
        [Range(0f, 1f)]
        public float minWetness = 0f;
        [Range(0f, 1f)]
        public float maxWetness = 1f;
        [Header("Rain Ripples")]
        public bool UpdateRainRipples = true;
        [Header("Puddle Settings")]
        public bool UpdatePuddles = true;
        [Header("Stream Settings")] 
        public bool UpdateStreams = true;
        [Header("Snow Settings")]
        public bool UpdateSnow = true;
      //  [Header("Wind Settings")]
      //  public bool UpdateWindStrength = true;
      //  public bool UpdateWindRotation = true;

        void Update () 
        {
            if (EnviroManager.instance == null || EnviroManager.instance.Environment == null)
                return;

            if (UpdateSnow){
                Shader.SetGlobalFloat ("_Global_SnowLevel", EnviroManager.instance.Environment.Settings.snow);
            }

            if (UpdateWetness) {
                float currWetness = Mathf.Clamp(EnviroManager.instance.Environment.Settings.wetness, minWetness, maxWetness);
                Shader.SetGlobalVector("_Global_WetnessParams", new Vector2(currWetness, maxWetness));
            }
                
            if (UpdatePuddles) {
                Shader.SetGlobalFloat("_Global_PuddleParams", EnviroManager.instance.Environment.Settings.wetness);
            }

            if (UpdateRainRipples) 
            {
                if(EnviroManager.instance.Environment != null)
                {
                    float rainIntensity = Mathf.Clamp(EnviroManager.instance.Environment.Settings.wetness,0f,1f);
                    Shader.SetGlobalFloat("_Global_RainIntensity", rainIntensity);
                }
            }

            if (UpdateStreams) {
                Shader.SetGlobalFloat("_Global_StreamMax", EnviroManager.instance.Environment.Settings.wetness);
            }
        }
    }
} 

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMicrosplatIntegration.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMirrorPlayer.cs---------------


ï»¿/// <summary>
/// This component can be used to synchronize time and weather in games where server is a player too.
/// </summary>

using UnityEngine;
using System.Collections;
#if ENVIRO_MIRROR_SUPPORT
using Mirror;
#endif

namespace Enviro
{
#if ENVIRO_MIRROR_SUPPORT
	[AddComponentMenu("Enviro 3/Integrations/Mirror Player")]
	[RequireComponent(typeof (NetworkIdentity))]
	public class EnviroMirrorPlayer : NetworkBehaviour 
	{
#else
	public class EnviroMirrorPlayer : MonoBehaviour 
	{
#endif
	#if ENVIRO_MIRROR_SUPPORT
		public bool assignOnStart = true;
		public bool findSceneCamera = true;

		public Camera Camera;
		
		public void Start()
		{
			// Deactivate if it isn't ours!
			if (!isLocalPlayer && !isServer) {
				this.enabled = false;
				return;
			}
	
			if (Camera == null && findSceneCamera)
				Camera = Camera.main;

			if (isLocalPlayer) 
			{
				if (assignOnStart && Camera != null)
					EnviroManager.instance.Camera = Camera;

				Cmd_RequestSeason ();
				Cmd_RequestCurrentWeather ();
			}
		}
			
		[Command]
		void Cmd_RequestSeason ()
		{
			if(EnviroManager.instance.Environment != null)
			    RpcRequestSeason((int)EnviroManager.instance.Environment.Settings.season);
		}

		[ClientRpc]
		void RpcRequestSeason (int season)
		{
			if(EnviroManager.instance.Environment != null)
			   EnviroManager.instance.Environment.ChangeSeason((EnviroEnvironment.Seasons)season);
		}

		[Command]
		void Cmd_RequestCurrentWeather ()
		{
			if(EnviroManager.instance.Weather != null)
			{
				//for (int i = 0; i < EnviroSkyMgr.instance.Weather.zones.Count; i++) 
				//{
					for (int w = 0; w < EnviroManager.instance.Weather.Settings.weatherTypes.Count; w++)
					{
						if (EnviroManager.instance.Weather.Settings.weatherTypes[w] == EnviroManager.instance.Weather.targetWeatherType)
							RpcRequestCurrentWeather(w);
					}
				//}
			}
		}

		[ClientRpc]
		void RpcRequestCurrentWeather (int weather)
		{
			if(EnviroManager.instance.Weather != null)
				EnviroManager.instance.Weather.ChangeWeatherInstant(EnviroManager.instance.Weather.Settings.weatherTypes[weather]);
		}

	#endif
	}
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMirrorPlayer.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMirrorServer.cs---------------


ï»¿/// <summary>
/// This component can be used to synchronize time and weather.
/// </summary>

using UnityEngine;
#if ENVIRO_MIRROR_SUPPORT
using Mirror;
#endif
using System.Collections;
namespace Enviro
{
	#if ENVIRO_MIRROR_SUPPORT
	[AddComponentMenu("Enviro 3/Integrations/Mirror Server")]
	[RequireComponent(typeof (NetworkIdentity))]
	public class EnviroMirrorServer : NetworkBehaviour {
	#else
	public class EnviroMirrorServer : MonoBehaviour {
	#endif
	#if ENVIRO_MIRROR_SUPPORT
		public float updateSmoothing = 15f;

		[SyncVar] private float networkHours;
		[SyncVar] private int networkDays;
		[SyncVar] private int networkMonths;
		[SyncVar] private int networkYears; 

		public override void OnStartServer()
		{
			EnviroManager.instance.OnSeasonChanged += (EnviroEnvironment.Seasons season) => {
				SendSeasonToClient (season);
			};
			EnviroManager.instance.OnZoneWeatherChanged += (EnviroWeatherType type, EnviroZone zone) => {
				SendWeatherToClient (type, zone);
			};
		}

		public void Start ()
		{
			if (!isServer) 
			{
				if(EnviroManager.instance.Time != null)
				   EnviroManager.instance.Time.Settings.simulate = false;

				if(EnviroManager.instance.Weather != null)
				   EnviroManager.instance.Weather.globalAutoWeatherChange = false;
				
				if(EnviroManager.instance.Environment != null)
				   EnviroManager.instance.Environment.Settings.changeSeason = false;
			}
		}

		void SendWeatherToClient (EnviroWeatherType w, EnviroZone z)
		{
			int weatherID = 0;
			int zoneID = -1;

			for(int i = 0; i < EnviroManager.instance.Weather.Settings.weatherTypes.Count; i++)
			{
				if (EnviroManager.instance.Weather.Settings.weatherTypes [i] == w)
					weatherID = i;
			}

			for (int i = 0; i < EnviroManager.instance.zones.Count; i++) 
			{
				if (EnviroManager.instance.zones [i] == z)
					zoneID = i;
			}
			RpcWeatherUpdate(weatherID,zoneID);
		}

		void SendSeasonToClient (EnviroEnvironment.Seasons s)
		{
			RpcSeasonUpdate((int)s);
		}

		[ClientRpc]
		void RpcSeasonUpdate (int season)
		{
			if(EnviroManager.instance.Environment != null)
			   EnviroManager.instance.Environment.ChangeSeason((EnviroEnvironment.Seasons)season);
		}

		[ClientRpc]
		void RpcWeatherUpdate (int weather, int zone)
		{
			if(EnviroManager.instance.Weather != null)
			{		   
			   	if(zone == -1) 
					EnviroManager.instance.Weather.ChangeWeather(weather);
				else
					EnviroManager.instance.Weather.ChangeZoneWeather(weather,zone);
			}
		}


		void Update ()
		{
			if (EnviroManager.instance == null || EnviroManager.instance.Time == null)
				return;

			if (!isServer) 
			{
				if (networkHours < 1f && EnviroManager.instance.Time.GetTimeOfDay() > 23f)
					EnviroManager.instance.Time.SetTimeOfDay(networkHours);

				EnviroManager.instance.Time.SetTimeOfDay(Mathf.Lerp(EnviroManager.instance.Time.GetTimeOfDay(), (float)networkHours, Time.deltaTime * updateSmoothing));
				EnviroManager.instance.Time.years = networkYears;
				EnviroManager.instance.Time.months = networkMonths;
				EnviroManager.instance.Time.days = networkDays;

			} else {
				networkHours = EnviroManager.instance.Time.GetTimeOfDay();
				networkDays = EnviroManager.instance.Time.days;
				networkMonths = EnviroManager.instance.Time.months;
				networkYears = EnviroManager.instance.Time.years;
			}

		}
	#endif
	}
}



#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroMirrorServer.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System; 

[Serializable]
public class EnviroModule : ScriptableObject
{
    public bool showModuleInspector = false;
    public bool showSaveLoad = false;
    public bool active = true;

    public virtual void Enable()
    {

    }

    public virtual void Disable()
    {

    }
    
    public virtual void UpdateModule ()
    {
        
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{

 [CustomEditor(typeof(EnviroModule))] 
 public class EnviroModuleEditor : EnviroBaseInspector
 { 
    public SerializedProperty preset;
 
    public virtual void OnEnable() 
    {
        //SetupGUIStyles (); 
    }

    public void SetActiveGUIColor(bool active)
    {
        if(active)
        GUI.backgroundColor = new Color(1f,1f,2f,1f);
    }

    public void UnsetActiveGUIColor()
    {
        GUI.backgroundColor = Color.white;
    }
    
    public void DisableInputStart()
    {
        if(EnviroManager.instance != null && EnviroManager.instance.Weather != null)
        {
            if(EnviroManager.instance.Weather.targetWeatherType != null)
                EditorGUI.BeginDisabledGroup(true);
        }
    }

    public void DisableInputEnd()
    {
        EditorGUI.EndDisabledGroup();
    }

    public void DisableInputStartQuality()
    {
        if(EnviroManager.instance != null && EnviroManager.instance.Quality != null)
        {
            if(EnviroManager.instance.Quality.Settings.defaultQuality != null)
                EditorGUI.BeginDisabledGroup(true);
        }
    }

    public void DisableInputEndQuality()
    {
        EditorGUI.EndDisabledGroup();
    }

    public override void OnInspectorGUI()
    {
         SetupGUIStyles (); 
    }
 }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroPhotonIntegration.cs---------------


ï»¿using UnityEngine;
using System.Collections;

#if ENVIRO_PHOTON_SUPPORT
using Photon.Pun;
#endif

namespace Enviro
{
	#if ENVIRO_PHOTON_SUPPORT
	[RequireComponent(typeof (PhotonView))]
	[AddComponentMenu("Enviro 3/Integrations/Photon Integration")]
	public class EnviroPhotonIntegration : MonoBehaviourPunCallbacks, IPunObservable
	{ 
	#else
	public class EnviroPhotonIntegration : MonoBehaviour
	{

	#endif
	#if ENVIRO_PHOTON_SUPPORT
		public ViewSynchronization synchronizationType = ViewSynchronization.Unreliable;
		public float updateSmoothing = 15f;
		private float networkHours;

		void Start () 
		{
			if(EnviroManager.instance != null && EnviroManager.instance.Time != null)
			   networkHours = EnviroManager.instance.Time.GetTimeOfDay();
			
			photonView.ObservedComponents[0] = this;
			photonView.Synchronization = synchronizationType;
		}

		public override void OnJoinedRoom()
		{
			if (PhotonNetwork.IsMasterClient) 
			{
				EnviroManager.instance.OnZoneWeatherChanged += (EnviroWeatherType type, EnviroZone zone) => {
					SendWeatherToClient (type, zone);
				};

				EnviroManager.instance.OnSeasonChanged += (EnviroEnvironment.Seasons season) => {
					SendSeasonToClient (season);
				};
			} 
			else 
			{
				if(EnviroManager.instance.Weather != null)
				   EnviroManager.instance.Weather.globalAutoWeatherChange = false;

				if(EnviroManager.instance.Time != null)
				   EnviroManager.instance.Time.Settings.simulate = false;

				if(EnviroManager.instance.Environment != null)
				   EnviroManager.instance.Environment.Settings.changeSeason = false;

				StartCoroutine (GetWeather ());
			}
		}

		IEnumerator GetWeather ()
		{
			yield return 0;
			photonView.RPC("GetWeatherAndSeason", RpcTarget.MasterClient);
		}

		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
			if(EnviroManager.instance.Time == null)
			   return;
 
			if (stream.IsWriting) 
			{
				stream.SendNext(EnviroManager.instance.Time.GetTimeOfDay());
				stream.SendNext(EnviroManager.instance.Time.days);
				stream.SendNext(EnviroManager.instance.Time.months);
				stream.SendNext(EnviroManager.instance.Time.years);
			} 
			else 
			{
				networkHours = (float) stream.ReceiveNext();
				EnviroManager.instance.Time.days = (int) stream.ReceiveNext();
				EnviroManager.instance.Time.months = (int) stream.ReceiveNext(); 
				EnviroManager.instance.Time.years = (int) stream.ReceiveNext();
			}
		} 


		void SendWeatherToClient (EnviroWeatherType type, EnviroZone zone)
		{
			int weatherID = 0;
			int zoneID = -1;

			for(int i = 0; i < EnviroManager.instance.Weather.Settings.weatherTypes.Count; i++)
			{
				if (EnviroManager.instance.Weather.Settings.weatherTypes [i] == type)
					weatherID = i;
			}

			for (int i = 0; i < EnviroManager.instance.zones.Count; i++) 
			{
				if (EnviroManager.instance.zones [i] == zone)
					zoneID = i;
			}
	
			photonView.RPC("SendWeatherUpdate", RpcTarget.OthersBuffered,weatherID,zoneID);
		}

		void SendSeasonToClient (EnviroEnvironment.Seasons s)
		{
			photonView.RPC("SendSeasonUpdate",RpcTarget.OthersBuffered,(int)s);
		}

		[PunRPC]
		void GetWeatherAndSeason ()
		{
			if(EnviroManager.instance.Weather != null)
			{
				for (int i = 0; i < EnviroManager.instance.zones.Count; i++) 
				{
					SendWeatherToClient(EnviroManager.instance.zones[i].currentWeatherType, EnviroManager.instance.zones[i]);
				}

				SendWeatherToClient(EnviroManager.instance.Weather.targetWeatherType, null);
			}

			if(EnviroManager.instance.Environment != null)
			   SendSeasonToClient(EnviroManager.instance.Environment.Settings.season);
		}



		[PunRPC]
		void SendWeatherUpdate (int id, int zone) 
		{
			if(EnviroManager.instance.Weather != null)
			{
				if(zone == -1)
					EnviroManager.instance.Weather.ChangeWeather(id);
				else
					EnviroManager.instance.Weather.ChangeZoneWeather(id,zone);
			}
		}

		[PunRPC]
		void SendSeasonUpdate (int id) 
		{
			if(EnviroManager.instance.Environment != null)
			return;

			switch (id) 
			{
			case 0:
					EnviroManager.instance.Environment.Settings.season = EnviroEnvironment.Seasons.Spring;
			break;

			case 1:
					EnviroManager.instance.Environment.Settings.season = EnviroEnvironment.Seasons.Summer;
			break;

			case 2:
					EnviroManager.instance.Environment.Settings.season = EnviroEnvironment.Seasons.Autumn;
			break;

			case 3:
					EnviroManager.instance.Environment.Settings.season = EnviroEnvironment.Seasons.Winter;
			break;
			}
		}

		void Update ()
		{

			if (EnviroManager.instance == null || EnviroManager.instance.Time == null)
				return;

			if (!PhotonNetwork.IsMasterClient) 
			{
				if (networkHours < 0.5f && EnviroManager.instance.Time.GetTimeOfDay() > 23f)
					EnviroManager.instance.Time.SetTimeOfDay(networkHours);

				EnviroManager.instance.Time.SetTimeOfDay(Mathf.Lerp (EnviroManager.instance.Time.GetTimeOfDay(), (float)networkHours, Time.deltaTime * updateSmoothing));
			}

		}
	#endif
	}
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroPhotonIntegration.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQuality.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
 

namespace Enviro
{

	[Serializable]   
	public class EnviroVolumetricCloudsQualitySettings
	{
		public bool volumetricClouds = true;
		public bool dualLayer = false;
        public int downsampling = 4;
		public int stepsLayer1 = 128;
		public int stepsLayer2 = 64;
        public float blueNoiseIntensity = 1f;
		public float reprojectionBlendTime = 10f; 
		public float lodDistance = 0.25f;
	} 

	[Serializable]   
	public class EnviroFlatCloudsQualitySettings
	{
      public bool cirrusClouds = true;
	  public bool flatClouds = true;
	}

	[Serializable]   
	public class EnviroAuroraQualitySettings
	{
      public bool aurora = true;
	  [Range(6,32)]
	  public int steps = 32;
	}

	[Serializable]   
	public class EnviroFogQualitySettings
	{
		public bool fog = true; 
		public bool volumetrics = true;
		public bool unityFog = false;
		public EnviroFogSettings.Quality quality;
		[Range(16,96)]
		public int steps = 32;
	}

	[Serializable]  
	public class EnviroQuality : ScriptableObject
	{
		//Inspector 
		public bool showEditor, showVolumeClouds, showFog, showFlatClouds, showEffects, showAurora;
		//Volumetric Clouds
		public EnviroVolumetricCloudsQualitySettings volumetricCloudsOverride;
		public EnviroFogQualitySettings fogOverride;
		public EnviroFlatCloudsQualitySettings flatCloudsOverride;
		public EnviroAuroraQualitySettings auroraOverride;
	}


	public class EnviroQualityCreation 
	{
		#if UNITY_EDITOR
		[UnityEditor.MenuItem("Assets/Create/Enviro3/Quality")]
		#endif 
		public static EnviroQuality CreateMyAsset()
		{
			EnviroQuality wpreset = ScriptableObject.CreateInstance<EnviroQuality>();
		#if UNITY_EDITOR
			// Create and save the new profile with unique name
			string path = UnityEditor.AssetDatabase.GetAssetPath (UnityEditor.Selection.activeObject);
			if (path == "")  
			{
				path = EnviroHelper.assetPath;
			} 
			string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath (path + "/New " + "Quality" + ".asset");
			UnityEditor.AssetDatabase.CreateAsset (wpreset, assetPathAndName);
			UnityEditor.AssetDatabase.SaveAssets ();
			UnityEditor.AssetDatabase.Refresh();
		#endif
			return wpreset;
		}
	}
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQuality.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQualityModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroQualities
    {   
        public EnviroQuality defaultQuality;
        public List<EnviroQuality> Qualities = new List<EnviroQuality>();
    } 

    [Serializable]
    public class EnviroQualityModule : EnviroModule
    {   
        public Enviro.EnviroQualities Settings = new EnviroQualities();
        public EnviroQualityModule preset;
        public bool showQualityControls;

 
        public override void Enable()
        {
            base.Enable();

            //Make sure that we always have at least one quality profile!
            if(Settings.defaultQuality == null)
            {
                if(Settings.Qualities.Count > 0)
                { 
                    Settings.defaultQuality = Settings.Qualities[0];
                }
                else
                {
                    CreateNewQuality();
                    Settings.defaultQuality = Settings.Qualities[0];
                }
            }
        }

        public override void UpdateModule ()
        { 
             if(EnviroManager.instance == null)
               return;
               
            if(Settings.defaultQuality != null)
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                {
                    EnviroManager.instance.VolumetricClouds.settingsQuality.volumetricClouds = Settings.defaultQuality.volumetricCloudsOverride.volumetricClouds; 
                    EnviroManager.instance.VolumetricClouds.settingsGlobal.dualLayer = Settings.defaultQuality.volumetricCloudsOverride.dualLayer; 
                    EnviroManager.instance.VolumetricClouds.settingsQuality.downsampling = Settings.defaultQuality.volumetricCloudsOverride.downsampling;
                    EnviroManager.instance.VolumetricClouds.settingsQuality.stepsLayer1 = Settings.defaultQuality.volumetricCloudsOverride.stepsLayer1;
                    EnviroManager.instance.VolumetricClouds.settingsQuality.stepsLayer2 = Settings.defaultQuality.volumetricCloudsOverride.stepsLayer2;
                    EnviroManager.instance.VolumetricClouds.settingsQuality.blueNoiseIntensity = Settings.defaultQuality.volumetricCloudsOverride.blueNoiseIntensity;
                    EnviroManager.instance.VolumetricClouds.settingsQuality.reprojectionBlendTime = Settings.defaultQuality.volumetricCloudsOverride.reprojectionBlendTime;
                    EnviroManager.instance.VolumetricClouds.settingsQuality.lodDistance = Settings.defaultQuality.volumetricCloudsOverride.lodDistance;
                }  
 
                if(EnviroManager.instance.Fog != null)
                {
                    EnviroManager.instance.Fog.Settings.fog = Settings.defaultQuality.fogOverride.fog;
                    EnviroManager.instance.Fog.Settings.volumetrics = Settings.defaultQuality.fogOverride.volumetrics;
                    EnviroManager.instance.Fog.Settings.unityFog = Settings.defaultQuality.fogOverride.unityFog;
                    EnviroManager.instance.Fog.Settings.quality = Settings.defaultQuality.fogOverride.quality;
                    EnviroManager.instance.Fog.Settings.steps = Settings.defaultQuality.fogOverride.steps;
                }

                if(EnviroManager.instance.FlatClouds != null)
                {
                    EnviroManager.instance.FlatClouds.settings.useFlatClouds = Settings.defaultQuality.flatCloudsOverride.flatClouds;
                    EnviroManager.instance.FlatClouds.settings.useCirrusClouds = Settings.defaultQuality.flatCloudsOverride.cirrusClouds;
                }

                if(EnviroManager.instance.Aurora != null)
                {
                    EnviroManager.instance.Aurora.Settings.useAurora = Settings.defaultQuality.auroraOverride.aurora;
                    EnviroManager.instance.Aurora.Settings.auroraSteps = Settings.defaultQuality.auroraOverride.steps;
                }

            }
        } 

        
        public void CleanupQualityList() 
        {
            for (int i = 0; i < Settings.Qualities.Count; i++)
            {
                if(Settings.Qualities[i] == null)
                    Settings.Qualities.RemoveAt(i);
            } 
        } 
        
        //Add new or assigned quality
        public void CreateNewQuality()
        {
            EnviroQuality quality = EnviroQualityCreation.CreateMyAsset();
            Settings.Qualities.Add(quality);
        }

        /// Removes the quality from the list.
        public void RemoveQuality(EnviroQuality quality)
        { 
            Settings.Qualities.Remove(quality);
        }


        //Save and Load 
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroQualities>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }
 
        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroQualityModule t =  ScriptableObject.CreateInstance<EnviroQualityModule>();
        t.name = "Quality Module Preset";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroQualities>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroQualityModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroQualities>(JsonUtility.ToJson(Settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQualityModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQualityModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroQualityModule))]
    public class EnviroQualityModuleEditor : EnviroModuleEditor
    {  
        private EnviroQualityModule myTarget; 

        private int controlID = -101;

        //Properties Cirrus
       // private SerializedProperty useCirrusClouds;

        //On Enable
        public override void OnEnable()
        {
            base.OnEnable();

            if(!target)
                return;

            myTarget = (EnviroQualityModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            //useCirrusClouds = serializedObj.FindProperty("settings.useCirrusClouds");
        }  

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

             base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Quality", headerFoldout);
             
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Quality); 
                DestroyImmediate(this);
                return;
            }  
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                Object selectedObject = null;
                         
                if(GUILayout.Button("Add"))
                {
                   controlID = EditorGUIUtility.GetControlID (FocusType.Passive);
                   EditorGUIUtility.ShowObjectPicker<EnviroQuality>(null,false,"",controlID);
                }

                string commandName = Event.current.commandName;

                if (commandName == "ObjectSelectorClosed" && EditorGUIUtility.GetObjectPickerControlID() == controlID) 
                {
                    selectedObject = EditorGUIUtility.GetObjectPickerObject ();
                    
                    bool add = true;
                    
                    for (int i = 0; i < myTarget.Settings.Qualities.Count; i++)
                    {
                        if((EnviroQuality)selectedObject == myTarget.Settings.Qualities[i])
                        add = false; 
                    }

                    if(add)
                      myTarget.Settings.Qualities.Add((EnviroQuality)selectedObject);

                      controlID = -101;
                }

                if(GUILayout.Button("Create New"))
                {
                   myTarget.CreateNewQuality();
                } 

                myTarget.CleanupQualityList();
                
                for (int i = 0; i < myTarget.Settings.Qualities.Count; i++) 
                    {       
                        EnviroQuality q =  myTarget.Settings.Qualities[i];
                        
                        if(q == myTarget.Settings.defaultQuality)
                        GUI.backgroundColor = new Color(0.0f,0.5f,0.0f,1f);      
                        GUILayout.BeginVertical("",boxStyleModified);
                        GUI.backgroundColor = Color.white;

                        EditorGUILayout.BeginHorizontal();
                        q.showEditor = GUILayout.Toggle(q.showEditor, q.name, headerFoldout);
                        GUILayout.FlexibleSpace();

                        if(q != myTarget.Settings.defaultQuality)
                        {
                            if(GUILayout.Button("Set Default", EditorStyles.miniButtonRight,GUILayout.Width(75), GUILayout.Height(18)))
                            {
                                myTarget.Settings.defaultQuality = q;
                                EditorUtility.SetDirty(q);
                            } 
                        }
                        if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                        {
                            myTarget.RemoveQuality(q);
                        } 
                                 
                        EditorGUILayout.EndHorizontal(); 

                        if(q.showEditor)
                        {
                            GUILayout.BeginVertical("",boxStyleModified);
                            
                            EnviroQuality quality = myTarget.Settings.Qualities[i];

                            q.showVolumeClouds = GUILayout.Toggle(q.showVolumeClouds, "Volumetric Clouds", headerFoldout);
                           
                            if(q.showVolumeClouds)
                            {
                                Undo.RecordObject(quality, "Quality Clouds Changed");
                                quality.volumetricCloudsOverride.volumetricClouds = EditorGUILayout.Toggle("Volumetric Clouds",  quality.volumetricCloudsOverride.volumetricClouds);
                                quality.volumetricCloudsOverride.dualLayer = EditorGUILayout.Toggle("Dual Layer", quality.volumetricCloudsOverride.dualLayer);
                                GUILayout.Space(5);
                                quality.volumetricCloudsOverride.downsampling = EditorGUILayout.IntSlider("Downsampling",  quality.volumetricCloudsOverride.downsampling, 1,6);
                                quality.volumetricCloudsOverride.stepsLayer1 = EditorGUILayout.IntSlider("Steps Layer 1",  quality.volumetricCloudsOverride.stepsLayer1, 32,256);
                                quality.volumetricCloudsOverride.stepsLayer2 = EditorGUILayout.IntSlider("Steps Layer 2",  quality.volumetricCloudsOverride.stepsLayer2, 32,256);
                                GUILayout.Space(5); 
                                quality.volumetricCloudsOverride.blueNoiseIntensity = EditorGUILayout.Slider("Blue Noise Intensity",  quality.volumetricCloudsOverride.blueNoiseIntensity, 0f,2f);
                                quality.volumetricCloudsOverride.reprojectionBlendTime = EditorGUILayout.Slider("Reprojection Blending",  quality.volumetricCloudsOverride.reprojectionBlendTime, 0f,10f);
                                quality.volumetricCloudsOverride.lodDistance = EditorGUILayout.Slider("LOD",  quality.volumetricCloudsOverride.lodDistance, 0f,1f); 
                            }  
                            GUILayout.EndVertical();
 
                            GUILayout.BeginVertical("",boxStyleModified);
                            q.showFog = GUILayout.Toggle(q.showFog, "Fog", headerFoldout);
                           
                            if(q.showFog)
                            {  
                                Undo.RecordObject(quality, "Quality Fog Changed");
                                quality.fogOverride.fog = EditorGUILayout.Toggle("Fog",  quality.fogOverride.fog);
                                quality.fogOverride.volumetrics = EditorGUILayout.Toggle("Volumetrics",  quality.fogOverride.volumetrics);
                            #if !ENVIRO_HDRP
                                quality.fogOverride.unityFog = EditorGUILayout.Toggle("Unity Fog",  quality.fogOverride.unityFog);
                            #endif
                                quality.fogOverride.quality = (EnviroFogSettings.Quality)EditorGUILayout.EnumPopup("Quality",quality.fogOverride.quality);
                                quality.fogOverride.steps = EditorGUILayout.IntSlider("Steps",  quality.fogOverride.steps, 16,96);
                            }      
                            GUILayout.EndVertical();  

                            GUILayout.BeginVertical("",boxStyleModified);
                            q.showFlatClouds = GUILayout.Toggle(q.showFlatClouds, "Flat Clouds", headerFoldout);
                           
                            if(q.showFlatClouds)
                            {  
                                Undo.RecordObject(quality, "Quality FlatClouds Changed");
                                quality.flatCloudsOverride.flatClouds = EditorGUILayout.Toggle("Flat Clouds",   quality.flatCloudsOverride.flatClouds);
                                quality.flatCloudsOverride.cirrusClouds = EditorGUILayout.Toggle("Cirrus Clouds",   quality.flatCloudsOverride.cirrusClouds);
                            }      
                            GUILayout.EndVertical();  

                            GUILayout.BeginVertical("",boxStyleModified);
                            q.showAurora = GUILayout.Toggle(q.showAurora, "Aurora", headerFoldout);
                           
                            if(q.showAurora)
                            {  
                                Undo.RecordObject(quality, "Quality Aurora Changed");
                                quality.auroraOverride.aurora = EditorGUILayout.Toggle("Aurora",   quality.auroraOverride.aurora);
                                quality.auroraOverride.steps = EditorGUILayout.IntSlider("Steps",  quality.auroraOverride.steps, 6,32);
                            }      
                            GUILayout.EndVertical();


                            EditorUtility.SetDirty(quality);                                  
                        }                
                        GUILayout.EndVertical(); 
                        if(q.showEditor)                           
                          GUILayout.Space(10);   
                    }
                GUILayout.EndVertical(); 

                GUILayout.Space(10);

                // Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }

                    GUILayout.EndHorizontal();

     
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();
 
            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroQualityModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionProbe.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
#if ENVIRO_HDRP
using UnityEngine.Rendering.HighDefinition;
#endif

namespace Enviro 
{
    [AddComponentMenu("Enviro 3/Reflection Probe")]
    [RequireComponent(typeof(ReflectionProbe)), ExecuteInEditMode]
    public class EnviroReflectionProbe : MonoBehaviour
    {
        #region Public Var
        #region Standalone Settings
        public bool standalone = false;
        public bool updateReflectionOnGameTime = true;
        public float reflectionsUpdateTreshhold = 0.025f;
        public bool useTimeSlicing = true;
        #endregion
        public Camera renderCam;
        [HideInInspector]
        public ReflectionProbe myProbe;
        public bool customRendering = false;

    #if !ENVIRO_HDRP
        private EnviroRenderer enviroRenderer;
    #endif
        public bool useFog = false;
        #endregion

        #region Private Var
        // Privates
        public Camera bakingCam;
        public int renderId = -1;
        private bool currentMode = false;
        private int currentRes;
        private RenderTexture cubemap;
        private RenderTexture finalCubemap;
        private RenderTexture mirrorTexture;
        private RenderTexture renderTexture;
        private GameObject renderCamObj;
        private Material mirror = null;
        private Material bakeMat = null;
        private Material convolutionMat;
        private Coroutine refreshing;

        private int renderID;

    #if ENVIRO_HDRP
        public HDProbe hdprobe;
    #endif
        private static Quaternion[] orientations = new Quaternion[]
        {
                Quaternion.LookRotation(Vector3.right, Vector3.down),
                Quaternion.LookRotation(Vector3.left, Vector3.down),
                Quaternion.LookRotation(Vector3.up, Vector3.forward),
                Quaternion.LookRotation(Vector3.down, Vector3.back),
                Quaternion.LookRotation(Vector3.forward, Vector3.down),
                Quaternion.LookRotation(Vector3.back, Vector3.down)
        };

        private double lastRelfectionUpdate;
        #endregion
        ////////
        void OnEnable()
        {
            myProbe = GetComponent<ReflectionProbe>();

    #if ENVIRO_HDRP
            if (EnviroManager.instance != null)
            {
                hdprobe = GetComponent<HDProbe>();

                if(!standalone && myProbe != null)
                    myProbe.enabled = true;

                if (customRendering)
                {
                    if (hdprobe != null)
                    {
                        hdprobe.mode = ProbeSettings.Mode.Custom;
                        CreateCubemap();
                        CreateTexturesAndMaterial();
                        CreateRenderCamera();
                        currentRes = myProbe.resolution;
                        StartCoroutine(RefreshFirstTime());
                    }
                }
                else
                {
                    if (hdprobe != null)
                    {
                        hdprobe.mode = ProbeSettings.Mode.Realtime;
                        hdprobe.realtimeMode = ProbeSettings.RealtimeMode.OnDemand;
                        hdprobe.RequestRenderNextUpdate();
                    }
                }
            }
    #else

            if (!standalone && myProbe != null)
                myProbe.enabled = true;


            if (customRendering)
            {
                myProbe.mode = ReflectionProbeMode.Custom;
                myProbe.refreshMode = ReflectionProbeRefreshMode.ViaScripting;
                CreateCubemap();
                CreateTexturesAndMaterial();
                CreateRenderCamera();
                currentRes = myProbe.resolution;
                StartCoroutine(RefreshFirstTime());        
            }
            else
            {
                myProbe.mode = ReflectionProbeMode.Realtime;
                myProbe.refreshMode = ReflectionProbeRefreshMode.ViaScripting;
                //StartCoroutine(RefreshUnity());
                renderId = myProbe.RenderProbe();
            }
    #endif
        }
        void OnDisable()
        {
            Cleanup();

            if (!standalone && myProbe != null)
                myProbe.enabled = false;

            RenderSettings.defaultReflectionMode = UnityEngine.Rendering.DefaultReflectionMode.Skybox;
        }
        private void Cleanup()
        {
            if (refreshing != null)
                StopCoroutine(refreshing);

            if (cubemap != null)
            {
                if (renderCam != null)
                    renderCam.targetTexture = null;

                DestroyImmediate(cubemap);
            }

            if (renderCamObj != null)
                DestroyImmediate(renderCamObj);

            if (mirrorTexture != null)
                DestroyImmediate(mirrorTexture);

            if (renderTexture != null)
                DestroyImmediate(renderTexture);
        }
        // Creation
        private void CreateRenderCamera()
        {
            if (renderCamObj == null)
            {
                renderCamObj = new GameObject();
                renderCamObj.name = "Reflection Probe Cam";
                renderCamObj.hideFlags = HideFlags.HideAndDontSave;
                renderCam = renderCamObj.AddComponent<Camera>();
                renderCam.gameObject.SetActive(true);
                renderCam.cameraType = CameraType.Reflection;
                renderCam.fieldOfView = 90;
                renderCam.farClipPlane = myProbe.farClipPlane;
                renderCam.nearClipPlane = myProbe.nearClipPlane;
                renderCam.clearFlags = (CameraClearFlags)myProbe.clearFlags;
                renderCam.backgroundColor = myProbe.backgroundColor;
                renderCam.allowHDR = myProbe.hdr;
                renderCam.targetTexture = cubemap;
                renderCam.enabled = false;

    #if VEGETATION_STUDIO_PRO
        //     VegetationStudioManager.Instance.AddCamera(renderCam);
    #endif

    #if !ENVIRO_HDRP
                if (EnviroManager.instance != null)
                {
                    enviroRenderer = renderCamObj.AddComponent<EnviroRenderer>();
                }
    #endif
            }
        }
        private void UpdateCameraSettings()
        {
            if (renderCam != null)
            {
                renderCam.cullingMask = myProbe.cullingMask;
    #if !ENVIRO_HDRP
              if (EnviroManager.instance != null)
                {
                 //Update Quality
                }
    #endif

            }
        }
        private Camera CreateBakingCamera()
        {
            GameObject tempCam = new GameObject();
            tempCam.name = "Reflection Probe Cam";
            Camera cam = tempCam.AddComponent<Camera>();
            cam.enabled = false;
            cam.gameObject.SetActive(true);
            cam.cameraType = CameraType.Reflection;
            cam.fieldOfView = 90;
            cam.farClipPlane = myProbe.farClipPlane;
            cam.nearClipPlane = myProbe.nearClipPlane;
            cam.cullingMask = myProbe.cullingMask;
            cam.clearFlags = (CameraClearFlags)myProbe.clearFlags;
            cam.backgroundColor = myProbe.backgroundColor;
            cam.allowHDR = myProbe.hdr;
            cam.targetTexture = cubemap;
    #if !ENVIRO_HDRP
            if (EnviroManager.instance != null)
                {
                    enviroRenderer = renderCamObj.AddComponent<EnviroRenderer>();
                }
    #endif
            tempCam.hideFlags = HideFlags.HideAndDontSave;
            return cam;
        }
        private void CreateCubemap()
        {
            if (cubemap != null && myProbe.resolution == currentRes)
                return;

            if (cubemap != null)
            {
                cubemap.Release();
                DestroyImmediate(cubemap);
            }

            if (finalCubemap != null)
            {
                finalCubemap.Release();
                DestroyImmediate(finalCubemap);
            }
                

            int resolution = myProbe.resolution;

            currentRes = resolution; 
            RenderTextureFormat format = RenderTextureFormat.ARGBHalf;

            cubemap = new RenderTexture(resolution, resolution, 16, format, RenderTextureReadWrite.Linear);
            cubemap.dimension = TextureDimension.Cube;
            cubemap.useMipMap = true;
            cubemap.autoGenerateMips = false;
            cubemap.name = "Enviro Reflection Temp Cubemap";
            cubemap.filterMode = FilterMode.Trilinear;
            cubemap.Create();

            finalCubemap = new RenderTexture(resolution, resolution, 16, format, RenderTextureReadWrite.Linear);
            finalCubemap.dimension = TextureDimension.Cube;
            finalCubemap.useMipMap = true;
            finalCubemap.autoGenerateMips = false;
            finalCubemap.name = "Enviro Reflection Final Cubemap";
            finalCubemap.filterMode = FilterMode.Trilinear;
            finalCubemap.Create();
        }
        //Create the textures
        private void CreateTexturesAndMaterial()
        {
            if (mirror == null)
                mirror = new Material(Shader.Find("Hidden/Enviro/ReflectionProbe"));

            if (convolutionMat == null)
                convolutionMat = new Material(Shader.Find("Hidden/EnviroCubemapBlur"));

            int resolution = myProbe.resolution;

            RenderTextureFormat format = RenderTextureFormat.ARGBHalf;

            if (mirrorTexture == null || mirrorTexture.width != resolution || mirrorTexture.height != resolution)
            {
                if (mirrorTexture != null)
                    DestroyImmediate(mirrorTexture);

                mirrorTexture = new RenderTexture(resolution, resolution, 16, format, RenderTextureReadWrite.Linear);
                mirrorTexture.useMipMap = true;
                mirrorTexture.autoGenerateMips = false;
                mirrorTexture.name = "Enviro Reflection Mirror Texture";
                mirrorTexture.Create();
            }

            if (renderTexture == null || renderTexture.width != resolution || renderTexture.height != resolution)
            {
                if (renderTexture != null)
                    DestroyImmediate(renderTexture);

                renderTexture = new RenderTexture(resolution, resolution, 16, format, RenderTextureReadWrite.Linear);
                renderTexture.useMipMap = true;
                renderTexture.autoGenerateMips = false;
                renderTexture.name = "Enviro Reflection Target Texture";
                renderTexture.Create();
            }
        }
        // Refresh Methods
        public void RefreshReflection(bool timeSlice = false)
        {
    #if ENVIRO_HDRP
            if (customRendering)
            {
                if (refreshing != null)
                    return;

                CreateTexturesAndMaterial();

                if (renderCam == null)
                    CreateRenderCamera();

                UpdateCameraSettings();

                renderCam.transform.position = transform.position;
                renderCam.targetTexture = renderTexture;

                if (Application.isPlaying)
                {
                    if (!timeSlice)
                        refreshing = StartCoroutine(RefreshInstant(renderTexture, mirrorTexture));
                    else
                        refreshing = StartCoroutine(RefreshOvertime(renderTexture, mirrorTexture));
                }
                else
                {
                    refreshing = StartCoroutine(RefreshInstant(renderTexture, mirrorTexture));
                }
            }
            else
            {
            
                if(hdprobe != null)
                   hdprobe.RequestRenderNextUpdate();
            }
    #else
            if (customRendering)
            {
                if (refreshing != null)
                    return;

                CreateTexturesAndMaterial();

                if (renderCam == null)
                    CreateRenderCamera();

                UpdateCameraSettings();

                renderCam.transform.position = transform.position;
                renderCam.targetTexture = renderTexture;

                if (Application.isPlaying)
                {
                    if (!timeSlice)
                        refreshing = StartCoroutine(RefreshInstant(renderTexture, mirrorTexture));
                    else
                        refreshing = StartCoroutine(RefreshOvertime(renderTexture, mirrorTexture));
                }
                else
                {
                    refreshing = StartCoroutine(RefreshInstant(renderTexture, mirrorTexture));
                }
            } 
            else
            {
                renderId = myProbe.RenderProbe(); 
            }
    #endif
        }

        IEnumerator RefreshFirstTime()
        {
            yield return null;
            RefreshReflection(false);
            RefreshReflection(false);
        }


        public IEnumerator RefreshUnity()
        {
            yield return null;
            renderId = myProbe.RenderProbe();
        }


        public IEnumerator RefreshInstant(RenderTexture renderTex, RenderTexture mirrorTex)
        {
            CreateCubemap();

            yield return null;

            for (int face = 0; face < 6; face++)
            {
                renderCam.transform.rotation = orientations[face];
                renderCam.Render();

                if(mirrorTex != null)
                {
                    Graphics.Blit(renderTex, mirrorTex, mirror);
                    Graphics.CopyTexture(mirrorTex, 0, 0, cubemap, face, 0);   
                }   
            }

            ConvolutionCubemap();
    #if ENVIRO_HDRP
        if (hdprobe != null)
            hdprobe.SetTexture(ProbeSettings.Mode.Custom, finalCubemap);
    #else
            myProbe.customBakedTexture = finalCubemap;
    #endif
            refreshing = null;
        }

        /// <summary>
        /// Update Reflections with Time Slicing
        /// </summary>
        public IEnumerator RefreshOvertime(RenderTexture renderTex, RenderTexture mirrorTex)
        {
            CreateCubemap();

            for (int face = 0;  face < 6; face++)
            {
                yield return null;
                renderCam.transform.rotation = orientations[face];      
                renderCam.Render();

                if(mirrorTex != null)
                {         
                    Graphics.Blit(renderTex, mirrorTex, mirror);
                    Graphics.CopyTexture(mirrorTex, 0, 0, cubemap, face, 0);
                }
                //ClearTextures();           
            }

                ConvolutionCubemap();
    #if ENVIRO_HDRP
            if (hdprobe != null)
                hdprobe.SetTexture(ProbeSettings.Mode.Custom, finalCubemap);
    #else
                myProbe.customBakedTexture = finalCubemap;
    #endif
            refreshing = null;
        }

        /// <summary>
        /// Bakes one face per time into a render texture
        /// </summary>
        /// <param name="face"></param>
        /// <param name="res"></param>
        /// <returns></returns>
        public RenderTexture BakeCubemapFace(int face, int res)
        {
            if (bakeMat == null)
                bakeMat = new Material(Shader.Find("Hidden/Enviro/BakeCubemap"));

            if (bakingCam == null)
                bakingCam = CreateBakingCamera();

            bakingCam.transform.rotation = orientations[face];
            RenderTexture temp = RenderTexture.GetTemporary(res, res, 0, RenderTextureFormat.ARGBFloat);
            bakingCam.targetTexture = temp;
            bakingCam.Render();
            RenderTexture tex = new RenderTexture(res, res, 0, RenderTextureFormat.ARGBFloat);
            Graphics.Blit(temp, tex, bakeMat);
            RenderTexture.ReleaseTemporary(temp);
            return tex;
        }

        private void ClearTextures()
        {
            RenderTexture rt = RenderTexture.active;
            RenderTexture.active = renderTexture;
            GL.Clear(true, true, Color.clear);
            RenderTexture.active = mirrorTexture;
            GL.Clear(true, true, Color.clear);
            RenderTexture.active = rt;
        }
    

        //This is not a proper convolution and very hacky to get anywhere near of unity realtime reflection probe mip convolution.
        private void ConvolutionCubemap()
        {
            int mipCount = 7;

            GL.PushMatrix();
            GL.LoadOrtho();

            cubemap.GenerateMips();

            float texel = 1f;
            switch(finalCubemap.width)
            {

                case 16:
                texel = 1f;
                break;

                case 32:
                texel = 1f;
                break;

                case 64:
                texel = 2f;
                break;

                case 128:
                texel = 4f;
                break;

                case 256:
                texel = 8f;
                break;

                case 512:
                texel = 14f;
                break;

                case 1024:
                texel = 30f;
                break;
    
                case 2048:
                texel = 60f;
                break;
            }

            float res = finalCubemap.width;

            for (int mip = 0; mip < mipCount + 1; mip++)
            {
                //Copy each face
                Graphics.CopyTexture(cubemap, 0, mip, finalCubemap, 0, mip);
                Graphics.CopyTexture(cubemap, 1, mip, finalCubemap, 1, mip);
                Graphics.CopyTexture(cubemap, 2, mip, finalCubemap, 2, mip);
                Graphics.CopyTexture(cubemap, 3, mip, finalCubemap, 3, mip);
                Graphics.CopyTexture(cubemap, 4, mip, finalCubemap, 4, mip);
                Graphics.CopyTexture(cubemap, 5, mip, finalCubemap, 5, mip);

                int dstMip = mip + 1;

                if (dstMip == mipCount)
                    break;
            
                float texelSize = (texel * dstMip) / res;
             
                convolutionMat.SetTexture("_MainTex", finalCubemap);
                convolutionMat.SetFloat("_Texel", texelSize);        
                convolutionMat.SetFloat("_Level", mip);
                convolutionMat.SetPass(0);

                res *= 0.75f;

                // Positive X
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.PositiveX);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(1, 1, 1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(1, -1, 1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(1, -1, -1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(1, 1, -1);
                GL.Vertex3(1, 0, 1);
                GL.End();

                // Negative X
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.NegativeX);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(-1, 1, -1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(-1, -1, -1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(-1, -1, 1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(-1, 1, 1);
                GL.Vertex3(1, 0, 1);
                GL.End();

                // Positive Y
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.PositiveY);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(-1, 1, -1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(-1, 1, 1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(1, 1, 1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(1, 1, -1);
                GL.Vertex3(1, 0, 1);
                GL.End();

                // Negative Y
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.NegativeY);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(-1, -1, 1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(-1, -1, -1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(1, -1, -1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(1, -1, 1);
                GL.Vertex3(1, 0, 1);
                GL.End();

                // Positive Z
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.PositiveZ);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(-1, 1, 1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(-1, -1, 1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(1, -1, 1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(1, 1, 1);
                GL.Vertex3(1, 0, 1);
                GL.End();

                // Negative Z
                Graphics.SetRenderTarget(cubemap, dstMip, CubemapFace.NegativeZ);
                GL.Begin(GL.QUADS);
                GL.TexCoord3(1, 1, -1);
                GL.Vertex3(0, 0, 1);
                GL.TexCoord3(1, -1, -1);
                GL.Vertex3(0, 1, 1);
                GL.TexCoord3(-1, -1, -1);
                GL.Vertex3(1, 1, 1);
                GL.TexCoord3(-1, 1, -1);
                GL.Vertex3(1, 0, 1);
                GL.End();
            }

            GL.PopMatrix();

        }
        private void UpdateStandaloneReflection()
        {
            if ((EnviroManager.instance.Time.GetDateInHours() > lastRelfectionUpdate + reflectionsUpdateTreshhold ||EnviroManager.instance.Time.GetDateInHours() < lastRelfectionUpdate - reflectionsUpdateTreshhold) && updateReflectionOnGameTime)
            {
                lastRelfectionUpdate = EnviroManager.instance.Time.GetDateInHours();
                RefreshReflection(!useTimeSlicing);
            }
        }
        private void Update()
        {
            if (currentMode != customRendering)
            {
                currentMode = customRendering;

                if (customRendering)
                {
                    OnEnable();
                }
                else
                {
                    OnEnable();
                    Cleanup();
                }
            }

            if (EnviroManager.instance != null && standalone)
            {
                UpdateStandaloneReflection();
            
            }
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionProbe.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionProbeEditor.cs---------------


ï»¿using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;

namespace Enviro
{
    [CustomEditor(typeof(Enviro.EnviroReflectionProbe))]
    public class EnviroReflectionProbeEditor : Editor {

        GUIStyle boxStyle;
        GUIStyle boxStyleModified;
        GUIStyle wrapStyle;
        GUIStyle wrapStyle2;
        GUIStyle clearStyle;

        Enviro.EnviroReflectionProbe myTarget;

        public bool showAudio = false;
        public bool showFog = false;
        public bool showSeason = false;
        public bool showClouds = false;
        public bool showGeneral = false;
        public bool showPostProcessing = false;
        public bool showThirdParty = false;

        private Color boxColor1;

        SerializedObject serializedObj;

        void OnEnable()
        {
            myTarget = (Enviro.EnviroReflectionProbe)target;
            serializedObj = new SerializedObject (myTarget);
            boxColor1 = new Color(0.95f, 0.95f, 0.95f,1f);
        }

        public override void OnInspectorGUI ()
        {
            myTarget = (Enviro.EnviroReflectionProbe)target;
            serializedObj.UpdateIfRequiredOrScript ();

            //Set up the box style
            if (boxStyle == null)
            {
                boxStyle = new GUIStyle(GUI.skin.box);
                boxStyle.normal.textColor = GUI.skin.label.normal.textColor;
                boxStyle.fontStyle = FontStyle.Bold;
                boxStyle.alignment = TextAnchor.UpperLeft;
            }

            if (boxStyleModified == null)
            {
                boxStyleModified = new GUIStyle(EditorStyles.helpBox);
                boxStyleModified.normal.textColor = GUI.skin.label.normal.textColor;
                boxStyleModified.fontStyle = FontStyle.Bold;
                boxStyleModified.fontSize = 11;
                boxStyleModified.alignment = TextAnchor.UpperLeft;
            }

            //Setup the wrap style
            if (wrapStyle == null)
            {
                wrapStyle = new GUIStyle(GUI.skin.label);
                wrapStyle.fontStyle = FontStyle.Bold;
                wrapStyle.wordWrap = true;
            }

            if (wrapStyle2 == null)
            {
                wrapStyle2 = new GUIStyle(GUI.skin.label);
                wrapStyle2.fontStyle = FontStyle.Normal;
                wrapStyle2.wordWrap = true;
            }

            if (clearStyle == null) {
                clearStyle = new GUIStyle(GUI.skin.label);
                clearStyle.normal.textColor = GUI.skin.label.normal.textColor;
                clearStyle.fontStyle = FontStyle.Bold;
                clearStyle.alignment = TextAnchor.UpperRight;
            }


            GUILayout.BeginVertical(" Enviro - Reflection Probe", boxStyle);
            GUILayout.Space(30);
            GUI.backgroundColor = boxColor1;
            GUILayout.BeginVertical("Information", boxStyleModified);
            GUI.backgroundColor = Color.white;
            GUILayout.Space(20);
            EditorGUILayout.LabelField("Use this component to update your realtime reflection probes with Enviro Sky. You also can enable the 'Custom Rendering' to have enviro effects in your reflection probes!", wrapStyle2);
            EditorGUILayout.LabelField("Please enable 'Standalone Probe' if you use this component on your own places reflection probes.", wrapStyle2);      
            GUILayout.EndVertical();
            GUI.backgroundColor = boxColor1;
            GUILayout.BeginVertical("Setup", boxStyleModified);
            GUI.backgroundColor = Color.white;
            GUILayout.Space(20);
            myTarget.standalone = EditorGUILayout.Toggle("Standalone Probe", myTarget.standalone);
        
            if (myTarget.standalone)
            {
                GUILayout.Space(10);
    #if ENVIRO_HD
                GUI.backgroundColor = boxColor1;
                GUILayout.BeginVertical("Enviro Effects Rendering", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
                myTarget.customRendering = EditorGUILayout.Toggle("Render Enviro Effects", myTarget.customRendering);

                if(myTarget.customRendering)
                {
                    EditorGUI.BeginChangeCheck();
                    //myTarget.useFog = EditorGUILayout.Toggle("Use Fog", myTarget.useFog);
                    if (EditorGUI.EndChangeCheck())
                    {
                        serializedObj.ApplyModifiedProperties();
                    }
                }
                GUILayout.EndVertical();
    #endif
                GUI.backgroundColor = boxColor1;
                GUILayout.BeginVertical("Update Settings", boxStyleModified);
                GUI.backgroundColor = Color.white;
                GUILayout.Space(20);
            myTarget.reflectionsUpdateTreshhold = EditorGUILayout.FloatField("Update Treshold in GameTime Hours", myTarget.reflectionsUpdateTreshhold);
            if (myTarget.customRendering)
            {
                myTarget.useTimeSlicing = EditorGUILayout.Toggle("Use Time-Slicing", myTarget.useTimeSlicing);
            }
            GUILayout.EndVertical();
            }
            GUILayout.EndVertical();
            // END
            EditorGUILayout.EndVertical ();
            EditorUtility.SetDirty (target);
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionProbeEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionsModule.cs---------------


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroReflections
    {
        public enum GlobalReflectionResolution
        {
            R16,
            R32,
            R64,
            R128,
            R256,
            R512,
            R1024,
            R2048
        }

        public bool globalReflections = true;
        [Tooltip("Set if enviro reflection probe should use custom rendering setup. For example to include post effectsin birp.")]
        public bool customRendering = true;
        [Tooltip("Set to use custom timeslicing when rendered in custom mode.")]
        public bool customRenderingTimeSlicing = true;

        [Tooltip("Set if enviro reflection probe should update faces individual on different frames.")]
        public ReflectionProbeTimeSlicingMode globalReflectionTimeSlicingMode = ReflectionProbeTimeSlicingMode.IndividualFaces;
        [Tooltip("Enable/disable enviro reflection probe updates based on gametime changes..")]
        public bool globalReflectionsUpdateOnGameTime = true;
        [Tooltip("Enable/disable enviro reflection probe updates based on transform position changes..")]
        public bool globalReflectionsUpdateOnPosition = true;
        [Tooltip("Reflection probe intensity.")]
        [Range(0f, 2f)]
        public float globalReflectionsIntensity = 1.0f;
        [Tooltip("Reflection probe update rate based on game time.")]
        public float globalReflectionsTimeTreshold = 0.025f;
        [Tooltip("Reflection probe update rate based on camera position.")]
        public float globalReflectionsPositionTreshold = 0.5f;
        [Tooltip("Reflection probe scale. Increase that one to increase the area where reflection probe will influence your scene.")]
        [Range(10f, 10000f)]
        public float globalReflectionsScale = 10000f;
        [Tooltip("Reflection probe resolution.")]
        public GlobalReflectionResolution globalReflectionResolution = GlobalReflectionResolution.R256;
        [Tooltip("Reflection probe rendered Layers.")]
        public LayerMask globalReflectionLayers;
        [Tooltip("Enable this option to update the default reflection with global reflection probes cubemap. This can be needed for material that might not support direct reflection probes. (Instanced Indirect Rendering)")]
        public bool updateDefaultEnvironmentReflections = true;
        [Tooltip("Reflection cubemap used for default scene sky reflections in < Unity 2022.1 versions.")]
        public Cubemap defaultSkyReflectionTex;
    }

    [Serializable]
    [ExecuteInEditMode]
    public class EnviroReflectionsModule : EnviroModule
    {
        public Enviro.EnviroReflections Settings;
        public EnviroReflectionsModule preset;

        // Inspector
        public bool showReflectionControls;

        public float lastReflectionUpdate;
        public Vector3 lastReflectionUpdatePos;

        private Coroutine renderReflectionCoroutine;
        private Coroutine waitForProbeCoroutine;
        private Coroutine copyDefaultReflectionCoroutine;

        public override void Enable ()
        {
            if(EnviroManager.instance == null)
               return;

            Setup();

            // Update global reflections once on enable.
            if(EnviroManager.instance.Objects.globalReflectionProbe != null)
                EnviroManager.instance.StartCoroutine(WaitToRefreshReflection());
        }

        public override void Disable ()
        {
            if(EnviroManager.instance == null)
               return;

            Cleanup();
        }

        private void Cleanup()
        {
            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Objects.globalReflectionProbe != null)
               DestroyImmediate(EnviroManager.instance.Objects.globalReflectionProbe.gameObject);
        }

        // Unity warns with "Attempting to update a disabled Reflection Probe" even though the probe is enabled.
        // We have to wait a frame before interacting with reflection probes to allow Unity time to do any
        // setup in its internal OnEnable(). Otherwise, we will receive a warning:
        // "Attempting to update a disabled Reflection Probe. Action will be ignored."
        private IEnumerator WaitToRefreshReflection() 
        {
            yield return null;
            RenderGlobalReflectionProbe(true, false);
            UpdateDefaultReflectionTextureMode ();
        } 

        private void Setup()
        {
            if(EnviroManager.instance.Objects.globalReflectionProbe == null)
            {
                GameObject newReflectionProbe = new GameObject();
                newReflectionProbe.name = "Global Reflection Probe";
                newReflectionProbe.transform.SetParent(EnviroManager.instance.transform);
                newReflectionProbe.transform.localPosition = Vector3.zero;
                EnviroManager.instance.Objects.globalReflectionProbe = newReflectionProbe.AddComponent<EnviroReflectionProbe>();
            }
        } 

        public override void UpdateModule ()
        {
            if(EnviroManager.instance == null)
               return;

            if(EnviroManager.instance.Objects.globalReflectionProbe != null)
                UpdateReflection();
        }

        private void UpdateReflection()
        {
            if(!Settings.globalReflections)
            {
                EnviroManager.instance.Objects.globalReflectionProbe.myProbe.enabled = false;
                UpdateDefaultReflectionTextureMode ();
                return;
            }
            else
            {
                EnviroManager.instance.Objects.globalReflectionProbe.myProbe.enabled = true;
            }

            EnviroReflectionProbe probe = EnviroManager.instance.Objects.globalReflectionProbe;

            SetupProbeSettings(probe);

            if(EnviroManager.instance.Time != null)
            {
                if ((lastReflectionUpdate < EnviroManager.instance.Time.Settings.timeOfDay || lastReflectionUpdate > EnviroManager.instance.Time.Settings.timeOfDay + (Settings.globalReflectionsTimeTreshold + 0.01f)) && Settings.globalReflectionsUpdateOnGameTime)
                {
                    RenderGlobalReflectionProbe(false,Settings.customRenderingTimeSlicing);
                    lastReflectionUpdate = EnviroManager.instance.Time.Settings.timeOfDay + Settings.globalReflectionsTimeTreshold;
                }
            }

            if ((probe.transform.position.magnitude > lastReflectionUpdatePos.magnitude + Settings.globalReflectionsPositionTreshold || probe.transform.position.magnitude < lastReflectionUpdatePos.magnitude - Settings.globalReflectionsPositionTreshold) && Settings.globalReflectionsUpdateOnPosition)
            {
                RenderGlobalReflectionProbe(false,Settings.customRenderingTimeSlicing);
                lastReflectionUpdatePos = probe.transform.position;
            }

            UpdateDefaultReflectionTextureMode ();
        }

        public void RenderGlobalReflectionProbe(bool forced = false, bool timeslice = false)
        {
            EnviroReflectionProbe probe = EnviroManager.instance.Objects.globalReflectionProbe;

            if (probe == null)
                return; 

            if(renderReflectionCoroutine != null)
            {
                EnviroManager.instance.StopCoroutine(renderReflectionCoroutine);
                renderReflectionCoroutine = null;
            }

            #if !ENVIRO_HDRP
                renderReflectionCoroutine = EnviroManager.instance.StartCoroutine(RenderGlobalReflectionProbeTimed(probe,timeslice));

                if(Settings.updateDefaultEnvironmentReflections)
                {
                #if UNITY_2022_1_OR_NEWER
                // We don't need to copy the texture to a cubemap anmyore
                #else
                    // Prevent multiple coroutines from running at the same time
                    if (copyDefaultReflectionCoroutine != null) 
                    {
                        EnviroManager.instance.StopCoroutine(copyDefaultReflectionCoroutine);
                        copyDefaultReflectionCoroutine = null;
                    }
                    
                    if(Settings.customRendering)
                     copyDefaultReflectionCoroutine = EnviroManager.instance.StartCoroutine(CopyDefaultReflectionCustom(probe, timeslice));
                    else
                     CopyDefaultReflectionUnity(probe);
                #endif
                } 
                
            #else
                renderReflectionCoroutine = EnviroManager.instance.StartCoroutine(RenderGlobalReflectionProbeTimed(probe,timeslice));
            #endif
        }

        //Copy reflection probe to cubemap and assign as default reflections.
        private void CopyDefaultReflectionCubemap (EnviroReflectionProbe probe)
        {
             if(Settings.defaultSkyReflectionTex == null || Settings.defaultSkyReflectionTex.height != probe.myProbe.texture.height || Settings.defaultSkyReflectionTex.width != probe.myProbe.texture.width)
                { 
                    if(Settings.defaultSkyReflectionTex != null)
                    DestroyImmediate(Settings.defaultSkyReflectionTex);

                    Settings.defaultSkyReflectionTex = new Cubemap(probe.myProbe.resolution, probe.myProbe.hdr ? TextureFormat.RGBAHalf : TextureFormat.RGBA32, true);
                    Settings.defaultSkyReflectionTex.name = "Enviro Default Sky Reflection";
                }
 
                if(probe.myProbe.texture != null)
                   Graphics.CopyTexture(probe.myProbe.texture, Settings.defaultSkyReflectionTex as Texture);               
        }
 
        public void UpdateDefaultReflectionTextureMode ()
        {
            if(Settings.updateDefaultEnvironmentReflections && Settings.globalReflections)
            {
                RenderSettings.defaultReflectionMode = UnityEngine.Rendering.DefaultReflectionMode.Custom;

        #if UNITY_2022_1_OR_NEWER
                RenderSettings.customReflectionTexture = EnviroManager.instance.Objects.globalReflectionProbe.myProbe.texture;
        #else
                if(Settings.defaultSkyReflectionTex != null)
                   RenderSettings.customReflection = Settings.defaultSkyReflectionTex;
        #endif
            }
            else
            {
                RenderSettings.defaultReflectionMode = UnityEngine.Rendering.DefaultReflectionMode.Skybox;
            }
        }

        //Update all probe settings.
        private void SetupProbeSettings(EnviroReflectionProbe probe)
        {
            int res = 128;

            switch (Settings.globalReflectionResolution)
            {
                case EnviroReflections.GlobalReflectionResolution.R16:
                     res = 16;
                break;
                case EnviroReflections.GlobalReflectionResolution.R32:
                     res = 32;
                break;
                case EnviroReflections.GlobalReflectionResolution.R64:
                     res = 64;
                break;
                case EnviroReflections.GlobalReflectionResolution.R128:
                     res = 128;
                break;
                case EnviroReflections.GlobalReflectionResolution.R256:
                     res = 256;
                break;
                case EnviroReflections.GlobalReflectionResolution.R512:
                     res = 512;
                break;
                case EnviroReflections.GlobalReflectionResolution.R1024:
                     res = 1024;
                break;
                case EnviroReflections.GlobalReflectionResolution.R2048:
                     res = 2048;
                break;
            }
#if !ENVIRO_HDRP
            probe.myProbe.cullingMask = Settings.globalReflectionLayers;
            probe.myProbe.intensity = Settings.globalReflectionsIntensity;
            probe.myProbe.size = new Vector3 (Settings.globalReflectionsScale,Settings.globalReflectionsScale,Settings.globalReflectionsScale);
            probe.myProbe.resolution = res;
            probe.customRendering = Settings.customRendering;
            probe.useTimeSlicing = Settings.customRenderingTimeSlicing;
            probe.myProbe.timeSlicingMode = Settings.globalReflectionTimeSlicingMode;
            RenderSettings.reflectionIntensity = Settings.globalReflectionsIntensity;
#else
            probe.customRendering = false;
            probe.myProbe.resolution = res;

            if(probe.hdprobe != null)
            {
                probe.hdprobe.settingsRaw.cameraSettings.culling.cullingMask = Settings.globalReflectionLayers;
                probe.hdprobe.settingsRaw.influence.boxSize = new Vector3 (Settings.globalReflectionsScale,Settings.globalReflectionsScale,Settings.globalReflectionsScale);
                probe.hdprobe.settingsRaw.influence.sphereRadius = Settings.globalReflectionsScale;
                probe.hdprobe.settingsRaw.lighting.multiplier = Settings.globalReflectionsIntensity;
            }
#endif
        }

        private IEnumerator CopyDefaultReflectionCustom(EnviroReflectionProbe probe, bool timeslice)
        {
                if (timeslice)
                {
                    // Wait for seven frames so probe finished rendering
                    for (int i = 0; i < 8; i++)
                    {
                        yield return null;
                    }

                    CopyDefaultReflectionCubemap(probe);
                }
                else
                { 
                    yield return null;
                    yield return null;
                    CopyDefaultReflectionCubemap(probe);
                }
        }
 
        private void CopyDefaultReflectionUnity(EnviroReflectionProbe probe)
        {
            if(probe.renderId == -1 || probe.myProbe.IsFinishedRendering(probe.renderId))
            {
                CopyDefaultReflectionCubemap(probe);
            }
            else
            {
                if (waitForProbeCoroutine != null) {
                    EnviroManager.instance.StopCoroutine(waitForProbeCoroutine);
                    waitForProbeCoroutine = null;
                }
                waitForProbeCoroutine = EnviroManager.instance.StartCoroutine(WaitForUnityProbe(probe));
            }
        } 

        private IEnumerator WaitForUnityProbe(EnviroReflectionProbe probe)
        {
            yield return null;
            CopyDefaultReflectionUnity(probe);
        }

        private IEnumerator RenderGlobalReflectionProbeTimed (EnviroReflectionProbe probe, bool timeslice)
        { 
        #if ENVIRO_HDRP      
            EnviroManager.instance.Lighting.UpdateDirectLightingHDRP ();
            EnviroManager.instance.Lighting.UpdateAmbientLightingHDRP();
            yield return null;
            probe.RefreshReflection(timeslice);
            yield return null;
            EnviroManager.instance.Lighting.UpdateExposureHDRP ();
        #else
            if(EnviroManager.instance.Lighting != null)
            {
                //Force a lighting update before rendering the probe as it might has not updated yet.
                EnviroManager.instance.Lighting.UpdateDirectLighting ();
                EnviroManager.instance.Lighting.UpdateAmbientLighting(true);
                yield return null;
                probe.RefreshReflection(timeslice);
            }
            else
            {
                probe.RefreshReflection(timeslice);
            }
        #endif 
        } 

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroReflections>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroReflectionsModule t =  ScriptableObject.CreateInstance<EnviroReflectionsModule>();
        t.name = "Reflections Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroReflections>(JsonUtility.ToJson(Settings));

        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroReflectionsModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroReflections>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionsModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionsModuleEditor.cs---------------


using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroReflectionsModule))]
    public class EnviroReflectionsModuleEditor : EnviroModuleEditor
    {
        private EnviroReflectionsModule myTarget;

        //Properties
        //Reflection Probe
        private SerializedProperty globalReflections, customRendering, customRenderingTimeSlicing, globalReflectionTimeSlicingMode, globalReflectionsUpdateOnGameTime, globalReflectionsUpdateOnPosition, globalReflectionsIntensity, globalReflectionsTimeTreshold, globalReflectionsPositionTreshold, globalReflectionsScale, globalReflectionResolution, globalReflectionLayers, updateDefaultEnvironmentReflections;

        //On Enable
        public override void OnEnable()
        {

            if(!target)
                return;

            base.OnEnable();

            myTarget = (EnviroReflectionsModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            //Reflection Probe
            globalReflections = serializedObj.FindProperty("Settings.globalReflections"); 
            updateDefaultEnvironmentReflections = serializedObj.FindProperty("Settings.updateDefaultEnvironmentReflections"); 
            customRendering = serializedObj.FindProperty("Settings.customRendering"); 
            customRenderingTimeSlicing = serializedObj.FindProperty("Settings.customRenderingTimeSlicing"); 
            globalReflectionTimeSlicingMode = serializedObj.FindProperty("Settings.globalReflectionTimeSlicingMode");
            globalReflectionsUpdateOnGameTime = serializedObj.FindProperty("Settings.globalReflectionsUpdateOnGameTime");
            globalReflectionsUpdateOnPosition = serializedObj.FindProperty("Settings.globalReflectionsUpdateOnPosition");
            globalReflectionsIntensity = serializedObj.FindProperty("Settings.globalReflectionsIntensity");
            globalReflectionsTimeTreshold = serializedObj.FindProperty("Settings.globalReflectionsTimeTreshold");
            globalReflectionsPositionTreshold = serializedObj.FindProperty("Settings.globalReflectionsPositionTreshold");
            globalReflectionsScale = serializedObj.FindProperty("Settings.globalReflectionsScale");
            globalReflectionResolution = serializedObj.FindProperty("Settings.globalReflectionResolution");
            globalReflectionLayers = serializedObj.FindProperty("Settings.globalReflectionLayers");
        }
/*

*/
        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = new Color(0.0f,0.0f,0.5f,1f);
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Reflections", headerFoldout);

            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Reflections);
                DestroyImmediate(this);
                return;
            }

            EditorGUILayout.EndHorizontal();

            if(myTarget.showModuleInspector)
            {
                //RenderDisableInputBox();
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showReflectionControls = GUILayout.Toggle(myTarget.showReflectionControls, "Reflection Controls", headerFoldout);
                if(myTarget.showReflectionControls)
                {
                    EditorGUILayout.PropertyField(globalReflections);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(globalReflectionsIntensity);
#if !ENVIRO_HDRP
                    EditorGUILayout.PropertyField(globalReflectionResolution);
#endif
                    EditorGUILayout.PropertyField(globalReflectionLayers);
                    EditorGUILayout.PropertyField(globalReflectionsScale);
#if !ENVIRO_HDRP
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(updateDefaultEnvironmentReflections);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(customRendering);
                    if(myTarget.Settings.customRendering)
                    EditorGUILayout.PropertyField(customRenderingTimeSlicing);
                    else
                    EditorGUILayout.PropertyField(globalReflectionTimeSlicingMode);
#endif
                    GUILayout.Space(10);
                    EditorGUILayout.PropertyField(globalReflectionsUpdateOnGameTime);
                    if(myTarget.Settings.globalReflectionsUpdateOnGameTime)
                    EditorGUILayout.PropertyField(globalReflectionsTimeTreshold);
                        GUILayout.Space(5);
                    EditorGUILayout.PropertyField(globalReflectionsUpdateOnPosition);
                    if(myTarget.Settings.globalReflectionsUpdateOnPosition)
                    EditorGUILayout.PropertyField(globalReflectionsPositionTreshold);
                }
                GUILayout.EndVertical();


                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);

                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);
                    GUILayout.BeginHorizontal("",wrapStyle);
                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroReflectionsModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroRenderer.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Enviro
{
    [ExecuteInEditMode] 
    [ImageEffectAllowedInSceneView]
    public class EnviroRenderer : MonoBehaviour
    {
        [Tooltip("Assign a quality here if you want to use different settings for this camera. Otherwise it takes settings from Enviro Manager.")]
        private EnviroQuality myQuality;
        private Camera myCam;
        private EnviroVolumetricCloudRenderer volumetricCloudsRender;
        private Vector3 floatingPointOriginMod = Vector3.zero;

        void OnEnable()
        {
            myCam = GetComponent<Camera>();

            //Disable this component in URP and HDRP.
    #if ENVIRO_HDRP || ENVIRO_URP
            this.enabled = false;
    #endif
        }

        void OnDisable ()
        {
             CleanupVolumetricRenderer();
        }

        private void CleanupVolumetricRenderer()
        {
            if(volumetricCloudsRender != null)
            {
                if(volumetricCloudsRender.raymarchMat != null)
                    DestroyImmediate(volumetricCloudsRender.raymarchMat);

                if(volumetricCloudsRender.blendAndLightingMat != null)
                    DestroyImmediate(volumetricCloudsRender.blendAndLightingMat);

                if(volumetricCloudsRender.reprojectMat != null)
                    DestroyImmediate(volumetricCloudsRender.reprojectMat);

                if(volumetricCloudsRender.undersampleBuffer != null)
                    DestroyImmediate(volumetricCloudsRender.undersampleBuffer);
                
                if(volumetricCloudsRender.fullBuffer != null && volumetricCloudsRender.fullBuffer.Length > 0)
                    { 
                        for (int i = 0; i < volumetricCloudsRender.fullBuffer.Length; i++)
                        {
                            if(volumetricCloudsRender.fullBuffer[i] != null)
                                DestroyImmediate(volumetricCloudsRender.fullBuffer[i]);
                        }                     
                    }            
            } 
        }

        private void SetMatrix()
        {
            if (myCam.stereoEnabled)
            {
                // Both stereo eye inverse view matrices
                Matrix4x4 left_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse;
                Matrix4x4 right_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse;

                // Both stereo eye inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 left_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left);
                Matrix4x4 right_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right);
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(left_screen_from_view, true).inverse;
                Matrix4x4 right_view_from_screen = GL.GetGPUProjectionMatrix(right_screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                {
                    left_view_from_screen[1, 1] *= -1;
                    right_view_from_screen[1, 1] *= -1;
                }

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_RightWorldFromView", right_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
                Shader.SetGlobalMatrix("_RightViewFromScreen", right_view_from_screen);
            }
            else
            {
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;
                
                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                // Store matrices
                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            }
        } 

        private void Update()
        {
            
        }

        [ImageEffectOpaque]
        private void OnRenderImage(RenderTexture src, RenderTexture dest) 
        {   
            if(EnviroManager.instance == null)
            {
                Graphics.Blit(src,dest);
                return;
            }

            if(myCam == null)
               myCam = GetComponent<Camera>();

            if (myCam.actualRenderingPath == RenderingPath.Forward)
                myCam.depthTextureMode |= DepthTextureMode.Depth;

            if(EnviroHelper.ResetMatrix(myCam))
                myCam.ResetProjectionMatrix();
  
            myQuality = EnviroHelper.GetQualityForCamera(myCam);

            //Set what to render on this camera.
            bool renderVolumetricClouds = false;
            bool renderFog = false;
 
            if(EnviroManager.instance.Quality != null)
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = myQuality.volumetricCloudsOverride.volumetricClouds;  

                if(EnviroManager.instance.Fog != null)
                    renderFog = myQuality.fogOverride.fog;  
            }
            else
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = EnviroManager.instance.VolumetricClouds.settingsQuality.volumetricClouds;

                if(EnviroManager.instance.Fog != null)
                    renderFog = EnviroManager.instance.Fog.Settings.fog;
            }

            if (EnviroManager.instance.Objects.worldAnchor != null) 
                floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                floatingPointOriginMod = Vector3.zero; 

            ////////Rendering//////////
            SetMatrix();  

            if(volumetricCloudsRender == null)
               volumetricCloudsRender = new EnviroVolumetricCloudRenderer();

            //Render volumetrics mask first
            if(EnviroManager.instance.Fog != null && renderFog)
               EnviroManager.instance.Fog.RenderVolumetrics(myCam, src);
 
            if(EnviroManager.instance.Fog != null && EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && renderFog)
            { 
                //Change the order of clouds and fog
                RenderTexture temp = RenderTexture.GetTemporary(src.descriptor);
                RenderTexture temp2 = RenderTexture.GetTemporary(src.descriptor);

        
                if(myCam.transform.position.y - floatingPointOriginMod.y < EnviroManager.instance.VolumetricClouds.settingsLayer1.bottomCloudsHeight)
                {
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricClouds(myCam, src, temp, volumetricCloudsRender, myQuality);
                    
                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && myCam.cameraType != CameraType.Reflection)
                    {
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadows(temp,temp2,volumetricCloudsRender);
                        EnviroManager.instance.Fog.RenderHeightFog(myCam,temp2,dest);
                    } 
                    else 
                    {
                        EnviroManager.instance.Fog.RenderHeightFog(myCam,temp,dest);
                    }
                }
                else 
                {
                    EnviroManager.instance.Fog.RenderHeightFog(myCam,src,temp);
                    
                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && myCam.cameraType != CameraType.Reflection)
                    {
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricClouds(myCam,temp,temp2,volumetricCloudsRender,myQuality); 
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadows(temp2,dest,volumetricCloudsRender);
                    }
                    else
                    {
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricClouds(myCam,temp,dest,volumetricCloudsRender,myQuality); 
                    }
                }

                RenderTexture.ReleaseTemporary(temp);
                RenderTexture.ReleaseTemporary(temp2);
            }
            else if(EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && !renderFog)
            {
                if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && myCam.cameraType != CameraType.Reflection)
                {
                    RenderTexture temp = RenderTexture.GetTemporary(src.descriptor);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricClouds(myCam,src,temp,volumetricCloudsRender, myQuality);
                    EnviroManager.instance.VolumetricClouds.RenderCloudsShadows(temp,dest,volumetricCloudsRender);
                    RenderTexture.ReleaseTemporary(temp);
                }
                else
                {
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricClouds(myCam,src,dest,volumetricCloudsRender, myQuality);
                }
                
            } 
            else if (Enviro.EnviroManager.instance.Fog != null && renderFog)
            {
                EnviroManager.instance.Fog.RenderHeightFog(myCam,src,dest);
            }
            else 
            {
                Graphics.Blit(src,dest);
            }

            if(!renderVolumetricClouds)
            Shader.SetGlobalTexture("_EnviroClouds", Texture2D.blackTexture);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroRenderer.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroShaderStripper.cs---------------


ï»¿using System.Collections.Generic;
using UnityEditor.Build;
using UnityEditor.Rendering;
using UnityEngine;
using UnityEngine.Rendering; 

namespace Enviro
{
public class ShaderStripper : IPreprocessShaders
{
		private const string LOG_FILE_PATH = "Library/Shader Compilation Results.txt";

		private static readonly ShaderKeyword[] SKIPPED_VARIANTS = new ShaderKeyword[]
		{
			new ShaderKeyword( "ENVIROHDRP" ),
			new ShaderKeyword( "ENVIROURP" ),
		};

		public int callbackOrder { get { return 0; } }

		public void OnProcessShader( Shader shader, ShaderSnippetData snippet, IList<ShaderCompilerData> data )
		{
			string shaderName = shader.name;
 
		//URP Shader
		#if !ENVIRO_URP
			if(shaderName == "Hidden/EnviroBlitThrough")
				data.Clear();

			if(shaderName == "Hidden/VolumetricsURP")
				data.Clear();
		#endif 

		//URP 17+ Shader
		#if !ENVIRO_URP || !UNITY_6000_0_OR_NEWER
		if(shaderName == "Hidden/EnviroBlitThroughURP17")
			data.Clear();

		if(shaderName == "Hidden/EnviroBlurURP")
			data.Clear();

		if(shaderName == "Hidden/EnviroHeightFogURP")
			data.Clear();

		if(shaderName == "Hidden/EnviroApplyShadowsURP")
			data.Clear();

		if(shaderName == "Hidden/EnviroVolumetricCloudsBlendURP")
			data.Clear();
		
		if(shaderName == "Hidden/EnviroVolumetricCloudsDepthURP")
			data.Clear();

		if(shaderName == "Hidden/EnviroCloudsRaymarchURP")
			data.Clear();

		if(shaderName == "Hidden/EnviroVolumetricCloudsReprojectURP")
			data.Clear();

		#endif

		//HDRP Shaders
		#if !ENVIRO_HDRP
			if(shaderName == "Hidden/Enviro/BlitTroughHDRP")
				data.Clear();
	
			if(shaderName == "Hidden/EnviroApplyShadowsHDRP")
				data.Clear();

			if(shaderName == "Hidden/EnviroCloudsRaymarchHDRP")
				data.Clear();

			if(shaderName == "Hidden/EnviroVolumetricCloudsBlendHDRP")
				data.Clear();

			if(shaderName == "Hidden/EnviroVolumetricCloudsDepthHDRP")
				data.Clear();

			if(shaderName == "Hidden/EnviroVolumetricCloudsReprojectHDRP")
				data.Clear();

			if(shaderName == "Hidden/EnviroHeightFogHDRP")
				data.Clear();

			if(shaderName == "Enviro/HDRP/Sky")
				data.Clear();
		#endif
		}
	}
}



#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroShaderStripper.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroSkyModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroSky
    {
        public enum MoonMode
        { 
            Realistic,
            Simple,
            Off
        }
        public MoonMode moonMode;

        public bool forcedSkyboxSetup = true;
        //Front Colors
        [GradientUsage(true)]
        public Gradient frontColorGradient0,frontColorGradient1,frontColorGradient2,frontColorGradient3,frontColorGradient4,frontColorGradient5;
         
        //Back Colors
        [GradientUsage(true)]
        public Gradient backColorGradient0,backColorGradient1,backColorGradient2,backColorGradient3,backColorGradient4,backColorGradient5;
        
        //Other Colors
        [GradientUsage(true)]
        public Gradient sunDiscColorGradient, moonColorGradient, moonGlowColorGradient;

        //Textures
        public Cubemap starsTex;
        public Cubemap starsTwinklingTex;
        public Cubemap galaxyTex; 
        public Texture2D sunTex;
        public Texture2D moonTex;
        public Texture2D moonGlowTex;

        //Distribution  
        [Range(-0.1f,1f)]
        public float distribution0,distribution1,distribution2,distribution3;
 
        public AnimationCurve mieScatteringIntensityCurve,moonGlowIntensityCurve,starIntensityCurve,galaxyIntensityCurve;
        public AnimationCurve intensityCurve = new AnimationCurve(new Keyframe(0,1), new Keyframe(1,1));
        public float intensity, sunScale, moonScale;

        [Range(0f,1f)]
        public float starsTwinklingSpeed = 0.1f;
        [Range(-2f,2f)]
        public float moonPhase;
        public AnimationCurve skyExposureHDRP;
    #if ENVIRO_HDRP 
        public UnityEngine.Rendering.HighDefinition.SkyAmbientMode skyAmbientModeHDRP = UnityEngine.Rendering.HighDefinition.SkyAmbientMode.Dynamic;
    #endif
        [ColorUsage(false,true)]
        public Color skyColorTint = Color.white;
    }
 
    [Serializable]
    [ExecuteInEditMode]
    public class EnviroSkyModule : EnviroModule
    {  
        public Enviro.EnviroSky Settings;
        public EnviroSkyModule preset;

        public bool showSkyControls;
        public bool showSkySunControls;
        public bool showSkyMoonControls;
        public bool showSkyStarsControls;

        #if ENVIRO_HDRP
        UnityEngine.Rendering.HighDefinition.VisualEnvironment visualEnvironment;
        UnityEngine.Rendering.HighDefinition.EnviroHDRPSky enviroHDRPSky;
        #endif

        public Material mySkyboxMat;

        private float starsTwinkling;

        public override void Enable()
        {
            if(EnviroManager.instance == null)
               return;

    #if !ENVIRO_HDRP
            SetupSkybox ();
    #endif
        }

        public override void Disable()
        {
    

    #if !ENVIRO_HDRP
        if(mySkyboxMat != null)
           DestroyImmediate(mySkyboxMat);
    #endif
        }

        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return;
    #if !ENVIRO_HDRP

            if(mySkyboxMat == null || (mySkyboxMat != RenderSettings.skybox && Settings.forcedSkyboxSetup))
                SetupSkybox (); 

            UpdateSkybox (mySkyboxMat);
    #else
            UpdateHDRPSky ();
    #endif

            if(EnviroManager.instance != null && EnviroManager.instance.Time != null && Settings.moonMode == EnviroSky.MoonMode.Realistic)
            UpdateMoonPhase ();
        }

        public void SetupSkybox ()
        {
            if(mySkyboxMat == null)
            {
                mySkyboxMat = new Material (Shader.Find("Enviro/Skybox"));
                RenderSettings.skybox = mySkyboxMat;
            }
            else
            {
                RenderSettings.skybox = mySkyboxMat;
            }
        }

        public void UpdateSkybox (Material mat)
        {
            float solarTime = EnviroManager.instance.solarTime;
          
            Shader.SetGlobalColor("_FrontColor0",Settings.frontColorGradient0.Evaluate(solarTime));
            Shader.SetGlobalColor("_FrontColor1",Settings.frontColorGradient1.Evaluate(solarTime));
            Shader.SetGlobalColor("_FrontColor2",Settings.frontColorGradient2.Evaluate(solarTime));
            Shader.SetGlobalColor("_FrontColor3",Settings.frontColorGradient3.Evaluate(solarTime));
            Shader.SetGlobalColor("_FrontColor4",Settings.frontColorGradient4.Evaluate(solarTime));
            Shader.SetGlobalColor("_FrontColor5",Settings.frontColorGradient5.Evaluate(solarTime));
              
            Shader.SetGlobalColor("_BackColor0",Settings.backColorGradient0.Evaluate(solarTime));
            Shader.SetGlobalColor("_BackColor1",Settings.backColorGradient1.Evaluate(solarTime));
            Shader.SetGlobalColor("_BackColor2",Settings.backColorGradient2.Evaluate(solarTime));
            Shader.SetGlobalColor("_BackColor3",Settings.backColorGradient3.Evaluate(solarTime));
            Shader.SetGlobalColor("_BackColor4",Settings.backColorGradient4.Evaluate(solarTime));
            Shader.SetGlobalColor("_BackColor5",Settings.backColorGradient5.Evaluate(solarTime));

            Shader.SetGlobalColor("_SkyColorTint",Settings.skyColorTint); 

            Shader.SetGlobalColor("_SunColor",Settings.sunDiscColorGradient.Evaluate(solarTime));
            mat.SetColor("_MoonColor",Settings.moonColorGradient.Evaluate(solarTime));
            mat.SetColor("_MoonGlowColor",Settings.moonGlowColorGradient.Evaluate(solarTime));

            Shader.SetGlobalFloat("_Intensity", Settings.intensity * Settings.intensityCurve.Evaluate(solarTime));
            Shader.SetGlobalFloat("_MieScatteringIntensity", Settings.mieScatteringIntensityCurve.Evaluate(solarTime));
            mat.SetFloat("_MoonGlowIntensity", Settings.moonGlowIntensityCurve.Evaluate(solarTime));
            mat.SetFloat("_StarIntensity", Settings.starIntensityCurve.Evaluate(solarTime)); 
            mat.SetFloat("_GalaxyIntensity", Settings.galaxyIntensityCurve.Evaluate(solarTime));
             
            Shader.SetGlobalFloat("_frontBackDistribution0",Settings.distribution0);
            Shader.SetGlobalFloat("_frontBackDistribution1",Settings.distribution1);
            Shader.SetGlobalFloat("_frontBackDistribution2",Settings.distribution2);
            Shader.SetGlobalFloat("_frontBackDistribution3",Settings.distribution3);

            if(Settings.moonMode == EnviroSky.MoonMode.Off)
               mat.SetVector("_SkyMoonParameters", new Vector4(Settings.moonPhase,Settings.moonScale,Settings.moonScale,0f));
            else
               mat.SetVector("_SkyMoonParameters", new Vector4(Settings.moonPhase,Settings.moonScale,Settings.moonScale,1f));

            mat.SetVector("_SkySunParameters", new Vector4(Settings.sunScale,Settings.sunScale,Settings.sunScale,Settings.sunScale));  

            if(Settings.starsTex != null)
            mat.SetTexture("_StarsTex",Settings.starsTex);
            if(Settings.starsTwinklingTex != null)
            mat.SetTexture("_StarsTwinklingTex",Settings.starsTwinklingTex);
            if(Settings.galaxyTex != null)
            mat.SetTexture("_GalaxyTex",Settings.galaxyTex);
            if(Settings.sunTex != null)
            mat.SetTexture("_SunTex",Settings.sunTex);
            if(Settings.moonTex != null)
            mat.SetTexture("_MoonTex",Settings.moonTex);
            if(Settings.moonGlowTex != null)
            mat.SetTexture("_MoonGlowTex",Settings.moonGlowTex);

            Shader.SetGlobalVector("_SunDir",-EnviroManager.instance.Objects.sun.transform.forward);
            Shader.SetGlobalVector("_MoonDir",EnviroManager.instance.Objects.moon.transform.forward);
 
            //Deactivate flat and cirrus clouds when no flat clouds module found.
            if(EnviroManager.instance.FlatClouds == null)
            {
                Shader.SetGlobalFloat("_CirrusClouds",0f);
                Shader.SetGlobalFloat("_FlatClouds",0f);
            }
            //Deactivate auroira when no flat clouds module found.
            if(EnviroManager.instance.Aurora == null)
            {
               Shader.SetGlobalFloat("_Aurora",0f);
            }

            mat.SetFloat("_StarsTwinkling", Settings.starsTwinklingSpeed);
            if (Settings.starsTwinklingSpeed > 0.0f)
            {
                starsTwinkling += Settings.starsTwinklingSpeed * Time.deltaTime;
                Quaternion rot = Quaternion.Euler(starsTwinkling, starsTwinkling, starsTwinkling);
                Matrix4x4 NoiseRot = Matrix4x4.TRS(Vector3.zero, rot, new Vector3(1, 1, 1));           
                mat.SetMatrix("_StarsTwinklingMatrix", NoiseRot);
            }
        }

        private void UpdateMoonPhase ()
        {
            float angle = Vector3.SignedAngle(EnviroManager.instance.Objects.moon.transform.forward, EnviroManager.instance.Objects.sun.transform.forward, -EnviroManager.instance.transform.forward);
        
            if (EnviroManager.instance.Time.Settings.latitude >= 0)
            {
                if (angle < 0)
                {
                    Settings.moonPhase = EnviroHelper.Remap(angle, 0f, -180f, -2f, 0f);
                }
                else
                {
                    Settings.moonPhase = EnviroHelper.Remap(angle, 0f, 180f, 2f, 0f);
                }
            }
            else
            {
                if (angle < 0)
                {
                    Settings.moonPhase = EnviroHelper.Remap(angle, 0f, -180f, 2f, 0f);
                }
                else
                {
                    Settings.moonPhase = EnviroHelper.Remap(angle, 0f, 180f, -2f, 0f);
                }
            }
        }

#if ENVIRO_HDRP
        public void UpdateHDRPSky ()
        {
            if(EnviroManager.instance.volumeHDRP != null && EnviroManager.instance.volumeProfileHDRP != null)
            {           
                if(visualEnvironment == null) 
                {
                    UnityEngine.Rendering.HighDefinition.VisualEnvironment TempEnv;

                    if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.VisualEnvironment>(out TempEnv))
                    {
                        visualEnvironment = TempEnv;
                    }
                    else 
                    {
                        EnviroManager.instance.volumeProfileHDRP.Add<UnityEngine.Rendering.HighDefinition.VisualEnvironment>();

                        if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.VisualEnvironment>(out TempEnv))
                        {
                            visualEnvironment = TempEnv;
                        }
                    }
                }
                else
                {
                    visualEnvironment.skyType.value = 990;
                    visualEnvironment.skyType.overrideState = true;
                    visualEnvironment.skyAmbientMode.value = Settings.skyAmbientModeHDRP;
                    visualEnvironment.skyAmbientMode.overrideState = true;
                }

                if(enviroHDRPSky == null)
                {
                    UnityEngine.Rendering.HighDefinition.EnviroHDRPSky TempSky;
                    if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.EnviroHDRPSky>(out TempSky))
                    {
                        enviroHDRPSky = TempSky; 
                    }
                    else
                    {
                        EnviroManager.instance.volumeProfileHDRP.Add<UnityEngine.Rendering.HighDefinition.EnviroHDRPSky>();

                        if (EnviroManager.instance.volumeProfileHDRP.TryGet<UnityEngine.Rendering.HighDefinition.EnviroHDRPSky>(out TempSky))
                        {
                            enviroHDRPSky = TempSky;
                        } 
                    }
                }  
                else
                {  
                    enviroHDRPSky.skyIntensityMode.overrideState = true;
                    enviroHDRPSky.skyIntensityMode.value = UnityEngine.Rendering.HighDefinition.SkyIntensityMode.Exposure;
                    enviroHDRPSky.exposure.overrideState = true;

                    enviroHDRPSky.exposure.value = Settings.skyExposureHDRP.Evaluate(EnviroManager.instance.solarTime);

                    enviroHDRPSky.updateMode.overrideState = true;

                    if(Application.isPlaying)
                       enviroHDRPSky.updateMode.value = UnityEngine.Rendering.HighDefinition.EnvironmentUpdateMode.OnChanged;
                    else
                       enviroHDRPSky.updateMode.value = UnityEngine.Rendering.HighDefinition.EnvironmentUpdateMode.Realtime;

                   /* if (UnityEngine.Rendering.RenderPipelineManager.currentPipeline is UnityEngine.Rendering.HighDefinition.HDRenderPipeline) 
                    {
                        if(EnviroManager.instance.updateSkyAndLightingHDRP)
                        {
                            UnityEngine.Rendering.HighDefinition.HDRenderPipeline hd = (UnityEngine.Rendering.HighDefinition.HDRenderPipeline)UnityEngine.Rendering.RenderPipelineManager.currentPipeline;
                            hd.RequestSkyEnvironmentUpdate();
                        }             
                    }  */               

                } 
            }
        }
#endif


        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroSky>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        } 

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroSkyModule t =  ScriptableObject.CreateInstance<EnviroSkyModule>();
        t.name = "Sky Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroSky>(JsonUtility.ToJson(Settings));

        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroSkyModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroSky>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif

        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroSkyModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroSkyModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroSkyModule))]
    public class EnviroSkyModuleEditor : EnviroModuleEditor
    {  
        private EnviroSkyModule myTarget; 

        //Properties
        private SerializedProperty forcedSkyboxSetup;
        private SerializedProperty frontColorGradient0,frontColorGradient1,frontColorGradient2,frontColorGradient3,frontColorGradient4,frontColorGradient5;  
        private SerializedProperty frontColor0,frontColor1,frontColor2,frontColor3,frontColor4,frontColor5;  
        private SerializedProperty sunDiscColorGradient, moonColorGradient, moonGlowColorGradient;
        private SerializedProperty sunDiscColor, moonColor, moonGlowColor, skyColorTint;
        private SerializedProperty backColorGradient0,backColorGradient1,backColorGradient2,backColorGradient3,backColorGradient4,backColorGradient5;
        private SerializedProperty backColor0,backColor1,backColor2,backColor3,backColor4,backColor5;
        private SerializedProperty distribution0,distribution1,distribution2,distribution3;
        private SerializedProperty starsTex,starsTwinklingTex, galaxyTex, sunTex, moonTex, moonGlowTex;

        private SerializedProperty mieScatteringIntensityCurve, moonGlowIntensityCurve, starIntensityCurve, galaxyIntensityCurve;
        private SerializedProperty intensity,intensityCurve, mieScatteringIntensity,sunScale, moonScale, moonGlowScale, moonMode, moonPhase, starsTwinklingSpeed;

#if ENVIRO_HDRP
        private SerializedProperty skyExposureHDRP,skyAmbientModeHDRP;
#endif
        //On Enable
        public override void OnEnable()
        {
            if(!target)
                return;

            myTarget = (EnviroSkyModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");

            forcedSkyboxSetup = serializedObj.FindProperty("Settings.forcedSkyboxSetup");
            // Front Colors
            frontColorGradient0 = serializedObj.FindProperty("Settings.frontColorGradient0");
            frontColorGradient1 = serializedObj.FindProperty("Settings.frontColorGradient1");
            frontColorGradient2 = serializedObj.FindProperty("Settings.frontColorGradient2");
            frontColorGradient3 = serializedObj.FindProperty("Settings.frontColorGradient3");
            frontColorGradient4 = serializedObj.FindProperty("Settings.frontColorGradient4");
            frontColorGradient5 = serializedObj.FindProperty("Settings.frontColorGradient5");

            // Back Colors
            backColorGradient0 = serializedObj.FindProperty("Settings.backColorGradient0");
            backColorGradient1 = serializedObj.FindProperty("Settings.backColorGradient1");
            backColorGradient2 = serializedObj.FindProperty("Settings.backColorGradient2");
            backColorGradient3 = serializedObj.FindProperty("Settings.backColorGradient3");
            backColorGradient4 = serializedObj.FindProperty("Settings.backColorGradient4");
            backColorGradient5 = serializedObj.FindProperty("Settings.backColorGradient5");

            skyColorTint = serializedObj.FindProperty("Settings.skyColorTint");

            //Sund and Moon Colors 
            sunDiscColorGradient = serializedObj.FindProperty("Settings.sunDiscColorGradient"); 
            moonColorGradient = serializedObj.FindProperty("Settings.moonColorGradient"); 
            moonGlowColorGradient = serializedObj.FindProperty("Settings.moonGlowColorGradient");
            //Distribution
            distribution0 = serializedObj.FindProperty("Settings.distribution0");
            distribution1 = serializedObj.FindProperty("Settings.distribution1");
            distribution2 = serializedObj.FindProperty("Settings.distribution2");
            distribution3 = serializedObj.FindProperty("Settings.distribution3");

            //Textures
            starsTex = serializedObj.FindProperty("Settings.starsTex");
            starsTwinklingTex = serializedObj.FindProperty("Settings.starsTwinklingTex");
            galaxyTex = serializedObj.FindProperty("Settings.galaxyTex");
            sunTex = serializedObj.FindProperty("Settings.sunTex"); 
            moonTex = serializedObj.FindProperty("Settings.moonTex");
            moonGlowTex = serializedObj.FindProperty("Settings.moonGlowTex");
            moonMode = serializedObj.FindProperty("Settings.moonMode"); 
            //Intensity
            mieScatteringIntensityCurve = serializedObj.FindProperty("Settings.mieScatteringIntensityCurve");
            moonGlowIntensityCurve = serializedObj.FindProperty("Settings.moonGlowIntensityCurve");
            starIntensityCurve = serializedObj.FindProperty("Settings.starIntensityCurve");
            galaxyIntensityCurve = serializedObj.FindProperty("Settings.galaxyIntensityCurve");
            intensity = serializedObj.FindProperty("Settings.intensity");
            intensityCurve = serializedObj.FindProperty("Settings.intensityCurve");
            sunScale = serializedObj.FindProperty("Settings.sunScale");
            moonScale = serializedObj.FindProperty("Settings.moonScale");
            moonPhase = serializedObj.FindProperty("Settings.moonPhase"); 
            starsTwinklingSpeed  = serializedObj.FindProperty("Settings.starsTwinklingSpeed"); 
           // moonGlowScale = serializedObj.FindProperty("skySettings.moonGlowScale");
           #if ENVIRO_HDRP
             skyExposureHDRP = serializedObj.FindProperty("Settings.skyExposureHDRP");
             skyAmbientModeHDRP = serializedObj.FindProperty("Settings.skyAmbientModeHDRP");
           #endif
        } 
 
        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Sky", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Sky); //Add Remove
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                //EditorGUILayout.LabelField("This module will control your skybox.");
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                
                // Sky Color Controls
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSkyControls = GUILayout.Toggle(myTarget.showSkyControls, "Sky Controls", headerFoldout);               
                if(myTarget.showSkyControls)
                {
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("General",headerStyle);
                    EditorGUILayout.PropertyField(forcedSkyboxSetup);
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Ground Color",headerStyle);
                    EditorGUILayout.PropertyField(frontColorGradient0);
                    EditorGUILayout.PropertyField(backColorGradient0);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Horizon Colors",headerStyle);
                    EditorGUILayout.PropertyField(frontColorGradient1);
                    EditorGUILayout.PropertyField(backColorGradient1);
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(frontColorGradient2);
                    EditorGUILayout.PropertyField(backColorGradient2);
                    GUILayout.Space(5);   
                    EditorGUILayout.PropertyField(frontColorGradient3);
                    EditorGUILayout.PropertyField(backColorGradient3);
                    GUILayout.Space(5);   
                    EditorGUILayout.PropertyField(frontColorGradient4);
                    EditorGUILayout.PropertyField(backColorGradient4);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Top Color",headerStyle);
                    EditorGUILayout.PropertyField(frontColorGradient5);
                    EditorGUILayout.PropertyField(backColorGradient5);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Tint",headerStyle);
                    EditorGUILayout.PropertyField(skyColorTint);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Distribution",headerStyle);
                    EditorGUILayout.PropertyField(distribution0);
                    EditorGUILayout.PropertyField(distribution1);
                    EditorGUILayout.PropertyField(distribution2);
                    EditorGUILayout.PropertyField(distribution3);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Intensity",headerStyle);
                    EditorGUILayout.PropertyField(intensity);
                    EditorGUILayout.PropertyField(intensityCurve);          
                     GUILayout.Space(5);  
                    EditorGUILayout.PropertyField(mieScatteringIntensityCurve);
            #if ENVIRO_HDRP
                     GUILayout.Space(5);
                     EditorGUILayout.LabelField("HDRP Settings",headerStyle);
                     EditorGUILayout.PropertyField(skyAmbientModeHDRP);   
                     EditorGUILayout.PropertyField(skyExposureHDRP);
            #endif
                } 
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSkySunControls = GUILayout.Toggle(myTarget.showSkySunControls, "Sun Controls", headerFoldout);               
                if(myTarget.showSkySunControls)
                {
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Textures",headerStyle);
                    EditorGUILayout.PropertyField(sunTex);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Color",headerStyle);
                    EditorGUILayout.PropertyField(sunDiscColorGradient);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Scale",headerStyle);
                    EditorGUILayout.PropertyField(sunScale);
                } 
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSkyMoonControls = GUILayout.Toggle(myTarget.showSkyMoonControls, "Moon Controls", headerFoldout);               
                if(myTarget.showSkyMoonControls)
                {
                    GUILayout.Space(10);          
                    EditorGUILayout.PropertyField(moonMode);
                    if(myTarget.Settings.moonMode != EnviroSky.MoonMode.Simple)
                       EditorGUI.BeginDisabledGroup(true);
                    EditorGUILayout.PropertyField(moonPhase);    

                    if(myTarget.Settings.moonMode != EnviroSky.MoonMode.Simple)
                       EditorGUI.EndDisabledGroup();  
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Textures",headerStyle);
                    EditorGUILayout.PropertyField(moonTex);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Color",headerStyle);
                    EditorGUILayout.PropertyField(moonColorGradient);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Scale",headerStyle);
                    EditorGUILayout.PropertyField(moonScale);
                } 
                GUILayout.EndVertical();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSkyStarsControls = GUILayout.Toggle(myTarget.showSkyStarsControls, "Stars and Galaxy Controls", headerFoldout);               
                if(myTarget.showSkyStarsControls)
                {
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Textures",headerStyle);
                    EditorGUILayout.PropertyField(starsTex);
                    EditorGUILayout.PropertyField(starsTwinklingTex);              
                    EditorGUILayout.PropertyField(galaxyTex);
                    GUILayout.Space(5);
                    EditorGUILayout.LabelField("Intensity",headerStyle);
                    EditorGUILayout.PropertyField(starIntensityCurve);
                    EditorGUILayout.PropertyField(galaxyIntensityCurve);
                    EditorGUILayout.PropertyField(starsTwinklingSpeed);

                } 
                GUILayout.EndVertical();

 
                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);

                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End
                
                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroSkyModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroTimeModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroTime 
    {
        public bool simulate;
        public DateTime date = new DateTime(1,1,1,0,0,0);
         
        [SerializeField]
        public int secSerial, minSerial, hourSerial, daySerial, monthSerial, yearSerial;
        public float timeOfDay;

        [Range(-90, 90)]
        [Tooltip("-90,  90   Horizontal earth lines")]
        public float latitude;
        [Range(-180, 180)]
        [Tooltip("-180, 180  Vertical earth line")]
        public float longitude;
        [Range(-13, 13)]
        [Tooltip("Time offset for timezones")]
        public int utcOffset;
        [Tooltip("Realtime minutes for a 24h game time cycle.")]
        public float cycleLengthInMinutes = 10f;
        [Tooltip("Day length modifier will increase/decrease time progression speed at daytime.")]
        [Range(0.1f, 10f)]
        public float dayLengthModifier = 1f;
        [Tooltip("Night length modifier will increase/decrease time progression speed at nighttime.")]
        [Range(0.1f, 10f)]
        public float nightLengthModifier = 1f;
    }

    [Serializable]
    [ExecuteInEditMode]
    public class EnviroTimeModule : EnviroModule
    {  
        public Enviro.EnviroTime Settings;
        public EnviroTimeModule preset;
        public bool showTimeControls,showLocationControls;
        public float LST; // changed to make accessible outside the module
        private float internalTimeOverflow;

        ///////// Time
        public void SetDateTime (int sec, int min, int hours, int day, int month, int year)
        {
            if(year == 0)
               year = 1;
            if(month == 0)
               month = 1;
            if(day == 0)
               day = 1;
 
            Settings.secSerial = sec;
            Settings.minSerial = min;
            Settings.hourSerial = hours;
            Settings.daySerial = day;
            Settings.monthSerial = month;
            Settings.yearSerial = year;

            DateTime curTime = new DateTime(1,1,1,0,0,0);

            curTime = curTime.AddYears(Settings.yearSerial-1);
            curTime = curTime.AddMonths(Settings.monthSerial-1);
            curTime = curTime.AddDays(Settings.daySerial-1);
            curTime = curTime.AddHours(Settings.hourSerial);
            curTime = curTime.AddMinutes(Settings.minSerial);
            curTime = curTime.AddSeconds(Settings.secSerial); 

            //Events
            if(EnviroManager.instance != null && EnviroManager.instance.Events != null && EnviroManager.instance.notFirstFrame && Application.isPlaying)
            {
                if(Settings.date.Hour != curTime.Hour)
                   EnviroManager.instance.NotifyHourPassed();

                if(Settings.date.Day != curTime.Day)
                   EnviroManager.instance.NotifyDayPassed();

                if(Settings.date.Year != curTime.Year)
                   EnviroManager.instance.NotifyYearPassed();
            }

            Settings.date = curTime;

            Settings.secSerial = Settings.date.Second;
            Settings.minSerial = Settings.date.Minute;
            Settings.hourSerial = Settings.date.Hour;
            Settings.daySerial = Settings.date.Day;
            Settings.monthSerial = Settings.date.Month;
            Settings.yearSerial = Settings.date.Year; 
 
            Settings.timeOfDay = Settings.date.Hour + (Settings.date.Minute * 0.0166667f) + (Settings.date.Second * 0.000277778f);
        }

        //Time
        public int seconds
        {
            get
            {
                return Settings.date.Second;
            }
            set
            {
                //Settings.secSerial = value;
                SetDateTime(value,Settings.minSerial,Settings.hourSerial,Settings.daySerial,Settings.monthSerial,Settings.yearSerial);
            }
        }

        public int minutes
        {
            get
            {
                return Settings.date.Minute;
            }
            set
            {
                //Settings.minSerial = value;
                SetDateTime(Settings.secSerial,value,Settings.hourSerial,Settings.daySerial,Settings.monthSerial,Settings.yearSerial);
            }
        }

        public int hours
        {
            get
            {
                return Settings.date.Hour;
            }
            set
            {
                //Settings.hourSerial = value;
                SetDateTime(Settings.secSerial,Settings.minSerial,value,Settings.daySerial,Settings.monthSerial,Settings.yearSerial);
            }
        }

        public int days
        {
            get
            {
                return Settings.date.Day;
            }
            set
            {
                //Settings.daySerial = value;
                SetDateTime(Settings.secSerial,Settings.minSerial,Settings.hourSerial,value,Settings.monthSerial,Settings.yearSerial);
            }
        }

        public int months
        {
            get
            {
                return Settings.date.Month;
            }
            set
            {
               //Settings.monthSerial = value;
               SetDateTime(Settings.secSerial,Settings.minSerial,Settings.hourSerial,Settings.daySerial,value,Settings.yearSerial);
            }
        }
        public int years
        {
            get
            {
                return Settings.date.Year;
            }
            set
            {
                //Settings.yearSerial = value;
                SetDateTime(Settings.secSerial,Settings.minSerial,Settings.hourSerial,Settings.daySerial,Settings.monthSerial,value);
            }
        }

 
        // Update Method 
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(Settings.simulate && Application.isPlaying)
            {
                float t = 0f;

                float timeProgressionModifier = 1f;

                if(!EnviroManager.instance.isNight)
                {
                    timeProgressionModifier = Settings.dayLengthModifier;
                }
                else
                {                 
                    timeProgressionModifier = Settings.nightLengthModifier;
                }

                t = (24.0f / 60.0f) / (Settings.cycleLengthInMinutes * timeProgressionModifier);           
                t = t * 3600f * Time.deltaTime;

                if(t < 1f)
                {
                   internalTimeOverflow += t;
                }
                else
                {
                   internalTimeOverflow = t;
                }

                seconds += (int)(internalTimeOverflow);

                if(internalTimeOverflow >= 1f)
                   internalTimeOverflow = 0f; 
            } 
 
            SetDateTime(Settings.secSerial,Settings.minSerial,Settings.hourSerial,Settings.daySerial,Settings.monthSerial,Settings.yearSerial);
            UpdateSunAndMoonPosition();
        }


        public void UpdateSunAndMoonPosition()
        {
            if(EnviroManager.instance == null)
                return;

            float d = 367 * years - 7 * (years + (months + 9) / 12) / 4 + 275 * months / 9 + days - 730530; // corrected a bracket typo

            d += (GetUniversalTimeOfDay() / 24f); //Universal ToD

            float ecl = 23.4393f - 3.563E-7f * d;

            if(EnviroManager.instance.Sky != null)
            {
                if(EnviroManager.instance.Sky.Settings.moonMode == EnviroSky.MoonMode.Simple)
                {
                    CalculateSunPosition(d, ecl, true);
                }
                else
                {
                    CalculateSunPosition(d, ecl, false);
                    CalculateMoonPosition(d, ecl);
                }
            }
            else
            {
                CalculateSunPosition(d, ecl, false);
                CalculateMoonPosition(d, ecl);
            }

            CalculateStarsPosition(LST);
        }

        /// <summary>
        /// Get current time in hours. UTC0 (12.5 = 12:30)
        /// </summary>
        /// <returns>The the current time of day in hours.</returns>
        public float GetUniversalTimeOfDay()
        { 
            return Settings.timeOfDay - Settings.utcOffset;
        }

        /// <summary>
        /// Get current time in hours with UTC time offset.
        /// </summary>
        /// <returns>The the current time of day in hours.</returns>
        public float GetTimeOfDay()
        {
            return Settings.timeOfDay;
        }

        /// <summary>
        /// Get current date in hours.
        /// </summary>
        /// <returns>The date in hour format</returns>
        public double GetDateInHours()
        {
            double dateInHours = Settings.timeOfDay + (days * 24f) + ((years * 365) * 24f);
            return dateInHours;
        }

        /// Get current time in a nicely formatted string with seconds!
        /// </summary>
        /// <returns>The time string.</returns>
        public string GetTimeStringWithSeconds()
        {
            return string.Format("{0:00}:{1:00}:{2:00}", hours, minutes, seconds);
        }

        /// <summary>
        /// Get current time in a nicely formatted string!
        /// </summary>
        /// <returns>The time string.</returns>
        public string GetTimeString()
        {
            return string.Format("{0:00}:{1:00}", hours, minutes);
        }

        /// <summary>
        /// Set the time of day in hours. (12.5 = 12:30)
        /// </summary>
        public void SetTimeOfDay(float tod)
        {
            Settings.timeOfDay = tod;
            hours = (int)(tod);
            tod -= hours;
            minutes = (int)(tod * 60f);
            tod -= minutes * 0.0166667f;
            seconds = (int)(tod * 3600f);
        }

        public Vector3 OrbitalToLocal(float theta, float phi)
        {
            Vector3 pos;

            float sinTheta = Mathf.Sin(theta);
            float cosTheta = Mathf.Cos(theta);
            float sinPhi = Mathf.Sin(phi);
            float cosPhi = Mathf.Cos(phi);

            pos.z = sinTheta * cosPhi;
            pos.y = cosTheta;
            pos.x = sinTheta * sinPhi;

            return pos;
        }

        public float Remap(float value, float from1, float to1, float from2, float to2)
        {
            return (value - from1) / (to1 - from1) * (to2 - from2) + from2;
        }
        
        public void CalculateSunPosition(float d, float ecl, bool simpleMoon)
        {
            /////http://www.stjarnhimlen.se/comp/ppcomp.html#5////
            ///////////////////////// SUN ////////////////////////
            float w = 282.9404f + 4.70935E-5f * d;
            float e = 0.016709f - 1.151E-9f * d;
            float M = 356.0470f + 0.9856002585f * d;
            // minor correction for turns
            while (M > 360.0f)
            {
                M -= 360.0f;
            }
            while (M < 0.0f)
            {
                M += 360.0f;
            }

            float E = M + e * Mathf.Rad2Deg * Mathf.Sin(Mathf.Deg2Rad * M) * (1.0f + e * Mathf.Cos(Mathf.Deg2Rad * M));

            float xv = Mathf.Cos(Mathf.Deg2Rad * E) - e;
            float yv = Mathf.Sin(Mathf.Deg2Rad * E) * Mathf.Sqrt(1 - e * e);

            float v = Mathf.Rad2Deg * Mathf.Atan2(yv, xv);
            float r = Mathf.Sqrt(xv * xv + yv * yv);

            float l = v + w;

            float xs = r * Mathf.Cos(Mathf.Deg2Rad * l);
            float ys = r * Mathf.Sin(Mathf.Deg2Rad * l);

            float xe = xs;
            float ye = ys * Mathf.Cos(Mathf.Deg2Rad * ecl);
            float ze = ys * Mathf.Sin(Mathf.Deg2Rad * ecl);

            float decl_rad = Mathf.Atan2(ze, Mathf.Sqrt(xe * xe + ye * ye));
            float decl_sin = Mathf.Sin(decl_rad);
            float decl_cos = Mathf.Cos(decl_rad);

            float Ls = M + w; // Sun's mean longitude correction

            float GMST0 = (Ls + 180); // same as above
            float GMST = GMST0 + GetUniversalTimeOfDay() * 15; 
            LST = GMST + Settings.longitude;
            // LST turn correction (fit to the right ascension of Zenith)
            while (LST > 360.0f)
            {
                LST -= 360.0f;
            }
            while (LST < 0.0f)
            {
                LST += 360.0f;
            }

            float HA_deg = LST - Mathf.Rad2Deg * Mathf.Atan2(ye, xe);
            float HA_rad = Mathf.Deg2Rad * HA_deg;
            float HA_sin = Mathf.Sin(HA_rad);
            float HA_cos = Mathf.Cos(HA_rad);

            float x = HA_cos * decl_cos;
            float y = HA_sin * decl_cos;
            float z = decl_sin;

            float sin_Lat = Mathf.Sin(Mathf.Deg2Rad * Settings.latitude);
            float cos_Lat = Mathf.Cos(Mathf.Deg2Rad * Settings.latitude);

            float xhor = x * sin_Lat - z * cos_Lat;
            float yhor = y;
            float zhor = x * cos_Lat + z * sin_Lat;

            float azimuth = Mathf.Atan2(yhor, xhor) + Mathf.Deg2Rad * 180;
            float altitude = Mathf.Atan2(zhor, Mathf.Sqrt(xhor * xhor + yhor * yhor));

            float sunTheta = (90 * Mathf.Deg2Rad) - altitude;
            float sunPhi = azimuth;

            //Set SolarTime: 1 = mid-day (sun directly above you), 0.5 = sunset/dawn, 0 = midnight;
            EnviroManager.instance.solarTime = Mathf.Clamp01(Remap(sunTheta, -1.5f, 0f, 1.5f, 1f));

            EnviroManager.instance.Objects.sun.transform.localPosition = OrbitalToLocal(sunTheta, sunPhi);
            EnviroManager.instance.Objects.sun.transform.LookAt(EnviroManager.instance.transform);

            if (simpleMoon)
            {
                EnviroManager.instance.Objects.moon.transform.localPosition = OrbitalToLocal(sunTheta - Mathf.PI, sunPhi);
                EnviroManager.instance.lunarTime = Mathf.Clamp01(Remap(sunTheta - Mathf.PI, -3.0f, 0f, 0f, 1f));
                EnviroManager.instance.Objects.moon.transform.LookAt(EnviroManager.instance.transform);
            }
        }

        public void CalculateMoonPosition(float d, float ecl)
        {
            float N = 125.1228f - 0.0529538083f * d;
            float i = 5.1454f;
            float w = 318.0634f + 0.1643573223f * d;
            float a = 60.2666f;
            float e = 0.054900f;
            float M = 115.3654f + 13.0649929509f * d;

            float rad_M = Mathf.Deg2Rad * M;
            float E = rad_M + e * Mathf.Sin(rad_M) * (1f + e * Mathf.Cos(rad_M));

            float xv = a * (Mathf.Cos(E) - e);
            float yv = a * (Mathf.Sqrt(1f - e * e) * Mathf.Sin(E));

            float v = Mathf.Rad2Deg * Mathf.Atan2(yv, xv);
            float r = Mathf.Sqrt(xv * xv + yv * yv);

            float rad_N = Mathf.Deg2Rad * N;
            float sin_N = Mathf.Sin(rad_N);
            float cos_N = Mathf.Cos(rad_N);

            float l = Mathf.Deg2Rad * (v + w);
            float sin_l = Mathf.Sin(l);
            float cos_l = Mathf.Cos(l);

            float rad_i = Mathf.Deg2Rad * i;
            float cos_i = Mathf.Cos(rad_i);

            float xh = r * (cos_N * cos_l - sin_N * sin_l * cos_i);
            float yh = r * (sin_N * cos_l + cos_N * sin_l * cos_i);
            float zh = r * (sin_l * Mathf.Sin(rad_i));

            float cos_ecl = Mathf.Cos(Mathf.Deg2Rad * ecl);
            float sin_ecl = Mathf.Sin(Mathf.Deg2Rad * ecl);

            float xe = xh;
            float ye = yh * cos_ecl - zh * sin_ecl;
            float ze = yh * sin_ecl + zh * cos_ecl;

            float ra = Mathf.Atan2(ye, xe);
            float decl = Mathf.Atan2(ze, Mathf.Sqrt(xe * xe + ye * ye));

            float HA = Mathf.Deg2Rad * LST - ra;

            float x = Mathf.Cos(HA) * Mathf.Cos(decl);
            float y = Mathf.Sin(HA) * Mathf.Cos(decl);
            float z = Mathf.Sin(decl);

            float latitude = Mathf.Deg2Rad * Settings.latitude;
            float sin_latitude = Mathf.Sin(latitude);
            float cos_latitude = Mathf.Cos(latitude);

            float xhor = x * sin_latitude - z * cos_latitude;
            float yhor = y;
            float zhor = x * cos_latitude + z * sin_latitude; 

            float azimuth = Mathf.Atan2(yhor, xhor) + Mathf.Deg2Rad * 180f;
            float altitude = Mathf.Atan2(zhor, Mathf.Sqrt(xhor * xhor + yhor * yhor));

            float MoonTheta = (90f * Mathf.Deg2Rad) - altitude;
            float MoonPhi = azimuth;

            EnviroManager.instance.Objects.moon.transform.localPosition = OrbitalToLocal(MoonTheta, MoonPhi);
            EnviroManager.instance.lunarTime = Mathf.Clamp01(Remap(MoonTheta, -1.5f, 0f, 1.5f, 1f));

            EnviroManager.instance.Objects.moon.transform.LookAt(EnviroManager.instance.transform.position);
        }

        public void CalculateStarsPosition(float siderealTime)
        { 
            // LST was corrected in degrees in Sun position update

            // The transform behaved incorrectly regarding longitude. The 180 degrees is to orientate the stars correctly
            // with the texture center with Zenith having 0 degrees right ascension towards the vernal equinox around 21 March
            Quaternion starsRotation = Quaternion.AngleAxis(90.0f - Settings.latitude, Vector3.right) * Quaternion.AngleAxis(180.0f + siderealTime, Vector3.up);
            EnviroManager.instance.Objects.stars.transform.localRotation = starsRotation;

            Shader.SetGlobalMatrix("_StarsMatrix", EnviroManager.instance.Objects.stars.transform.worldToLocalMatrix);
        }


        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroTime>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        } 

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroTimeModule t =  ScriptableObject.CreateInstance<EnviroTimeModule>();
        t.name = "Time Preset";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroTime>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }
        public void SaveModuleValues (EnviroTimeModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroTime>(JsonUtility.ToJson(Settings));

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroTimeModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroTimeModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroTimeModule))]
    public class EnviroTimeModuleEditor : EnviroModuleEditor
    {  
        private EnviroTimeModule myTarget; 

        //Properties
        private SerializedProperty simulate,latitude,longitude,utcOffset,cycleLengthInMinutes,dayLengthModifier,nightLengthModifier;  

        //On Enable
        public override void OnEnable()
        {
            if(!target)
                return;

            myTarget = (EnviroTimeModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            simulate = serializedObj.FindProperty("Settings.simulate"); 
            latitude = serializedObj.FindProperty("Settings.latitude");
            longitude = serializedObj.FindProperty("Settings.longitude");
            utcOffset = serializedObj.FindProperty("Settings.utcOffset");

            cycleLengthInMinutes = serializedObj.FindProperty("Settings.cycleLengthInMinutes");
            dayLengthModifier = serializedObj.FindProperty("Settings.dayLengthModifier");
            nightLengthModifier = serializedObj.FindProperty("Settings.nightLengthModifier");
        } 

        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Time", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Time);
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector)
            {
                //EditorGUILayout.LabelField("This module will control the time of day.");
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showTimeControls = GUILayout.Toggle(myTarget.showTimeControls, "Time Controls", headerFoldout);
                    
                if(myTarget.showTimeControls)
                {   
                    EditorGUI.BeginChangeCheck();
                    GUILayout.Space(10); 
                    EditorGUILayout.LabelField("Time", headerStyle);
 
                    int secT,minT,hoursT,daysT,monthsT,yearsT = 0;

                    secT = EditorGUILayout.IntSlider("Second", myTarget.seconds,0,60);
                    minT = EditorGUILayout.IntSlider("Minute", myTarget.minutes,0,60);
                    hoursT = EditorGUILayout.IntSlider("Hour", myTarget.hours,0,24);
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Date", headerStyle);
                    daysT = EditorGUILayout.IntSlider("Day", myTarget.days,1,32);
                    monthsT = EditorGUILayout.IntSlider("Month", myTarget.months,1,13);
                    yearsT = EditorGUILayout.IntSlider("Year", myTarget.years,1,3000);
                    if (EditorGUI.EndChangeCheck())
                    {
                        Undo.RecordObject(target, "Time Changed");
                        myTarget.seconds = secT;
                        myTarget.minutes = minT; 
                        myTarget.hours = hoursT;
                        myTarget.days = daysT;
                        myTarget.months = monthsT;
                        myTarget.years = yearsT;
                        EditorUtility.SetDirty(myTarget);
                    }
                    GUILayout.Space(10);
                    EditorGUILayout.LabelField("Progression", headerStyle);
                    EditorGUILayout.PropertyField(simulate);
                    EditorGUILayout.PropertyField(cycleLengthInMinutes);
                    EditorGUILayout.PropertyField(dayLengthModifier);
                    EditorGUILayout.PropertyField(nightLengthModifier);  
                    GUILayout.Space(5);
                    if(EnviroManager.instance != null)
                       EnviroManager.instance.dayNightSwitch = EditorGUILayout.Slider("Day Night Switch",EnviroManager.instance.dayNightSwitch,0.2f,0.7f);                               
                    
                    Repaint();
                }  
                GUILayout.EndVertical();

                if(myTarget.showTimeControls)
                    GUILayout.Space(10);

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showLocationControls = GUILayout.Toggle(myTarget.showLocationControls, "Location Controls", headerFoldout);            
                if(myTarget.showLocationControls)
                {
                    EditorGUILayout.PropertyField(latitude);
                    EditorGUILayout.PropertyField(longitude);            
                    EditorGUILayout.PropertyField(utcOffset);
                }  
                GUILayout.EndVertical();
                
                if(myTarget.showLocationControls)
                    GUILayout.Space(10);

                if(!Application.isPlaying) 
                    myTarget.UpdateModule();


                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);
                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                if(myTarget.showSaveLoad)
                    GUILayout.Space(10);

                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroTimeModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderFeature.cs---------------


#if ENVIRO_URP

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering.Universal;


namespace Enviro
{ 
    public class EnviroURPRenderFeature : ScriptableRendererFeature
    { 

 #if UNITY_6000_0_OR_NEWER

        private EnviroURPRenderGraph graph;
        private EnviroURPRenderPass pass;

        public override void Create()
        {
            //  if(UnityEngine.Rendering.GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
            pass = new EnviroURPRenderPass("Enviro Render Pass");
 
            graph = new EnviroURPRenderGraph();
            graph.renderPassEvent = RenderPassEvent.BeforeRenderingTransparents;
        } 

        public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
        {
            if(UnityEngine.Rendering.GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
            {
                if(pass != null && EnviroHelper.CanRenderOnCamera(renderingData.cameraData.camera))
                {
                    pass.scriptableRenderer = renderer;
                    renderer.EnqueuePass(pass);
                }
            }
            else
            {
                if(graph != null && EnviroHelper.CanRenderOnCamera(renderingData.cameraData.camera))
                {
                    renderer.EnqueuePass(graph);
                }
            } 
        }

#else
        private EnviroURPRenderPass pass;
        
        public override void Create()
        {
            pass = new EnviroURPRenderPass("Enviro Render Pass");
        } 

        public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
        {
            if(pass != null && EnviroHelper.CanRenderOnCamera(renderingData.cameraData.camera))
            {
                pass.scriptableRenderer = renderer;
                renderer.EnqueuePass(pass);
            }
        }  

#endif
  
    }
}
#endif


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderFeature.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderGraph.cs---------------


#if ENVIRO_URP && UNITY_6000_0_OR_NEWER
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.Rendering; 
using UnityEngine.Rendering.RenderGraphModule;

namespace Enviro {
    public class EnviroURPRenderGraph : ScriptableRenderPass
    {
        public class PassData
        {
            internal TextureHandle src;
            internal TextureHandle target;
            internal TextureHandle read1;
            internal TextureHandle read2;
            internal Vector4 scaleBias;
            internal string srcName;
            internal string read1Name;
            internal string read2Name;
            internal int pass;
            internal Material material;
        }

        private Vector4 m_ScaleBias = new Vector4(1f, 1f, 0f, 0f);
        private List<EnviroVolumetricCloudRenderer> volumetricCloudsRender = new List<EnviroVolumetricCloudRenderer>();

        private Material blitThroughMat, fogMat;
        private Vector3 floatingPointOriginMod = Vector3.zero;

        private EnviroVolumetricCloudRenderer CreateCloudsRenderer(Camera cam)
        {
            EnviroVolumetricCloudRenderer r = new EnviroVolumetricCloudRenderer();
            r.camera = cam;
            volumetricCloudsRender.Add(r);
            return r;
        }

        private EnviroVolumetricCloudRenderer GetCloudsRenderer(Camera cam)
        {
            for (int i = 0; i < volumetricCloudsRender.Count; i++)
            {
                if(volumetricCloudsRender[i].camera == cam)
                    return volumetricCloudsRender[i];
            }
            return CreateCloudsRenderer(cam);
        }


        public void Blit (string passName, RenderGraph renderGraph, Material mat, TextureHandle src, TextureHandle target, int pass)
        {
            using (var builder = renderGraph.AddRasterRenderPass<PassData>(passName, out var passData))
            {     
                passData.src = src;
                passData.target = target;
                passData.material = mat;
                passData.pass = pass;
                passData.scaleBias = m_ScaleBias;
                passData.srcName = "_MainTex";

                builder.UseTexture(passData.src,AccessFlags.Read);
                builder.SetRenderAttachment(passData.target, 0);
                //builder.AllowPassCulling(false); 

                builder.SetRenderFunc((PassData data, RasterGraphContext context) =>
                {
                    if(data.src.IsValid())
                       data.material.SetTexture(data.srcName, data.src);

                   Blitter.BlitTexture(context.cmd, data.scaleBias, data.material, data.pass);
                });
            } 
        }
        public void Blit (string passName, RenderGraph renderGraph, Material mat, TextureHandle src, TextureHandle target, int pass, TextureHandle read1, string read1Name)
        {
            using (var builder = renderGraph.AddRasterRenderPass<PassData>(passName, out var passData))
            {      
                passData.src = src;
                passData.target = target;
                passData.read1 = read1;
                passData.read1Name = read1Name;
                passData.material = mat;
                passData.pass = pass;
                passData.scaleBias = m_ScaleBias;
                passData.srcName = "_MainTex";


                builder.UseTexture(passData.src,AccessFlags.Read);
                builder.UseTexture(passData.read1,AccessFlags.Read);
                //builder.SetInputAttachment(read1,0);
                builder.SetRenderAttachment(passData.target, 0);
                //builder.AllowPassCulling(false); 

                builder.SetRenderFunc((PassData data, RasterGraphContext context) =>
                {
                    if(data.src.IsValid())
                       data.material.SetTexture(data.srcName, data.src);

                    if(data.read1.IsValid())
                       data.material.SetTexture(data.read1Name, data.read1); 

                   Blitter.BlitTexture(context.cmd,data.scaleBias, data.material, data.pass);
                });
            }
        }

        public void Blit (string passName, RenderGraph renderGraph, Material mat, TextureHandle src, TextureHandle target, int pass,TextureHandle read1, string read1Name,TextureHandle read2, string read2Name)
        {
            using (var builder = renderGraph.AddRasterRenderPass<PassData>(passName, out var passData))
            {           
                passData.src = src;
                passData.target = target;
                passData.read1 = read1;
                passData.read1Name = read1Name;
                passData.read2 = read2;
                passData.read2Name = read2Name;
                passData.material = mat;
                passData.pass = pass;
                passData.scaleBias = m_ScaleBias;
                passData.srcName = "_MainTex";



                builder.UseTexture(passData.src,AccessFlags.Read);
                builder.UseTexture(passData.read1,AccessFlags.Read);
                builder.UseTexture(passData.read2,AccessFlags.Read);
                //builder.SetInputAttachment(read1,0);
                builder.SetRenderAttachment(passData.target, 0);
                //builder.AllowPassCulling(false); 
 
                builder.SetRenderFunc((PassData data, RasterGraphContext context) =>
                {
                    if(data.src.IsValid())
                       data.material.SetTexture(data.srcName, data.src);

                    if(data.read1.IsValid())
                       data.material.SetTexture(data.read1Name, data.read1); 

                    if(data.read2.IsValid())
                       data.material.SetTexture(data.read2Name, data.read2);  

                   Blitter.BlitTexture(context.cmd, data.scaleBias, data.material, data.pass);
                });
            }
        }


        private void SetMatrix(Camera myCam)
        {
        #if ENABLE_VR || ENABLE_XR_MODULE
            if (UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced && myCam.stereoEnabled) 
            {
                // Both stereo eye inverse view matrices
                Matrix4x4 left_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse;
                Matrix4x4 right_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse;

                // Both stereo eye inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 left_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left);
                Matrix4x4 right_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right);
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(left_screen_from_view, true).inverse;
                Matrix4x4 right_view_from_screen = GL.GetGPUProjectionMatrix(right_screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                {
                    left_view_from_screen[1, 1] *= -1;
                    right_view_from_screen[1, 1] *= -1;
                }

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_RightWorldFromView", right_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
                Shader.SetGlobalMatrix("_RightViewFromScreen", right_view_from_screen);
            }
            else
            {
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            } 
        #else
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            #endif
        } 
        public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)
        {
              
            if(EnviroManager.instance == null)
               return; 

            UniversalResourceData resourceData = frameData.Get<UniversalResourceData>();
            UniversalCameraData cameraData = frameData.Get<UniversalCameraData>();


            if(EnviroHelper.ResetMatrix(cameraData.camera))
                cameraData.camera.ResetProjectionMatrix();

             EnviroQuality myQuality = EnviroHelper.GetQualityForCamera(cameraData.camera);

            //Set what to render on this camera.
            bool renderVolumetricClouds = false;
            bool renderFog = false;

            if(EnviroManager.instance.Quality != null)
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = myQuality.volumetricCloudsOverride.volumetricClouds;  

                if(EnviroManager.instance.Fog != null)
                    renderFog = myQuality.fogOverride.fog;  
            }
            else
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = EnviroManager.instance.VolumetricClouds.settingsQuality.volumetricClouds;

                if(EnviroManager.instance.Fog != null)
                    renderFog = EnviroManager.instance.Fog.Settings.fog;
            }

            if (EnviroManager.instance.Objects.worldAnchor != null) 
                floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                floatingPointOriginMod = Vector3.zero; 
 
            //Set some global matrixes used for all the enviro effects.
            SetMatrix(cameraData.camera);

            RenderTextureDescriptor desc = cameraData.cameraTargetDescriptor;
            desc.colorFormat = RenderTextureFormat.ARGBHalf;
            desc.msaaSamples = 1;
            desc.depthBufferBits = 0;

            TextureHandle source = UniversalRenderer.CreateRenderGraphTexture(renderGraph, desc, "CopyTexture", false);
            TextureHandle target = resourceData.activeColorTexture;

            if(blitThroughMat == null)
               blitThroughMat = new Material(Shader.Find("Hidden/EnviroBlitThroughURP17"));

            // This check is to avoid an error from the material preview in the scene
            if (!target.IsValid() || !source.IsValid())
                return;

            //Blit Main Texture
            using ( var builder = renderGraph.AddRasterRenderPass<PassData>("Enviro 3 Copy Texture", out var passData))
            {                     
                passData.src = target;
                passData.target = source;
                passData.material = blitThroughMat;
                passData.scaleBias = m_ScaleBias;

                
                builder.UseTexture(passData.src);
                builder.SetRenderAttachment(passData.target, 0);
                                 
                builder.SetRenderFunc((PassData data, RasterGraphContext context) =>
                {
                    data.material.SetTexture("_MainTex", data.src); 
                    Blitter.BlitTexture(context.cmd, data.scaleBias, data.material, 0);
                });
            }
             

            //Render volumetrics mask first
            if(EnviroManager.instance.Fog != null && renderFog)
               EnviroManager.instance.Fog.RenderVolumetricsURP(this,renderGraph,resourceData,cameraData,source);
          
            if(EnviroManager.instance.Fog != null && EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && renderFog)
            { 
                TextureHandle temp1 = UniversalRenderer.CreateRenderGraphTexture(renderGraph, desc, "Temp1", false);

                if(cameraData.camera.transform.position.y - floatingPointOriginMod.y < EnviroManager.instance.VolumetricClouds.settingsLayer1.bottomCloudsHeight)
                { 

                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(cameraData.camera);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(this,renderGraph, resourceData, cameraData,source,temp1, renderer, myQuality);   

                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && cameraData.camera.cameraType != CameraType.Reflection)
                    {
                        TextureHandle temp2 = UniversalRenderer.CreateRenderGraphTexture(renderGraph, desc, "Temp2", false);
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderGraph, resourceData, cameraData,temp1,temp2, renderer);   
                        EnviroManager.instance.Fog.RenderHeightFogURP(this, renderGraph,resourceData,cameraData,temp2,resourceData.activeColorTexture);
                    }
                    else
                    {
                        EnviroManager.instance.Fog.RenderHeightFogURP(this, renderGraph,resourceData,cameraData,temp1,resourceData.activeColorTexture);
                    }
                }
                else
                { 
                    EnviroManager.instance.Fog.RenderHeightFogURP(this, renderGraph,resourceData,cameraData,source,temp1);
                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(cameraData.camera);

                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && cameraData.camera.cameraType != CameraType.Reflection)
                    {
                        TextureHandle temp2 = UniversalRenderer.CreateRenderGraphTexture(renderGraph, desc, "Temp2", false);
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(this,renderGraph, resourceData, cameraData,temp1,temp2, renderer, myQuality);   
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderGraph, resourceData, cameraData,temp2,resourceData.activeColorTexture, renderer);  
                    }
                    else
                    {
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(this,renderGraph, resourceData, cameraData,temp1,resourceData.activeColorTexture, renderer, myQuality);   
                    }
                }
            }
            else if(EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && !renderFog)
            {
                EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(cameraData.camera);
                
                if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && cameraData.camera.cameraType != CameraType.Reflection)
                {
                    TextureHandle temp1 = UniversalRenderer.CreateRenderGraphTexture(renderGraph, desc, "Temp1", false);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(this,renderGraph, resourceData, cameraData,source,temp1, renderer, myQuality);   
                    EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderGraph, resourceData, cameraData,temp1,resourceData.activeColorTexture, renderer);  
                }
                else
                {
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(this,renderGraph, resourceData, cameraData,source,resourceData.activeColorTexture, renderer, myQuality);   
                }
            }
            else if (EnviroManager.instance.Fog != null && renderFog)
            {
                EnviroManager.instance.Fog.RenderHeightFogURP(this, renderGraph,resourceData,cameraData,source,resourceData.activeColorTexture);
            }
            else
            {


            }

        }
    }
}
#endif


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderGraph.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderPass.cs---------------


#if ENVIRO_URP
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.Rendering; 

namespace Enviro
{
    public class EnviroURPRenderPass : ScriptableRenderPass
    {      
        public ScriptableRenderer scriptableRenderer { get; set; }
        
        private Material blitThroughMat;
        private string passName;

        private List<EnviroVolumetricCloudRenderer> volumetricCloudsRender = new List<EnviroVolumetricCloudRenderer>();
        private Vector3 floatingPointOriginMod = Vector3.zero;

        public EnviroURPRenderPass (string name)
        { 
            renderPassEvent = RenderPassEvent.BeforeRenderingTransparents - 1;
            passName = name;
        }  
  
        public void CustomBlit(CommandBuffer cmd,Matrix4x4 matrix, RenderTargetIdentifier source, RenderTargetIdentifier target, Material mat, int pass)
        {
            cmd.SetGlobalTexture("_MainTex", source);
            cmd.SetRenderTarget(target, 0, CubemapFace.Unknown, -1);
            cmd.DrawMesh(RenderingUtils.fullscreenMesh, matrix, mat,0, pass);
        }

        public void CustomBlit(CommandBuffer cmd,Matrix4x4 matrix, RenderTargetIdentifier source, RenderTargetIdentifier target, Material mat)
        {
            cmd.SetGlobalTexture("_MainTex", source);
            cmd.SetRenderTarget(target, 0, CubemapFace.Unknown, -1);
            cmd.DrawMesh(RenderingUtils.fullscreenMesh, matrix, mat,0);
        }

        public void CustomBlit(CommandBuffer cmd,Matrix4x4 matrix, RenderTargetIdentifier source, RenderTargetIdentifier target)
        {
            if(blitThroughMat == null)
               blitThroughMat = new Material(Shader.Find("Hidden/EnviroBlitThrough"));
          
            cmd.SetGlobalTexture("_MainTex", source);
            cmd.SetRenderTarget(target, 0, CubemapFace.Unknown, -1);
            cmd.DrawMesh(RenderingUtils.fullscreenMesh, matrix, blitThroughMat);
        }

#if UNITY_2022_3_OR_NEWER 
        public void CustomBlit(CommandBuffer cmd,RTHandle source, RTHandle target, Material mat)
        {
            Blitter.BlitCameraTexture(cmd,source,target,mat,0);
        }

        public void CustomBlit(CommandBuffer cmd,RTHandle source, RTHandle target, Material mat, int pass)
        {
            Blitter.BlitCameraTexture(cmd,source,target,mat,pass);
        }

        public void CustomBlit(CommandBuffer cmd,RTHandle source, RTHandle target)
        {
            Blitter.BlitCameraTexture(cmd,source,target);
        }
#endif
 
        public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
        {
        #if UNITY_2022_3_OR_NEWER
            ConfigureTarget(scriptableRenderer.cameraColorTargetHandle);
        #else
            ConfigureTarget(scriptableRenderer.cameraColorTarget);
        #endif
            ConfigureInput(ScriptableRenderPassInput.Depth);
        }

        public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
        {
            if(GetCloudsRenderer(renderingData.cameraData.camera) == null)
            {
               CreateCloudsRenderer(renderingData.cameraData.camera);
            }
        }
 
        private EnviroVolumetricCloudRenderer CreateCloudsRenderer(Camera cam)
        {
            EnviroVolumetricCloudRenderer r = new EnviroVolumetricCloudRenderer();
            r.camera = cam;
            volumetricCloudsRender.Add(r);
            return r;
        }

        private EnviroVolumetricCloudRenderer GetCloudsRenderer(Camera cam)
        {
            for (int i = 0; i < volumetricCloudsRender.Count; i++)
            {
                if(volumetricCloudsRender[i].camera == cam)
                   return volumetricCloudsRender[i];
            }
            return CreateCloudsRenderer(cam);
        }

        private void SetMatrix(Camera myCam)
        {
        #if ENABLE_VR || ENABLE_XR_MODULE
            if (UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced && myCam.stereoEnabled) 
            {
                // Both stereo eye inverse view matrices
                Matrix4x4 left_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse;
                Matrix4x4 right_world_from_view = myCam.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse;

                // Both stereo eye inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 left_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left);
                Matrix4x4 right_screen_from_view = myCam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right);
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(left_screen_from_view, true).inverse;
                Matrix4x4 right_view_from_screen = GL.GetGPUProjectionMatrix(right_screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                {
                    left_view_from_screen[1, 1] *= -1;
                    right_view_from_screen[1, 1] *= -1;
                }

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_RightWorldFromView", right_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
                Shader.SetGlobalMatrix("_RightViewFromScreen", right_view_from_screen);
            }
            else
            {
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            } 
        #else
                // Main eye inverse view matrix
                Matrix4x4 left_world_from_view = myCam.cameraToWorldMatrix;

                // Inverse projection matrices, plumbed through GetGPUProjectionMatrix to compensate for render texture
                Matrix4x4 screen_from_view = myCam.projectionMatrix;
                Matrix4x4 left_view_from_screen = GL.GetGPUProjectionMatrix(screen_from_view, true).inverse;

                // Negate [1,1] to reflect Unity's CBuffer state
                if (SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore && SystemInfo.graphicsDeviceType != UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3)
                    left_view_from_screen[1, 1] *= -1;

                Shader.SetGlobalMatrix("_LeftWorldFromView", left_world_from_view);
                Shader.SetGlobalMatrix("_LeftViewFromScreen", left_view_from_screen);
            #endif
        } 

        public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
        {
            if(EnviroManager.instance == null)
               return; 
                
            CommandBuffer cmd = CommandBufferPool.Get(passName);

            if(EnviroHelper.ResetMatrix(renderingData.cameraData.camera))
                renderingData.cameraData.camera.ResetProjectionMatrix();

            EnviroQuality myQuality = EnviroHelper.GetQualityForCamera(renderingData.cameraData.camera);

            //Set what to render on this camera.
            bool renderVolumetricClouds = false;
            bool renderFog = false;

            if(EnviroManager.instance.Quality != null)
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = myQuality.volumetricCloudsOverride.volumetricClouds;  

                if(EnviroManager.instance.Fog != null)
                    renderFog = myQuality.fogOverride.fog;  
            }
            else
            {
                if(EnviroManager.instance.VolumetricClouds != null)
                    renderVolumetricClouds = EnviroManager.instance.VolumetricClouds.settingsQuality.volumetricClouds;

                if(EnviroManager.instance.Fog != null)
                    renderFog = EnviroManager.instance.Fog.Settings.fog;
            }

            if (EnviroManager.instance.Objects.worldAnchor != null) 
                floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                floatingPointOriginMod = Vector3.zero; 

            //Set some global matrixes used for all the enviro effects.
            SetMatrix(renderingData.cameraData.camera);
 
            //Create temporary texture and blit the camera content.
            RenderTexture sourceTemp = RenderTexture.GetTemporary(renderingData.cameraData.cameraTargetDescriptor);

    #if UNITY_2022_3_OR_NEWER 
            RenderTargetIdentifier cameraColorTarget = scriptableRenderer.cameraColorTargetHandle.nameID;
    #else
            RenderTargetIdentifier cameraColorTarget = scriptableRenderer.cameraColorTarget;      
    #endif   

            CustomBlit(cmd, Matrix4x4.identity,cameraColorTarget, new RenderTargetIdentifier(sourceTemp)); 

            //Render volumetrics mask first
            if(EnviroManager.instance.Fog != null && renderFog)
               EnviroManager.instance.Fog.RenderVolumetricsURP(renderingData.cameraData.camera,this,cmd,sourceTemp);

            if(EnviroManager.instance.Fog != null && EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && renderFog)
            { 
                RenderTexture temp1 = RenderTexture.GetTemporary(renderingData.cameraData.cameraTargetDescriptor);

                if(renderingData.cameraData.camera.transform.position.y - floatingPointOriginMod.y  < EnviroManager.instance.VolumetricClouds.settingsLayer1.bottomCloudsHeight)
                { 
                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(renderingData.cameraData.camera);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(renderingData,this,cmd, sourceTemp, temp1, renderer, myQuality);

                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && renderingData.cameraData.camera.cameraType != CameraType.Reflection)
                    {
                        RenderTexture temp2 = RenderTexture.GetTemporary(renderingData.cameraData.cameraTargetDescriptor);
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderingData.cameraData.camera,cmd,temp1,temp2,renderer);
                        EnviroManager.instance.Fog.RenderHeightFogURP(renderingData.cameraData.camera,this,cmd,temp2,cameraColorTarget);
                        RenderTexture.ReleaseTemporary(temp2);
                    }
                    else
                    {
                        EnviroManager.instance.Fog.RenderHeightFogURP(renderingData.cameraData.camera,this,cmd,temp1,cameraColorTarget);
                    }
                }
                else
                { 
                    EnviroManager.instance.Fog.RenderHeightFogURP(renderingData.cameraData.camera,this,cmd,sourceTemp,temp1);
                    EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(renderingData.cameraData.camera);
                  
                    
                    if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && renderingData.cameraData.camera.cameraType != CameraType.Reflection)
                    {
                        RenderTexture temp2 = RenderTexture.GetTemporary(renderingData.cameraData.cameraTargetDescriptor);
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(renderingData,this,cmd, temp1, temp2, renderer, myQuality);
                        EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderingData.cameraData.camera,cmd,temp2,cameraColorTarget,renderer);
                        RenderTexture.ReleaseTemporary(temp2);
                    }
                    else
                    {
                        EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(renderingData,this,cmd, temp1, cameraColorTarget, renderer, myQuality);
                    }  
                }

                context.ExecuteCommandBuffer(cmd);
                RenderTexture.ReleaseTemporary(temp1);
            }
            else if(EnviroManager.instance.VolumetricClouds != null && renderVolumetricClouds && !renderFog)
            {
                EnviroVolumetricCloudRenderer renderer = GetCloudsRenderer(renderingData.cameraData.camera);
                  
                if(EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadows && renderingData.cameraData.camera.cameraType != CameraType.Reflection)
                {
                    RenderTexture temp1 = RenderTexture.GetTemporary(renderingData.cameraData.cameraTargetDescriptor);
                    EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(renderingData,this,cmd, sourceTemp, temp1, renderer, myQuality);
                    EnviroManager.instance.VolumetricClouds.RenderCloudsShadowsURP(this,renderingData.cameraData.camera,cmd,temp1,cameraColorTarget,renderer);
                    RenderTexture.ReleaseTemporary(temp1); 
                }
                else
                {
                     EnviroManager.instance.VolumetricClouds.RenderVolumetricCloudsURP(renderingData,this,cmd, sourceTemp, cameraColorTarget, renderer, myQuality);
                } 
                context.ExecuteCommandBuffer(cmd); 
                
            } 
            else if (Enviro.EnviroManager.instance.Fog != null && renderFog)
            {
                EnviroManager.instance.Fog.RenderHeightFogURP(renderingData.cameraData.camera,this,cmd,sourceTemp,cameraColorTarget);
                context.ExecuteCommandBuffer(cmd);
            }
            else
            {
                //Render Nothing
            }

            if(!renderVolumetricClouds)
                Shader.SetGlobalTexture("_EnviroClouds", Texture2D.blackTexture);

            //Release source temp render texture
            CommandBufferPool.Release(cmd);
            RenderTexture.ReleaseTemporary(sourceTemp);
        }
    }
}
#endif


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroURPRenderPass.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroVolumetricCloudsModule.cs---------------


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using UnityEngine.Rendering;
using UnityEngine.Experimental.Rendering;

namespace Enviro 
{   
 
    [Serializable] 
    public class EnviroVolumetricCloudsQuality 
    {
		public bool volumetricClouds = true;
        [Range(1,6)]
        public int downsampling = 4;
        [Range(32,256)]
		public int stepsLayer1 = 128;
        [Range(32,256)]
		public int stepsLayer2 = 64;
        [Range(0f,2f)]
        public float blueNoiseIntensity = 1f;
        [Range(0f,10f)]
		public float reprojectionBlendTime = 10f;
        [Range(0f,1f)]
		public float lodDistance = 0.25f;

    }

    [Serializable] 
    public class EnviroCloudGlobalSettings 
    {
        public bool dualLayer = false;

        public Vector3 floatingPointOriginMod;
        public Gradient sunLightColorGradient;
        public Gradient moonLightColorGradient;
        public Gradient ambientColorGradient;

        public Color sunLightColor;
        public Color moonLightColor;
        public Color ambientColor;

        public bool depthBlending = false;
        public bool depthTest = true;

        public Texture3D noise; 
        public Texture3D detailNoise;
        public Texture2D curlTex;
        public Texture2D blueNoise;

        public Texture customWeatherMap;

        public float cloudsWorldScale = 5000000f;
        public float maxRenderDistance = 75000f;
        public float atmosphereColorSaturateDistance = 25000f;
        [Range(0.0f, 2.0f)]
        public float ambientLighIntensity = 1f;

        public bool cloudShadows = true;
        [Range(0.0f, 2.0f)]
        public float cloudShadowsIntensity = 1f;

        [Range(0.0f, 1f)]
        public float cloudsTravelSpeed = 0.5f;
    }


    [Serializable] 
    public class EnviroCloudLayerSettings 
    { 
        [Range(-1f,1f)]
        public float cloudsWindDirectionXModifier = 1f;
        [Range(-1f,1f)]
        public float cloudsWindDirectionYModifier = 1f;
        [Range(-0.1f,0.1f)] 
        public float windSpeedModifier = 1f;
        [Range(0f,0.1f)]
        public float windUpwards = 1f;

        [Range(-1f,1f)]
        public float coverage = 1f;
        public float worleyFreq2 = 4f;
        public float worleyFreq1 = 1f;
        [Range(0f,1f)]
        public float dilateCoverage = 0.5f;
        [Range(0f,1f)]
        public float dilateType = 0.5f;
        [Range(0f,1f)]
        public float cloudsTypeModifier = 0.5f;
        public Vector2 locationOffset;

        public float bottomCloudsHeight = 2000f;
        public float topCloudsHeight = 8000f;
 
        [Range(0f,2f)]
        public float density = 0.3f;
        [Range(0f,2f)]
        public float densitySmoothness = 1.0f;
        [Range(0f,2f)]
        public float scatteringIntensity = 1f;
        [Range(0f,1f)] 
        public float silverLiningSpread = 0.8f;
        [Range(0f,1f)]
        public float powderIntensity = 0.5f;
        [Range(0f,1f)]
        public float curlIntensity = 0.25f;
        [Range(0f,0.25f)] 
        public float lightStepModifier = 0.05f;

        [Range(0f,2f)]
        public float lightAbsorbtion = 0.5f;  
 
        [Range(0f,1f)]
        public float multiScatteringA = 0.5f;
        [Range(0f,1f)]
        public float multiScatteringB = 0.5f; 
        [Range(0f,1f)]
        public float multiScatteringC = 0.5f;

        public float baseNoiseUV = 15f;
        public float detailNoiseUV = 50f;

        [Range(0.0f, 1.0f)]
        public float baseErosionIntensity = 0f;
        [Range(0.0f, 1.0f)]
        public float detailErosionIntensity = 0.3f;
        [Range(0.0f, 1.0f)]
        public float anvilBias = 0.0f;
    }

    public class EnviroVolumetricCloudRenderer
    { 
        // Clouds Rendering
        public Camera camera;
        public Material raymarchMat;
        public Material reprojectMat;
        public Material depthMat;
        public Material blendAndLightingMat; 
        public Material shadowMat;
        public RenderTexture[] fullBuffer;
        public int fullBufferIndex; 
        public RenderTexture undersampleBuffer;
        public RenderTexture downsampledDepth;
        public Matrix4x4 prevV;
        public int frame = 0;
        public bool firstFrame = true;

#if ENVIRO_HDRP
    public UnityEngine.Rendering.RTHandle[] fullBufferHandles;
    public UnityEngine.Rendering.RTHandle undersampleBufferHandle;
    public UnityEngine.Rendering.RTHandle downsampledDepthHandle;
#endif
#if ENVIRO_URP
#if UNITY_6000_0_OR_NEWER
    public UnityEngine.Rendering.RenderGraphModule.TextureHandle[] fullBufferHandles;
    public UnityEngine.Rendering.RenderGraphModule.TextureHandle undersampleBufferHandle;
    public UnityEngine.Rendering.RenderGraphModule.TextureHandle downsampledDepthHandle;

    public UnityEngine.Rendering.RTHandle[] fullBufferRTHandles;
    public UnityEngine.Rendering.RTHandle undersampleRTBufferHandle;
    public UnityEngine.Rendering.RTHandle downsampledRTDepthHandle;
#endif
#endif
    }

    [Serializable]
    [ExecuteInEditMode]
    public class EnviroVolumetricCloudsModule : EnviroModule
    {   
        //Base
        public Enviro.EnviroCloudLayerSettings settingsLayer1;
        public Enviro.EnviroCloudLayerSettings settingsLayer2;
        public Enviro.EnviroCloudGlobalSettings settingsGlobal;
        public Enviro.EnviroVolumetricCloudsQuality settingsQuality;
        public EnviroVolumetricCloudsModule preset;

        //Inspector
        public bool showGlobalControls;
        public bool showLayer1Controls; 
        public bool showLayer2Controls;
        public bool showCoverageControls;
        public bool showLightingControls;
        public bool showDensityControls;
        public bool showTextureControls;
        public bool showWindControls;

        //Wind
        public Vector3 cloudAnimLayer1;
        public Vector3 cloudAnimLayer2;
        public Vector3 cloudAnimNonScaledLayer1;
        public Vector3 cloudAnimNonScaledLayer2;

        //Weather Map
        public RenderTexture weatherMap;
        private Material weatherMapMat;
        private ComputeShader weatherMapCS;

        private Light dirLight;

        private bool offsetMoved = false;
        private Vector3 lastOffset = Vector3.zero;

        //Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

            if(EnviroManager.instance == null)
               return;

            UpdateWind();
            UnityEngine.Profiling.Profiler.BeginSample("Enviro Clouds Weather Map");
            weatherMap = EnviroManager.instance.VolumetricClouds.RenderWeatherMap();
            UnityEngine.Profiling.Profiler.EndSample(); 
        }
 
        public override void Enable()
        {

        }

        public override void Disable() 
        {
            if(weatherMapMat != null)
               DestroyImmediate(weatherMapMat);

            if(weatherMap != null)
               DestroyImmediate(weatherMap);
        }

        public void RenderCloudsShadows(RenderTexture source, RenderTexture destination, EnviroVolumetricCloudRenderer renderer)
        {
             if(renderer.shadowMat == null)
                renderer.shadowMat = new Material(Shader.Find("Hidden/EnviroApplyShadows"));

                renderer.shadowMat.SetTexture("_CloudsTex",renderer.undersampleBuffer);
                renderer.shadowMat.SetFloat("_Intensity",EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadowsIntensity);

                renderer.shadowMat.SetTexture("_MainTex",source);
                Graphics.Blit(source,destination,renderer.shadowMat);
        }

#if ENVIRO_URP 
        public void RenderCloudsShadowsURP(EnviroURPRenderPass pass,Camera cam, UnityEngine.Rendering.CommandBuffer cmd, RenderTexture source, UnityEngine.Rendering.RenderTargetIdentifier destination, EnviroVolumetricCloudRenderer renderer)
        { 
             if(renderer.shadowMat == null)
                renderer.shadowMat = new Material(Shader.Find("Hidden/EnviroApplyShadows"));

                renderer.shadowMat.SetTexture("_CloudsTex",renderer.undersampleBuffer);
                renderer.shadowMat.SetFloat("_Intensity",EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadowsIntensity);

                renderer.shadowMat.EnableKeyword("ENVIROURP");
                pass.CustomBlit(cmd,cam.cameraToWorldMatrix,source,destination,renderer.shadowMat);
        } 

#if UNITY_6000_0_OR_NEWER
        public void RenderCloudsShadowsURP(EnviroURPRenderGraph pass,UnityEngine.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.Universal.UniversalResourceData resourceData, UnityEngine.Rendering.Universal.UniversalCameraData cameraData, UnityEngine.Rendering.RenderGraphModule.TextureHandle src, UnityEngine.Rendering.RenderGraphModule.TextureHandle target, EnviroVolumetricCloudRenderer renderer)
        {
             if(renderer.shadowMat == null)
                renderer.shadowMat = new Material(Shader.Find("Hidden/EnviroApplyShadowsURP"));

                //renderer.shadowMat.SetTexture("_CloudsTex",renderer.undersampleBuffer);
                renderer.shadowMat.SetFloat("_Intensity",EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadowsIntensity);

                renderer.shadowMat.EnableKeyword("ENVIROURP");
                //pass.CustomBlit(cmd,cam.cameraToWorldMatrix,source,destination,renderer.shadowMat);
                pass.Blit("Apply Cloud Shadows", renderGraph,renderer.shadowMat,src,target,0, renderer.undersampleBufferHandle, "_CloudsTex");
        } 
#endif
#endif

#if ENVIRO_HDRP
        public void RenderCloudsShadowsHDRP(Camera cam, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, EnviroVolumetricCloudRenderer renderer)
        {
             if(renderer.shadowMat == null)
                renderer.shadowMat = new Material(Shader.Find("Hidden/EnviroApplyShadowsHDRP"));

                renderer.shadowMat.SetTexture("_MainTex",source);
                renderer.shadowMat.SetTexture("_CloudsTex",renderer.undersampleBufferHandle);
                renderer.shadowMat.SetVector("_HandleScales", new Vector4(1/renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.x,1/renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.y,1,1)); 
                renderer.shadowMat.SetFloat("_Intensity",EnviroManager.instance.VolumetricClouds.settingsGlobal.cloudShadowsIntensity);
                cmd.Blit(source,destination,renderer.shadowMat);
        }
#endif
        /// Render Clouds
        public void RenderVolumetricClouds(Camera cam, RenderTexture source, RenderTexture destination, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        {
            UnityEngine.Profiling.Profiler.BeginSample("Enviro Clouds Rendering");

            int downsampling = settingsQuality.downsampling;

            if(quality != null)
               downsampling = quality.volumetricCloudsOverride.downsampling;

            int width = cam.pixelWidth / downsampling;
            int height = cam.pixelHeight / downsampling;

            if(cam.cameraType != CameraType.Reflection)
            {
                if (renderer.fullBuffer == null || renderer.fullBuffer.Length != 2)
                {
                    renderer.fullBuffer = new RenderTexture[2];
                }
                renderer.fullBufferIndex = (renderer.fullBufferIndex + 1) % 2;

                renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[0], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);
                renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[1], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);
            }
            renderer.firstFrame |= CreateRenderTexture(ref renderer.undersampleBuffer, width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);

            renderer.frame++; 

            if(renderer.frame > 64)
              renderer.frame = 0;   
 
            if(renderer.depthMat == null)
               renderer.depthMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsDepth"));
 
            CreateRenderTexture(ref renderer.downsampledDepth, width, height, RenderTextureFormat.RFloat, FilterMode.Point, source.descriptor);
          
            renderer.depthMat.SetTexture("_MainTex", source);
            renderer.depthMat.SetVector("_CameraDepthTexture_TexelSize", new Vector4(1 / source.width, 1 / source.height, source.width, source.height));


            if (downsampling > 1)  
            {
                Graphics.Blit(source, renderer.downsampledDepth, renderer.depthMat, 0);  //Downsample the texture.
            } 
            else 
            {
                Graphics.Blit(source, renderer.downsampledDepth, renderer.depthMat, 1);  //Just copy it.
            }        
  
            //1. Raymarch
            SetRaymarchShader(cam,renderer, quality);
            renderer.raymarchMat.SetTexture("_MainTex", source);
            Graphics.Blit(source,renderer.undersampleBuffer,renderer.raymarchMat);


            //Pass 2: Reprojection
            if(cam.cameraType != CameraType.Reflection)
            {
                if(renderer.reprojectMat == null)
                   renderer.reprojectMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsReproject"));
                SetReprojectShader(cam, renderer, quality);
    
                if (renderer.firstFrame) 
                {
                    Graphics.Blit(renderer.undersampleBuffer, renderer.fullBuffer[renderer.fullBufferIndex]);
                }

                renderer.reprojectMat.SetTexture("_MainTex", renderer.fullBuffer[renderer.fullBufferIndex]);
                Graphics.Blit(renderer.fullBuffer[renderer.fullBufferIndex], renderer.fullBuffer[renderer.fullBufferIndex ^ 1], renderer.reprojectMat);
            } 
            //Pass 3: Lighting and Blending
            if(renderer.blendAndLightingMat == null)
               renderer.blendAndLightingMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsBlend"));
            SetBlendShader(cam,renderer);
            renderer.blendAndLightingMat.SetTexture("_MainTex", source);
            Graphics.Blit(source, destination, renderer.blendAndLightingMat);

            renderer.prevV = cam.worldToCameraMatrix;
            renderer.firstFrame = false;

            UnityEngine.Profiling.Profiler.EndSample();
        }

 #if ENVIRO_URP 
 #if UNITY_6000_0_OR_NEWER
        public void RenderVolumetricCloudsURP(EnviroURPRenderGraph pass,UnityEngine.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.Universal.UniversalResourceData resourceData, UnityEngine.Rendering.Universal.UniversalCameraData cameraData, UnityEngine.Rendering.RenderGraphModule.TextureHandle src, UnityEngine.Rendering.RenderGraphModule.TextureHandle target, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        {
            
            //UnityEngine.Profiling.Profiler.BeginSample("Enviro Clouds Rendering");

            int downsampling = settingsQuality.downsampling;

            if(quality != null)
               downsampling = quality.volumetricCloudsOverride.downsampling;

            int width = cameraData.camera.pixelWidth / downsampling;
            int height = cameraData.camera.pixelHeight / downsampling; 

            UnityEngine.Rendering.RenderGraphModule.TextureDesc t = src.GetDescriptor(renderGraph);
            RenderTextureDescriptor dsc = new RenderTextureDescriptor(t.width,t.height,RenderTextureFormat.ARGBHalf,0);
            dsc.vrUsage = t.vrUsage;
            dsc.width = width;
            dsc.height = height;

            if(cameraData.camera.cameraType != CameraType.Reflection)
            {
                if (renderer.fullBufferHandles == null || renderer.fullBufferHandles.Length != 2)
                {
                    renderer.fullBufferHandles = new UnityEngine.Rendering.RenderGraphModule.TextureHandle[2];
                }

                if (renderer.fullBufferRTHandles == null || renderer.fullBufferRTHandles.Length != 2)
                {
                    renderer.fullBufferRTHandles = new UnityEngine.Rendering.RTHandle[2];
                }

                if (renderer.fullBuffer == null || renderer.fullBuffer.Length != 2)
                {
                    renderer.fullBuffer = new RenderTexture[2];
                }

                renderer.fullBufferIndex = (renderer.fullBufferIndex + 1) % 2;
         
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBufferHandles[0],renderGraph, width, height, GraphicsFormat.R16G16B16A16_SFloat, FilterMode.Bilinear,t);
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBufferHandles[1],renderGraph, width, height, GraphicsFormat.R16G16B16A16_SFloat, FilterMode.Bilinear,t);
           
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[0], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,dsc);
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[1], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,dsc);

            //renderer.fullBufferHandles[0] = renderGraph.ImportTexture(RTHandles.Alloc(renderer.fullBuffer[0]));
            //renderer.fullBufferHandles[1] = renderGraph.ImportTexture(RTHandles.Alloc(renderer.fullBuffer[1]));

            renderer.firstFrame |= UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateHandleIfNeeded(ref renderer.fullBufferRTHandles[0], dsc, FilterMode.Bilinear, TextureWrapMode.Clamp, name: "Enviro Clouds History Buffer 0" );
            renderer.firstFrame |= UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateHandleIfNeeded(ref renderer.fullBufferRTHandles[1], dsc, FilterMode.Bilinear, TextureWrapMode.Clamp, name: "Enviro Clouds History Buffer 1" );
            
            renderer.fullBufferHandles[0] = renderGraph.ImportTexture(renderer.fullBufferRTHandles[0]);
            renderer.fullBufferHandles[1] = renderGraph.ImportTexture(renderer.fullBufferRTHandles[1]);

            }    
            
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.undersampleBufferHandle,renderGraph, width , height, GraphicsFormat.R16G16B16A16_SFloat, FilterMode.Bilinear,t); 
            //renderer.firstFrame |= CreateRenderTexture(ref renderer.undersampleBuffer, width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,dsc);
            //renderer.undersampleBufferHandle = renderGraph.ImportTexture(RTHandles.Alloc(renderer.undersampleBuffer));
            
            renderer.firstFrame |= UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateHandleIfNeeded(ref renderer.undersampleRTBufferHandle, dsc, FilterMode.Bilinear, TextureWrapMode.Clamp, name: "Enviro Clouds Undersample Buffer" );
            renderer.undersampleBufferHandle = renderGraph.ImportTexture(renderer.undersampleRTBufferHandle);
            
            renderer.frame++;
 
            if(renderer.frame > 64)
              renderer.frame = 0;   
 
            if(renderer.depthMat == null)
               renderer.depthMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsDepthURP"));
            
            renderer.depthMat.SetVector("_CameraDepthTexture_TexelSize", new Vector4(1 / cameraData.cameraTargetDescriptor.width, 1 / cameraData.cameraTargetDescriptor.height, cameraData.cameraTargetDescriptor.width, cameraData.cameraTargetDescriptor.height));
            
            SetToURP(renderer.depthMat);   
            CreateRenderTexture(ref renderer.downsampledDepthHandle,renderGraph, width, height, GraphicsFormat.R32_SFloat, FilterMode.Point, t);
            
            if (downsampling > 1) 
            {   
                pass.Blit("Downsample Depth", renderGraph,renderer.depthMat,src,renderer.downsampledDepthHandle,0);
            } 
            else 
            {
                pass.Blit("Copy Depth", renderGraph,renderer.depthMat,src,renderer.downsampledDepthHandle,1);
            }        
  
            //1. Raymarch
            SetRaymarchShader(cameraData.camera,renderer, quality);
            SetToURP(renderer.raymarchMat);     
            
            pass.Blit("Raymarch", renderGraph,renderer.raymarchMat,src,renderer.undersampleBufferHandle,0, renderer.downsampledDepthHandle, "_DownsampledDepth");


            //Pass 2: Reprojection
            if(cameraData.camera.cameraType != CameraType.Reflection)
            {     
                if(renderer.reprojectMat == null)
                   renderer.reprojectMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsReprojectURP"));

                SetReprojectShader(cameraData.camera, renderer, quality);
                SetToURP(renderer.reprojectMat);

                if (renderer.firstFrame)  
                    pass.Blit("Reproject First Frame", renderGraph,renderer.reprojectMat,renderer.undersampleBufferHandle,renderer.fullBufferHandles[renderer.fullBufferIndex],0, renderer.downsampledDepthHandle, "_DownsampledDepth", renderer.undersampleBufferHandle, "_UndersampleCloudTex");              
             
                pass.Blit("Reproject", renderGraph,renderer.reprojectMat,renderer.fullBufferHandles[renderer.fullBufferIndex],renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1],0, renderer.downsampledDepthHandle, "_DownsampledDepth", renderer.undersampleBufferHandle, "_UndersampleCloudTex");           
            }

            //Pass 3: Lighting and Blending       
            if(renderer.blendAndLightingMat == null)
               renderer.blendAndLightingMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsBlendURP"));

            SetBlendShader(cameraData.camera,renderer);
            SetToURP(renderer.blendAndLightingMat);     

            if(cameraData.camera.cameraType != CameraType.Reflection)     
                pass.Blit("Blend", renderGraph,renderer.blendAndLightingMat,src,target,0, renderer.downsampledDepthHandle,"_DownsampledDepth", renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1], "_CloudTex");  
            else
                pass.Blit("Blend", renderGraph,renderer.blendAndLightingMat,src,target,0, renderer.downsampledDepthHandle,"_DownsampledDepth", renderer.undersampleBufferHandle, "_CloudTex");  
  
            renderer.prevV = cameraData.camera.worldToCameraMatrix;
            renderer.firstFrame = false;
 
            //UnityEngine.Profiling.Profiler.EndSample();
        }

#endif

        public void RenderVolumetricCloudsURP(UnityEngine.Rendering.Universal.RenderingData renderingData, EnviroURPRenderPass pass, UnityEngine.Rendering.CommandBuffer cmd,  RenderTexture source, UnityEngine.Rendering.RenderTargetIdentifier destination, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        {
            UnityEngine.Profiling.Profiler.BeginSample("Enviro Clouds Rendering");

            int downsampling = settingsQuality.downsampling;

            if(quality != null)
               downsampling = quality.volumetricCloudsOverride.downsampling;

            int width = renderingData.cameraData.camera.pixelWidth / downsampling;
            int height = renderingData.cameraData.camera.pixelHeight / downsampling;

            if(renderingData.cameraData.camera.cameraType != CameraType.Reflection)
            {
                if (renderer.fullBuffer == null || renderer.fullBuffer.Length != 2)
                {
                    renderer.fullBuffer = new RenderTexture[2];
                }
                renderer.fullBufferIndex = (renderer.fullBufferIndex + 1) % 2;
        

            renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[0], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);
            renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[1], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);
            }  
            
            renderer.firstFrame |= CreateRenderTexture(ref renderer.undersampleBuffer, width , height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,source.descriptor);

            renderer.frame++;
 
            if(renderer.frame > 64)
              renderer.frame = 0;   
 
            if(renderer.depthMat == null)
               renderer.depthMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsDepth"));
            
            renderer.depthMat.SetVector("_CameraDepthTexture_TexelSize", new Vector4(1 / renderingData.cameraData.cameraTargetDescriptor.width, 1 / renderingData.cameraData.cameraTargetDescriptor.height, renderingData.cameraData.cameraTargetDescriptor.width, renderingData.cameraData.cameraTargetDescriptor.height));
            
            SetToURP(renderer.depthMat);   
            CreateRenderTexture(ref renderer.downsampledDepth, width, height, RenderTextureFormat.RFloat, FilterMode.Point, source.descriptor);
            
            if (downsampling > 1) 
            {
                pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,source,renderer.downsampledDepth,renderer.depthMat,0);
            } 
            else 
            {
                pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,source,renderer.downsampledDepth,renderer.depthMat,1);
            }        
  
            //1. Raymarch
            
            SetRaymarchShader(renderingData.cameraData.camera,renderer, quality);
           
            SetToURP(renderer.raymarchMat);     
            pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,source,renderer.undersampleBuffer,renderer.raymarchMat);
  
            //Pass 2: Reprojection
            if(renderingData.cameraData.camera.cameraType != CameraType.Reflection)
            {     
                if(renderer.reprojectMat == null)
                   renderer.reprojectMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsReproject"));
                SetReprojectShader(renderingData.cameraData.camera, renderer, quality);
                SetToURP(renderer.reprojectMat);
                
                if (renderer.firstFrame) 
                    pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,renderer.undersampleBuffer,renderer.fullBuffer[renderer.fullBufferIndex]);

                pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,renderer.fullBuffer[renderer.fullBufferIndex],renderer.fullBuffer[renderer.fullBufferIndex ^ 1],renderer.reprojectMat);
            }

            //Pass 3: Lighting and Blending       
            if(renderer.blendAndLightingMat == null)
               renderer.blendAndLightingMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsBlend"));
            SetBlendShader(renderingData.cameraData.camera,renderer);
            SetToURP(renderer.blendAndLightingMat); 
            pass.CustomBlit(cmd,renderingData.cameraData.camera.cameraToWorldMatrix,source,destination,renderer.blendAndLightingMat);

            renderer.prevV = renderingData.cameraData.camera.worldToCameraMatrix;
            renderer.firstFrame = false;
 
            UnityEngine.Profiling.Profiler.EndSample();
        }
#endif

#if ENVIRO_HDRP 
        public void RenderVolumetricCloudsHDRP(Camera cam, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        { 
            //UnityEngine.Profiling.Profiler.BeginSample("Enviro Clouds Rendering");
 
            int downsampling = settingsQuality.downsampling;

            if(quality != null)
               downsampling = quality.volumetricCloudsOverride.downsampling;

            int width = cam.pixelWidth / downsampling;
            int height = cam.pixelHeight / downsampling;

            RenderTextureDescriptor desc = source.rt.descriptor;
            //desc.dimension = UnityEngine.Rendering.TextureDimension.Tex2D;
  
            if(cam.cameraType != CameraType.Reflection)
            {
                if (renderer.fullBuffer == null || renderer.fullBuffer.Length != 2)
                {
                    renderer.fullBuffer = new RenderTexture[2];
                    renderer.fullBufferHandles = new UnityEngine.Rendering.RTHandle[2];
                }
                renderer.fullBufferIndex = (renderer.fullBufferIndex + 1) % 2;

                renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[0], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,desc);
                renderer.firstFrame |= CreateRenderTexture(ref renderer.fullBuffer[1], width, height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,desc);
                
                renderer.fullBufferHandles[0] = UnityEngine.Rendering.RTHandles.Alloc(renderer.fullBuffer[0]);
                renderer.fullBufferHandles[1] = UnityEngine.Rendering.RTHandles.Alloc(renderer.fullBuffer[1]);     
            }
            renderer.firstFrame |= CreateRenderTexture(ref renderer.undersampleBuffer, width , height, RenderTextureFormat.ARGBHalf, FilterMode.Bilinear,desc);
            renderer.undersampleBufferHandle = UnityEngine.Rendering.RTHandles.Alloc(renderer.undersampleBuffer);


            renderer.frame++; 

            if(renderer.frame > 64)
              renderer.frame = 0;   
 
            if(renderer.depthMat == null)
               renderer.depthMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsDepthHDRP"));
 
            CreateRenderTexture(ref renderer.downsampledDepth, width, height, RenderTextureFormat.RFloat, FilterMode.Point, desc);
            renderer.downsampledDepthHandle = UnityEngine.Rendering.RTHandles.Alloc(renderer.downsampledDepth);      
            renderer.depthMat.SetTexture("_MainTex", source);

            if (downsampling > 1) 
            {
                cmd.Blit(source, renderer.downsampledDepthHandle, renderer.depthMat, 0);  //Downsample the texture.
            } 
            else 
            {
                cmd.Blit(source, renderer.downsampledDepthHandle, renderer.depthMat, 1);  //Just copy it.
            }        

           
            //1. Raymarch 
            SetRaymarchShader(cam,renderer, quality);
            renderer.raymarchMat.SetTexture("_MainTex", source);
            cmd.Blit(source,renderer.undersampleBufferHandle,renderer.raymarchMat);


            //Pass 2: Reprojection
            if(cam.cameraType != CameraType.Reflection)
            {
                if(renderer.reprojectMat == null)
                   renderer.reprojectMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsReprojectHDRP"));

                SetReprojectShader(cam, renderer, quality);
    
                if (renderer.firstFrame) 
                {
                    cmd.Blit(renderer.undersampleBufferHandle, renderer.fullBufferHandles[renderer.fullBufferIndex]);
                }
 
                renderer.reprojectMat.SetTexture("_MainTex", renderer.fullBufferHandles[renderer.fullBufferIndex]);
                renderer.reprojectMat.SetVector("_MainTexHandleScale", new Vector4(1/renderer.fullBufferHandles[renderer.fullBufferIndex].rtHandleProperties.rtHandleScale.x,1/renderer.fullBufferHandles[renderer.fullBufferIndex].rtHandleProperties.rtHandleScale.y,renderer.fullBuffer[renderer.fullBufferIndex].width,renderer.fullBuffer[renderer.fullBufferIndex].height));
                cmd.Blit(renderer.fullBufferHandles[renderer.fullBufferIndex], renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1], renderer.reprojectMat);
            }
            //Pass 3: Lighting and Blending
            if(renderer.blendAndLightingMat == null)
               renderer.blendAndLightingMat = new Material(Shader.Find("Hidden/EnviroVolumetricCloudsBlendHDRP"));

            SetBlendShader(cam,renderer);
            renderer.blendAndLightingMat.SetTexture("_MainTex", source); 
            cmd.Blit(source, destination, renderer.blendAndLightingMat);

            renderer.prevV = cam.worldToCameraMatrix;
            renderer.firstFrame = false;

 
            //UnityEngine.Profiling.Profiler.EndSample();
        }
#endif

        void SetRaymarchShader (Camera cam, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        {
            if(renderer.raymarchMat == null)
        #if ENVIRO_HDRP 
             renderer.raymarchMat = new Material(Shader.Find("Hidden/EnviroCloudsRaymarchHDRP"));
        #elif ENVIRO_URP && UNITY_6000_0_OR_NEWER
        if(GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
           renderer.raymarchMat = new Material(Shader.Find("Hidden/EnviroCloudsRaymarch"));
        else
           renderer.raymarchMat = new Material(Shader.Find("Hidden/EnviroCloudsRaymarchURP"));
        #else
             renderer.raymarchMat = new Material(Shader.Find("Hidden/EnviroCloudsRaymarch"));
        #endif

            if(dirLight == null)
            {
               dirLight = EnviroHelper.GetDirectionalLight();
            }
            //Check if we use dual lightmode and change the light only in that case. Otherwise keep it to the cached one.
            else if (EnviroManager.instance.Lighting != null && EnviroManager.instance.Lighting.Settings.lightingMode == EnviroLighting.LightingMode.Dual)
            {
               dirLight = EnviroHelper.GetDirectionalLight();
            }

            EnviroCloudLayerSettings layer1 = settingsLayer1;
            EnviroCloudLayerSettings layer2 = settingsLayer2;
            EnviroCloudGlobalSettings global = settingsGlobal;
            
            float blueNoiseIntensity = settingsQuality.blueNoiseIntensity;
            float lodDistance = settingsQuality.lodDistance;
            Vector4 steps = new Vector4(settingsQuality.stepsLayer1,settingsQuality.stepsLayer1,settingsQuality.stepsLayer2,settingsQuality.stepsLayer2);
            int downsample = settingsQuality.downsampling;

            if(quality != null)
            {
                blueNoiseIntensity = quality.volumetricCloudsOverride.blueNoiseIntensity;
                steps = new Vector4(quality.volumetricCloudsOverride.stepsLayer1,quality.volumetricCloudsOverride.stepsLayer1,quality.volumetricCloudsOverride.stepsLayer2,quality.volumetricCloudsOverride.stepsLayer2);
                lodDistance = quality.volumetricCloudsOverride.lodDistance;
                downsample = quality.volumetricCloudsOverride.downsampling;
            }
                 
            //Textures
            renderer.raymarchMat.SetTexture("_Noise", settingsGlobal.noise);
            renderer.raymarchMat.SetTexture("_DetailNoise", settingsGlobal.detailNoise); 
            renderer.raymarchMat.SetTexture("_CurlNoise", settingsGlobal.curlTex);

            if(weatherMap != null)
               renderer.raymarchMat.SetTexture("_WeatherMap",weatherMap);
            else if (settingsGlobal.customWeatherMap != null)
               renderer.raymarchMat.SetTexture("_WeatherMap",settingsGlobal.customWeatherMap);

            //Matrix
        #if ENABLE_VR || ENABLE_XR_MODULE
            if(UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced && cam.stereoEnabled)
            {
                renderer.raymarchMat.SetMatrix("_InverseProjection", cam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left).inverse);
                renderer.raymarchMat.SetMatrix("_InverseRotation", cam.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse);
                renderer.raymarchMat.SetMatrix("_InverseProjectionRight", cam.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right).inverse);
                renderer.raymarchMat.SetMatrix("_InverseRotationRight", cam.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse);
            }
            else
            {
                renderer.raymarchMat.SetMatrix("_InverseProjection", cam.projectionMatrix.inverse);
                renderer.raymarchMat.SetMatrix("_InverseRotation", cam.cameraToWorldMatrix);
            }
        #else
                renderer.raymarchMat.SetMatrix("_InverseProjection", cam.projectionMatrix.inverse);
                renderer.raymarchMat.SetMatrix("_InverseRotation", cam.cameraToWorldMatrix);
        #endif

            if (EnviroManager.instance.Objects.worldAnchor != null)
                settingsGlobal.floatingPointOriginMod = EnviroManager.instance.Objects.worldAnchor.transform.position;
            else
                 settingsGlobal.floatingPointOriginMod = Vector3.zero;
             
        

            renderer.raymarchMat.SetVector("_CameraPosition", cam.transform.position - settingsGlobal.floatingPointOriginMod);
            renderer.raymarchMat.SetVector("_WorldOffset", settingsGlobal.floatingPointOriginMod);

      
            renderer.raymarchMat.SetVector("_Steps", steps);
            
            if(dirLight != null)
            renderer.raymarchMat.SetVector("_LightDir", -dirLight.transform.forward);  
            else
            renderer.raymarchMat.SetVector("_LightDir", Vector3.zero);  

            renderer.raymarchMat.SetVector("_CloudsNoiseSettings", new Vector4(layer1.baseNoiseUV, layer1.detailNoiseUV, layer2.baseNoiseUV, layer2.detailNoiseUV));

            renderer.raymarchMat.SetVector("_CloudsLighting", new Vector4(layer1.scatteringIntensity, 0f, 0f, layer1.silverLiningSpread));
            renderer.raymarchMat.SetVector("_CloudsLighting2", new Vector4(layer2.scatteringIntensity, 0f, 0f, layer2.silverLiningSpread));
            
            renderer.raymarchMat.SetVector("_CloudsLightingExtended", new Vector4(layer1.powderIntensity, layer1.curlIntensity, layer1.lightStepModifier, layer1.lightAbsorbtion));   
            renderer.raymarchMat.SetVector("_CloudsLightingExtended2", new Vector4(layer2.powderIntensity, layer2.curlIntensity, layer2.lightStepModifier, layer2.lightAbsorbtion));

            renderer.raymarchMat.SetVector("_CloudsMultiScattering", new Vector4(layer1.multiScatteringA, layer1.multiScatteringB, layer1.multiScatteringC, 0));
            renderer.raymarchMat.SetVector("_CloudsMultiScattering2", new Vector4(layer2.multiScatteringA, layer2.multiScatteringB, layer2.multiScatteringC, 0));
            
            renderer.raymarchMat.SetVector("_CloudsParameter", new Vector4(layer1.bottomCloudsHeight, layer1.topCloudsHeight, 1 / (layer1.topCloudsHeight - layer1.bottomCloudsHeight), settingsGlobal.cloudsWorldScale));
            renderer.raymarchMat.SetVector("_CloudsParameter2", new Vector4(layer2.bottomCloudsHeight, layer2.topCloudsHeight, 1 / (layer2.topCloudsHeight - layer2.bottomCloudsHeight), settingsGlobal.cloudsWorldScale));
            renderer.raymarchMat.SetFloat("_BlueNoiseIntensity",blueNoiseIntensity);
            renderer.raymarchMat.SetVector("_CloudDensityScale", new Vector4(layer1.density, layer2.density, layer1.densitySmoothness, layer2.densitySmoothness));
            renderer.raymarchMat.SetVector("_CloudsCoverageSettings", new Vector4(layer1.coverage, settingsGlobal.maxRenderDistance, layer1.anvilBias, layer2.anvilBias));
            renderer.raymarchMat.SetVector("_CloudsAnimation", new Vector4(cloudAnimLayer1.x, cloudAnimLayer1.y, cloudAnimLayer1.z, 0f));
            if(EnviroManager.instance.Environment != null)
            { 
                renderer.raymarchMat.SetVector("_CloudsWindDirection", new Vector4(EnviroManager.instance.Environment.Settings.windDirectionX * settingsLayer1.cloudsWindDirectionXModifier, EnviroManager.instance.Environment.Settings.windDirectionY * settingsLayer1.cloudsWindDirectionYModifier, cloudAnimNonScaledLayer1.x,cloudAnimNonScaledLayer1.y));
            }         
            else
            {
                 renderer.raymarchMat.SetVector("_CloudsWindDirection", new Vector4(settingsLayer1.cloudsWindDirectionXModifier, settingsLayer1.cloudsWindDirectionYModifier, cloudAnimNonScaledLayer1.x,cloudAnimNonScaledLayer1.y));
            } 

            renderer.raymarchMat.SetVector("_CloudsErosionIntensity", new Vector4(1f - layer1.baseErosionIntensity, layer1.detailErosionIntensity,1f - layer2.baseErosionIntensity, layer2.detailErosionIntensity));
 
            renderer.raymarchMat.SetFloat("_LODDistance", lodDistance);
    
            #if ENVIRO_HDRP
            renderer.raymarchMat.SetTexture("_DownsampledDepth", renderer.downsampledDepthHandle);
            renderer.raymarchMat.SetVector("_DepthHandleScale", new Vector4(1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.x,1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.y,renderer.downsampledDepth.width,renderer.downsampledDepth.height));
            #elif ENVIRO_URP && UNITY_6000_0_OR_NEWER
             if(GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
                renderer.raymarchMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth);       
            //Needs to be set directly in builder!
            #else
            renderer.raymarchMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth); 
            #endif   
 
            renderer.raymarchMat.SetInt("_Frame", renderer.frame);
      
            renderer.raymarchMat.SetTexture("_BlueNoise",settingsGlobal.blueNoise);
        
            renderer.raymarchMat.SetVector("_Randomness", new Vector4(UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value));  
           
            renderer.raymarchMat.SetVector("_Resolution", new Vector4(cam.pixelWidth, cam.pixelHeight,0f,0f));

            if(settingsGlobal.dualLayer)
                renderer.raymarchMat.EnableKeyword("ENVIRO_DUAL_LAYER");
            else 
                renderer.raymarchMat.DisableKeyword("ENVIRO_DUAL_LAYER");

            if(settingsGlobal.cloudShadows)
                renderer.raymarchMat.EnableKeyword("ENVIRO_CLOUD_SHADOWS");
            else
                renderer.raymarchMat.DisableKeyword("ENVIRO_CLOUD_SHADOWS"); 

            renderer.raymarchMat.SetFloat("_DepthTest", settingsGlobal.depthTest ? 1f : 0f);

            SetDepthBlending(renderer.raymarchMat);

        } 
 
        void SetReprojectShader (Camera cam, EnviroVolumetricCloudRenderer renderer, EnviroQuality quality)
        {
          
            float reprojectionBlendTime = settingsQuality.reprojectionBlendTime;
                    
            if(quality != null)
            {
                reprojectionBlendTime = quality.volumetricCloudsOverride.reprojectionBlendTime;
            }

            SetDepthBlending(renderer.reprojectMat);

        #if ENVIRO_HDRP
            renderer.reprojectMat.SetTexture("_DownsampledDepth", renderer.downsampledDepthHandle);
            renderer.reprojectMat.SetVector("_DepthHandleScale", new Vector4(1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.x,1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.y,renderer.downsampledDepth.width,renderer.downsampledDepth.height));
            renderer.reprojectMat.SetTexture("_UndersampleCloudTex", renderer.undersampleBufferHandle);
            renderer.reprojectMat.SetVector("_UndersampleCloudTexScale", new Vector4(1/renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.x,1/renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.y,renderer.undersampleBuffer.width,renderer.undersampleBuffer.height));
        #elif UNITY_6000_0_OR_NEWER && ENVIRO_URP
        if(GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
        {
            renderer.reprojectMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth);
            renderer.reprojectMat.SetTexture("_UndersampleCloudTex", renderer.undersampleBuffer);
        }
            //Set directly in builder!
        #else
            renderer.reprojectMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth);
            renderer.reprojectMat.SetTexture("_UndersampleCloudTex", renderer.undersampleBuffer);
        #endif         
  #if ENABLE_VR || ENABLE_XR_MODULE
            if(UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced) 
            {
                renderer.reprojectMat.SetMatrix("_PrevVP", renderer.prevV);
                renderer.reprojectMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam,Camera.StereoscopicEye.Left));
                renderer.reprojectMat.SetVector("_ProjectionExtentsRight", EnviroHelper.GetProjectionExtents(cam,Camera.StereoscopicEye.Right));
            }
            else 
            {
                renderer.reprojectMat.SetMatrix("_PrevVP", renderer.prevV);
                renderer.reprojectMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam));
            }
        #else
             renderer.reprojectMat.SetMatrix("_PrevVP", renderer.prevV);
             renderer.reprojectMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam));
        #endif

            Matrix4x4 ctw;  

            if(lastOffset != settingsGlobal.floatingPointOriginMod)
            {
                ctw = Matrix4x4.TRS(cam.transform.position - (settingsGlobal.floatingPointOriginMod - lastOffset), cam.transform.rotation, Vector3.one);
                renderer.reprojectMat.SetMatrix("_CamToWorld",  ctw);

                lastOffset = settingsGlobal.floatingPointOriginMod;
            }
            else
            {
                ctw = Matrix4x4.TRS(cam.transform.position, cam.transform.rotation, Vector3.one);
                renderer.reprojectMat.SetMatrix("_CamToWorld",  ctw);
            }
            renderer.reprojectMat.SetFloat("_BlendTime", reprojectionBlendTime);     
        }

        void SetBlendShader (Camera cam, EnviroVolumetricCloudRenderer renderer)
        {
            SetDepthBlending(renderer.blendAndLightingMat);

        #if ENABLE_VR || ENABLE_XR_MODULE
            if(UnityEngine.XR.XRSettings.enabled && UnityEngine.XR.XRSettings.stereoRenderingMode == UnityEngine.XR.XRSettings.StereoRenderingMode.SinglePassInstanced) 
            {
                renderer.blendAndLightingMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam,Camera.StereoscopicEye.Left));
                renderer.blendAndLightingMat.SetVector("_ProjectionExtentsRight", EnviroHelper.GetProjectionExtents(cam,Camera.StereoscopicEye.Right));
            }
            else  
            {
                renderer.blendAndLightingMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam));
            }
        #else
            renderer.blendAndLightingMat.SetVector("_ProjectionExtents", EnviroHelper.GetProjectionExtents(cam));
        #endif

        #if ENVIRO_HDRP
            renderer.blendAndLightingMat.SetTexture("_DownsampledDepth", renderer.downsampledDepthHandle);
            renderer.blendAndLightingMat.SetVector("_DepthHandleScale", new Vector4(1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.x,1/renderer.downsampledDepthHandle.rtHandleProperties.rtHandleScale.y,renderer.downsampledDepth.width,renderer.downsampledDepth.height));
        #elif ENVIRO_URP && UNITY_6000_0_OR_NEWER
        if(GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
        {
             renderer.blendAndLightingMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth);
        }
            //Set directly in builder
        #else
            renderer.blendAndLightingMat.SetTexture("_DownsampledDepth", renderer.downsampledDepth);
        #endif
           
            Matrix4x4 camtowolrd = Matrix4x4.TRS(cam.transform.position, cam.transform.rotation, Vector3.one);
            renderer.blendAndLightingMat.SetMatrix("_CamToWorld",  camtowolrd);

            Color directLightColor;

            if(!EnviroManager.instance.isNight)
            {
                directLightColor = settingsGlobal.sunLightColorGradient.Evaluate(EnviroManager.instance.solarTime);
            }
            else
            { 
                directLightColor = settingsGlobal.moonLightColorGradient.Evaluate(EnviroManager.instance.lunarTime);
            }

            Shader.SetGlobalColor("_DirectLightColor", directLightColor);
            Shader.SetGlobalColor("_AmbientColor", settingsGlobal.ambientColorGradient.Evaluate(EnviroManager.instance.solarTime) * settingsGlobal.ambientLighIntensity);
            Shader.SetGlobalFloat("_AtmosphereColorSaturateDistance",settingsGlobal.atmosphereColorSaturateDistance);
            
        //We don't use reprojection pass for reflections.
        #if ENVIRO_HDRP
            if(cam.cameraType == CameraType.Reflection)
            {
               renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.undersampleBufferHandle);
               renderer.blendAndLightingMat.SetVector("_HandleScales", new Vector4(1 / renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.x, 1 / renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.y,1,1));
            }  
            else
            {
               renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1]);
               renderer.blendAndLightingMat.SetVector("_HandleScales", new Vector4(1/ renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1].rtHandleProperties.rtHandleScale.x, 1/ renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1].rtHandleProperties.rtHandleScale.y,1,1));
               //renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.undersampleBufferHandle);
               //renderer.blendAndLightingMat.SetVector("_HandleScales", new Vector4(1 / renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.x, 1 / renderer.undersampleBufferHandle.rtHandleProperties.rtHandleScale.y,1,1));
            
            }
        #elif ENVIRO_URP && UNITY_6000_0_OR_NEWER
        if(GraphicsSettings.GetRenderPipelineSettings< UnityEngine.Rendering.Universal.RenderGraphSettings>().enableRenderCompatibilityMode)
        {
            if(cam.cameraType == CameraType.Reflection)
            { 
               renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.undersampleBuffer);
            }   
            else
            {
              renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.fullBuffer[renderer.fullBufferIndex ^ 1]);
            } 
        }
        // Set directly in builder.
        #else
            if(cam.cameraType == CameraType.Reflection)
            { 
               renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.undersampleBuffer);
            }   
            else
            {
              renderer.blendAndLightingMat.SetTexture("_CloudTex", renderer.fullBuffer[renderer.fullBufferIndex ^ 1]);
            } 
        #endif

        #if ENVIRO_HDRP
            if(renderer != null && renderer.fullBufferHandles != null && renderer.fullBufferHandles.Length >= 2 && renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1] != null)
            {
                Shader.SetGlobalTexture("_EnviroClouds", renderer.fullBufferHandles[renderer.fullBufferIndex ^ 1]);
            } 
        #elif ENVIRO_URP && UNITY_6000_0_OR_NEWER
            if(renderer != null && renderer.fullBuffer != null && renderer.fullBuffer.Length >= 2 && renderer.fullBuffer[renderer.fullBufferIndex ^ 1] != null)
            { 
                Shader.SetGlobalTexture("_EnviroClouds", renderer.fullBuffer[renderer.fullBufferIndex ^ 1]);
            }
        #else
            if(renderer != null && renderer.fullBuffer != null && renderer.fullBuffer.Length >= 2 && renderer.fullBuffer[renderer.fullBufferIndex ^ 1] != null)
            {
                Shader.SetGlobalTexture("_EnviroClouds", renderer.fullBuffer[renderer.fullBufferIndex ^ 1]);
            } 
        #endif
        }

         private void SetDepthBlending(Material mat)
        {        
            if(settingsGlobal.depthBlending)
                mat.EnableKeyword("ENVIRO_DEPTH_BLENDING");
            else
                mat.DisableKeyword("ENVIRO_DEPTH_BLENDING");
        }

        private void SetToURP(Material mat)
        {        
            mat.EnableKeyword("ENVIROURP");
        }


#if ENVIRO_URP && UNITY_6000_0_OR_NEWER
        UnityEngine.Rendering.RenderGraphModule.TextureDesc cloudsDescriptor;
        public bool CreateRenderTexture(ref UnityEngine.Rendering.RenderGraphModule.TextureHandle texture, UnityEngine.Rendering.RenderGraphModule.RenderGraph renderGraph, int width, int height, GraphicsFormat format, FilterMode filterMode, UnityEngine.Rendering.RenderGraphModule.TextureDesc dsc)
        {   
            dsc.width = width;
            dsc.height = height;
            dsc.colorFormat = format; 
            dsc.depthBufferBits = 0;
            dsc.msaaSamples = MSAASamples.None;
            dsc.filterMode = filterMode;
            //texture = UnityEngine.Rendering.Universal.UniversalRenderer.CreateRenderGraphTexture(renderGraph, d, "Temp Texture", false, filterMode);  
            texture = renderGraph.CreateTexture(dsc);

            if(cloudsDescriptor.width != dsc.width || cloudsDescriptor.height != dsc.height || cloudsDescriptor.vrUsage != dsc.vrUsage)
            { 
               cloudsDescriptor = dsc;
               return true;
            }
            else
            {
               cloudsDescriptor = dsc;
               return false;
            }  
        }
#endif


        public bool CreateRenderTexture(ref RenderTexture texture, int width, int height, RenderTextureFormat format, FilterMode filterMode, RenderTextureDescriptor dsc)
        {
            if(texture != null && (texture.width != width || texture.height != height || texture.vrUsage != dsc.vrUsage))
            {
                DestroyImmediate(texture);
                texture = null;             
            }
            if(texture == null)
            {
                RenderTextureDescriptor d = dsc;
                d.width = width;
                d.height = height;
                d.colorFormat = format;
                d.depthBufferBits = 0;
                texture = new RenderTexture(d);
                texture.antiAliasing = 1;
                texture.useMipMap = false;
                texture.filterMode = filterMode;
                texture.Create();

                return true;
            }
            else
            {
                return false;
            }
        }
  
        public RenderTexture RenderWeatherMap()
        {
            if(settingsGlobal.customWeatherMap != null)
               return null;

            if(weatherMapMat == null)
               weatherMapMat = new Material(Shader.Find("Enviro3/Standard/WeatherTexture"));

            if (weatherMap == null)
            {
                RenderTextureFormat format = RenderTextureFormat.ARGBFloat;
                #if UNITY_IOS || UNITY_ANDROID
                format = RenderTextureFormat.ARGBHalf;
                #endif
                weatherMap = new RenderTexture(512, 512, 0, format);
                weatherMap.wrapMode = TextureWrapMode.Repeat;                   
            } 
  
            weatherMapMat.SetFloat("_CoverageLayer1",settingsLayer1.coverage);    
            weatherMapMat.SetFloat("_WorleyFreq1Layer1", settingsLayer1.worleyFreq1);
            weatherMapMat.SetFloat("_WorleyFreq2Layer1",settingsLayer1.worleyFreq2);
            weatherMapMat.SetFloat("_DilateCoverageLayer1",settingsLayer1.dilateCoverage);
            weatherMapMat.SetFloat("_DilateTypeLayer1",settingsLayer1.dilateType);
            weatherMapMat.SetFloat("_CloudsTypeModifierLayer1",settingsLayer1.cloudsTypeModifier);

            if(settingsGlobal.dualLayer)
            {
                weatherMapMat.EnableKeyword("ENVIRO_DUAL_LAYER");
                weatherMapMat.SetFloat("_CoverageLayer2",settingsLayer2.coverage);
                weatherMapMat.SetFloat("_WorleyFreq1Layer2",settingsLayer2.worleyFreq1);
                weatherMapMat.SetFloat("_WorleyFreq2Layer2", settingsLayer2.worleyFreq2);
                weatherMapMat.SetFloat("_DilateCoverageLayer2",settingsLayer2.dilateCoverage);
                weatherMapMat.SetFloat("_DilateTypeLayer2",settingsLayer2.dilateType); 
                weatherMapMat.SetFloat("_CloudsTypeModifierLayer2",settingsLayer2.cloudsTypeModifier);
            }
            else
            {
                weatherMapMat.DisableKeyword("ENVIRO_DUAL_LAYER");
            }

            weatherMapMat.SetVector("_LocationOffset",new Vector4(settingsLayer1.locationOffset.x,settingsLayer1.locationOffset.y,settingsLayer2.locationOffset.x,settingsLayer2.locationOffset.y));
            weatherMapMat.SetVector("_WindDirectionLayer1", cloudAnimNonScaledLayer1);
            weatherMapMat.SetVector("_WindDirectionLayer2", cloudAnimNonScaledLayer2);
        
            Graphics.Blit(null,weatherMap,weatherMapMat);
            return weatherMap;
        }

        /*public RenderTexture RenderWeatherMapCS()
        {
            if(weatherMapMat == null)
               weatherMapMat = new Material(Shader.Find("Enviro3/Standard/WeatherMap"));

            if(weatherMapCS == null)
               weatherMapCS = (ComputeShader)Resources.Load("Shader/Clouds/EnviroWeatherMapCS");

            if (weatherMap == null)
            {
                weatherMap = new RenderTexture(512, 512, 0, RenderTextureFormat.ARGBFloat);
                weatherMap.wrapMode = TextureWrapMode.Repeat;
                weatherMap.enableRandomWrite = true;                    
            } 

            weatherMap.enableRandomWrite = true;   
            weatherMapCS.SetFloat("_CoverageLayer1",settingsLayer1.coverage);    
            weatherMapCS.SetFloat("_WorleyFreq1Layer1", settingsLayer1.worleyFreq1);
            weatherMapCS.SetFloat("_WorleyFreq2Layer1",settingsLayer1.worleyFreq2);
            weatherMapCS.SetFloat("_DilateCoverageLayer1",settingsLayer1.dilateCoverage);
            weatherMapCS.SetFloat("_DilateTypeLayer1",settingsLayer1.dilateType);
            weatherMapCS.SetFloat("_CloudsTypeModifierLayer1",settingsLayer1.cloudsTypeModifier);

            if(settingsGlobal.dualLayer)
            { 
                weatherMapCS.SetFloat("_CoverageLayer2",settingsLayer2.coverage);
                weatherMapCS.SetFloat("_WorleyFreq1Layer2",settingsLayer2.worleyFreq1);
                weatherMapCS.SetFloat("_WorleyFreq2Layer2", settingsLayer2.worleyFreq2);
                weatherMapCS.SetFloat("_DilateCoverageLayer2",settingsLayer2.dilateCoverage);
                weatherMapCS.SetFloat("_DilateTypeLayer2",settingsLayer2.dilateType); 
                weatherMapCS.SetFloat("_CloudsTypeModifierLayer2",settingsLayer2.cloudsTypeModifier);
            }

            weatherMapCS.SetVector("_LocationOffset",new Vector4(settingsLayer1.locationOffset.x,settingsLayer1.locationOffset.y,settingsLayer2.locationOffset.x,settingsLayer2.locationOffset.y));
            
            weatherMapCS.SetTexture(0,"Result",weatherMap);
            weatherMapCS.Dispatch(0, 512/16, 512/16, 1);
            return weatherMap;
        } */

        private void UpdateWind()
        {      
            if(EnviroManager.instance.Environment != null)
            {
                cloudAnimLayer1 += new Vector3(
                (EnviroManager.instance.Environment.Settings.windSpeed * settingsLayer1.windSpeedModifier * EnviroManager.instance.Environment.Settings.windDirectionX * settingsLayer1.cloudsWindDirectionXModifier) * Time.deltaTime,
                (EnviroManager.instance.Environment.Settings.windSpeed * settingsLayer1.windSpeedModifier * EnviroManager.instance.Environment.Settings.windDirectionY * settingsLayer1.cloudsWindDirectionYModifier) * Time.deltaTime,
                (-1f * settingsLayer1.windUpwards * Time.deltaTime));
                            
                cloudAnimLayer1 = EnviroHelper.PingPong(cloudAnimLayer1);

                if(settingsGlobal.dualLayer)
                {       
                    cloudAnimLayer2 += new Vector3(
                    (EnviroManager.instance.Environment.Settings.windSpeed * settingsLayer2.windSpeedModifier * EnviroManager.instance.Environment.Settings.windDirectionX * settingsLayer2.cloudsWindDirectionXModifier) * Time.deltaTime,
                    (EnviroManager.instance.Environment.Settings.windSpeed * settingsLayer2.windSpeedModifier * EnviroManager.instance.Environment.Settings.windDirectionY * settingsLayer2.cloudsWindDirectionYModifier) * Time.deltaTime,
                    (-1f * settingsLayer2.windUpwards * Time.deltaTime));
                                    
                    cloudAnimLayer2 = EnviroHelper.PingPong(cloudAnimLayer2);
                }
                cloudAnimNonScaledLayer1 += new Vector3((settingsLayer1.windSpeedModifier * EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionX * settingsLayer1.cloudsWindDirectionXModifier) * Time.deltaTime * 4f, (settingsLayer1.windSpeedModifier * EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionY * settingsLayer1.cloudsWindDirectionYModifier) * Time.deltaTime* 4f, -1f * EnviroManager.instance.Environment.Settings.windSpeed * Time.deltaTime ) * settingsGlobal.cloudsTravelSpeed * 0.2f;
                cloudAnimNonScaledLayer2 += new Vector3((settingsLayer2.windSpeedModifier * EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionX  * settingsLayer2.cloudsWindDirectionXModifier) * Time.deltaTime* 4f, (settingsLayer2.windSpeedModifier * EnviroManager.instance.Environment.Settings.windSpeed * EnviroManager.instance.Environment.Settings.windDirectionY * settingsLayer2.cloudsWindDirectionYModifier) * Time.deltaTime* 4f, -1f * EnviroManager.instance.Environment.Settings.windSpeed * Time.deltaTime) * settingsGlobal.cloudsTravelSpeed * 0.2f;
            }
            else 
            {
                cloudAnimLayer1 += new Vector3(
                (settingsLayer1.windSpeedModifier * settingsLayer1.cloudsWindDirectionXModifier) * Time.deltaTime,
                (settingsLayer1.windSpeedModifier * settingsLayer1.cloudsWindDirectionYModifier) * Time.deltaTime,
                (-1f * settingsLayer1.windUpwards * Time.deltaTime));
                            
                cloudAnimLayer1 = EnviroHelper.PingPong(cloudAnimLayer1);

                if(settingsGlobal.dualLayer)
                {       
                    cloudAnimLayer2 += new Vector3(
                    (settingsLayer2.windSpeedModifier * settingsLayer2.cloudsWindDirectionXModifier) * Time.deltaTime,
                    (settingsLayer2.windSpeedModifier * settingsLayer2.cloudsWindDirectionYModifier) * Time.deltaTime,
                    (-1f * settingsLayer2.windUpwards * Time.deltaTime));
                                    
                    cloudAnimLayer2 = EnviroHelper.PingPong(cloudAnimLayer2);
                } 

                cloudAnimNonScaledLayer1 += new Vector3((settingsLayer1.windSpeedModifier * settingsLayer1.cloudsWindDirectionXModifier) * Time.deltaTime* 4f, (settingsLayer1.windSpeedModifier * settingsLayer1.cloudsWindDirectionYModifier) * Time.deltaTime* 4f, -1f * settingsLayer1.windUpwards * Time.deltaTime) * settingsGlobal.cloudsTravelSpeed * 0.2f;
                cloudAnimNonScaledLayer2 += new Vector3((settingsLayer2.windSpeedModifier * settingsLayer2.cloudsWindDirectionXModifier) * Time.deltaTime* 4f, (settingsLayer2.windSpeedModifier * settingsLayer2.cloudsWindDirectionYModifier) * Time.deltaTime* 4f, -1f * settingsLayer2.windUpwards * Time.deltaTime) * settingsGlobal.cloudsTravelSpeed * 0.2f;
            }
        
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            { 
                settingsLayer1 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(preset.settingsLayer1));
                settingsLayer2 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(preset.settingsLayer2));
                settingsGlobal = JsonUtility.FromJson<Enviro.EnviroCloudGlobalSettings>(JsonUtility.ToJson(preset.settingsGlobal));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }

        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroVolumetricCloudsModule t =  ScriptableObject.CreateInstance<EnviroVolumetricCloudsModule>();
        t.name = "Cloud Module";
        t.settingsLayer1 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(settingsLayer1));
        t.settingsLayer2 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(settingsLayer2));
        t.settingsGlobal = JsonUtility.FromJson<Enviro.EnviroCloudGlobalSettings>(JsonUtility.ToJson(settingsGlobal));

        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroVolumetricCloudsModule module)
        {
            module.settingsLayer1 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(settingsLayer1));
            module.settingsLayer2 = JsonUtility.FromJson<Enviro.EnviroCloudLayerSettings>(JsonUtility.ToJson(settingsLayer2));
            module.settingsGlobal = JsonUtility.FromJson<Enviro.EnviroCloudGlobalSettings>(JsonUtility.ToJson(settingsGlobal));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroVolumetricCloudsModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroVolumetricFogLight.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
namespace Enviro
{
    [ExecuteInEditMode]
    [AddComponentMenu("Enviro 3/Volumetric Light")]
    public class EnviroVolumetricFogLight : MonoBehaviour
    {
        [Range(0f,2f)]
        public float intensity = 1.0f;
        [Range(0f,2f)]
        public float range = 1.0f;

        private Light myLight;

        private bool initialized = false;
        private CommandBuffer cascadeShadowCB;
        //private CommandBuffer shadowMatrixBuffer;



        public bool isOn
            {
                get
                {
                    if (!isActiveAndEnabled)
                        return false;

                    Init();

                    return myLight.enabled;
                }

                private set{}
            }
    
        new public Light light {get{Init(); return myLight;} private set{}}
 

        void OnEnable()
        { 
            Init();
            if(EnviroManager.instance != null && EnviroManager.instance.Fog != null)
               AddToLightManager();
        }

        void OnDisable() 
        {
            if(cascadeShadowCB != null && myLight != null && myLight.type == LightType.Directional)
               myLight.RemoveCommandBuffer(LightEvent.AfterShadowMap, cascadeShadowCB);

           // if(shadowMatrixBuffer != null && myLight != null && myLight.type == LightType.Directional)
           //    myLight.RemoveCommandBuffer(LightEvent.BeforeScreenspaceMask, shadowMatrixBuffer);

            if(EnviroManager.instance != null && EnviroManager.instance.Fog != null)
               RemoveFromLightManager();
        }

        void AddToLightManager()
        {
           bool addedToMgr = false;

           for(int i = 0; i < EnviroManager.instance.Fog.fogLights.Count; i++)
           {
               if(EnviroManager.instance.Fog.fogLights[i] == this)
               {
                    addedToMgr = true;
                    break;
               }
           }

           if(!addedToMgr)
              EnviroManager.instance.Fog.AddLight(this);
        }
            
        void RemoveFromLightManager()
        {
            for(int i = 0; i < EnviroManager.instance.Fog.fogLights.Count; i++)
            {
               if(EnviroManager.instance.Fog.fogLights[i] == this)
               {
                 EnviroManager.instance.Fog.RemoveLight(this);   
                 initialized = false; 
               }
           }
        } 

 
        private void Init()
        { 
            if (initialized)
                return;

            myLight = GetComponent<Light>();
            
            if(myLight.type == LightType.Directional) 
            {
                cascadeShadowCB = new CommandBuffer();
                cascadeShadowCB.name = "Dir Light Command Buffer";
                cascadeShadowCB.SetGlobalTexture("_CascadeShadowMapTexture", new UnityEngine.Rendering.RenderTargetIdentifier(UnityEngine.Rendering.BuiltinRenderTextureType.CurrentActive));  
                myLight.AddCommandBuffer(LightEvent.AfterShadowMap, cascadeShadowCB);
                
                //shadowMatrixBuffer = new CommandBuffer();  
                //shadowMatrixBuffer.name = "Extract Shadow Matrix Buffer";  
                //myLight.AddCommandBuffer(LightEvent.BeforeShadowMap, shadowMatrixBuffer); 
            } 

            initialized = true;
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroVolumetricFogLight.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWAPIEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
#if WORLDAPI_PRESENT

namespace Enviro
{
[CustomEditor(typeof(EnviroWorldAPI))]
public class EnviroWAPIEditor : Editor {

	private GUIStyle boxStyle;
	private GUIStyle wrapStyle;
	private GUIStyle headerStyle;

	SerializedObject serializedObj;
	private EnviroWorldAPI myTarget;

	SerializedProperty snowPower, wetnessPower, fogPower, seasons, time, cloudCover, location, temperature;

	void OnEnable()
	{
		myTarget = (EnviroWorldAPI)target;
		serializedObj = new SerializedObject (myTarget);
		snowPower = serializedObj.FindProperty ("snowPower");
		wetnessPower = serializedObj.FindProperty ("wetnessPower");
        temperature = serializedObj.FindProperty("temperature");
        fogPower = serializedObj.FindProperty ("fogPower");
		//windDirection = serializedObj.FindProperty ("windDirection");
		//windSpeed = serializedObj.FindProperty ("windSpeed");
		seasons = serializedObj.FindProperty ("seasons");
		time = serializedObj.FindProperty ("time");
		cloudCover = serializedObj.FindProperty ("cloudCover");
		location = serializedObj.FindProperty ("location");
	}


	public override void OnInspectorGUI ()
	{
		if (boxStyle == null)
		{
			boxStyle = new GUIStyle(GUI.skin.box);
			boxStyle.normal.textColor = GUI.skin.label.normal.textColor;
			boxStyle.fontStyle = FontStyle.Bold;
			boxStyle.alignment = TextAnchor.UpperLeft;
		}

		if (wrapStyle == null)
		{
			wrapStyle = new GUIStyle(GUI.skin.label);
			wrapStyle.fontStyle = FontStyle.Normal;
			wrapStyle.wordWrap = true;
		}

		if (headerStyle == null)
		{
			headerStyle = new GUIStyle(GUI.skin.label);
			headerStyle.fontStyle = FontStyle.Bold;
			headerStyle.wordWrap = true;
		}

		EditorGUI.BeginChangeCheck ();
		GUILayout.BeginVertical("Enviro 3 - WAPI Integration", boxStyle);
		GUILayout.Space(20);
		EditorGUILayout.LabelField("Welcome to the World Manager Integration for Enviro 3 - Sky and Weather!", wrapStyle);
		GUILayout.EndVertical ();
		GUILayout.BeginVertical("Controls", boxStyle);
		GUILayout.Space(20);
		GUILayout.BeginVertical("Time, Season and Location", boxStyle);
		GUILayout.Space(20);
		EditorGUILayout.PropertyField (time, true, null);
		EditorGUILayout.PropertyField (location, true, null);
		EditorGUILayout.PropertyField (seasons, true, null);
		GUILayout.EndVertical ();
		GUILayout.BeginVertical("Weather", boxStyle);
		GUILayout.Space(20);
		EditorGUILayout.LabelField("Enviro will change weather when using GetFromWAPI mode here to match WAPI values!", wrapStyle);
		EditorGUI.indentLevel++;
		EditorGUILayout.PropertyField (cloudCover, true, null);
		EditorGUILayout.PropertyField (snowPower, true, null);
		EditorGUILayout.PropertyField (wetnessPower, true, null);
        EditorGUILayout.PropertyField (temperature, true, null);
        EditorGUI.indentLevel--;
		GUILayout.Space(10);
		//GUILayout.Label ("Wind",headerStyle);
		//EditorGUI.indentLevel++;
		//EditorGUILayout.PropertyField (windSpeed, true, null);
		//EditorGUILayout.PropertyField (windDirection, true, null);
		//EditorGUI.indentLevel--;
		GUILayout.Label ("Fog",headerStyle);
		EditorGUI.indentLevel++;
		EditorGUILayout.PropertyField (fogPower, true, null);
		EditorGUI.indentLevel--; 
		GUILayout.EndVertical (); 
		GUILayout.EndVertical ();
		if (EditorGUI.EndChangeCheck ()) {
			serializedObj.ApplyModifiedProperties ();
		}
}
}
}
#endif

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWAPIEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherModule.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace Enviro
{
    [Serializable]
    public class EnviroWeather 
    {
        public List<EnviroWeatherType> weatherTypes = new List<EnviroWeatherType>();
        public float cloudsTransitionSpeed = 1f;
        public float fogTransitionSpeed = 1f;
        public float lightingTransitionSpeed = 1f; 
        public float skyTransitionSpeed = 1f; 
        public float effectsTransitionSpeed = 1f;
        public float auroraTransitionSpeed = 1f;
        public float environmentTransitionSpeed = 1f;
        public float audioTransitionSpeed = 1f;
    }  

    [Serializable]
    [ExecuteInEditMode] 
    public class EnviroWeatherModule : EnviroModule
    {  
        public Enviro.EnviroWeather Settings;
        public EnviroWeatherModule preset;
        public EnviroWeatherType targetWeatherType;

        //Zones
        public bool globalAutoWeatherChange = true;
        //Trigger
        public BoxCollider triggerCollider;
        public Rigidbody triggerRB;

        //UI
        public bool showWeatherPresetsControls,showTransitionControls,showZoneControls;

        private bool instantTransition = false;

        public override void Enable ()
        { 
            if(EnviroManager.instance == null)
               return;

            if(targetWeatherType == null && Settings.weatherTypes.Count > 0)
               targetWeatherType = Settings.weatherTypes[0];

            if(EnviroManager.instance.defaultZone != null)
               EnviroManager.instance.currentZone = EnviroManager.instance.defaultZone;

            Setup();
        } 

        public override void Disable ()
        { 
            if(EnviroManager.instance == null)
               return;

            Cleanup();
        }

        private void Setup()
        {
            if(EnviroManager.instance.gameObject.GetComponent<BoxCollider>() == null)
               triggerCollider = EnviroManager.instance.gameObject.AddComponent<BoxCollider>();
            else
               triggerCollider = EnviroManager.instance.gameObject.GetComponent<BoxCollider>();
            
            triggerCollider.isTrigger = true;
            triggerCollider.size = new Vector3(0.1f,0.1f,0.1f);

            if(EnviroManager.instance.gameObject.GetComponent<Rigidbody>() == null)
               triggerRB = EnviroManager.instance.gameObject.AddComponent<Rigidbody>();
            else
               triggerRB = EnviroManager.instance.gameObject.GetComponent<Rigidbody>();
 
            triggerRB.isKinematic = true;
        }  

        private void Cleanup()
        {
            if(triggerCollider != null)
               DestroyImmediate(triggerCollider);

            if(triggerRB != null)
               DestroyImmediate(triggerRB);
        } 

        /// Adds weather type to the list or creates a new one.
        public void CreateNewWeatherType()
        {
            EnviroWeatherType type = EnviroWeatherTypeCreation.CreateMyAsset();
            Settings.weatherTypes.Add(type);       
        #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
        #endif
        }

        /// Removes the weather type from the list.
        public void RemoveWeatherType(EnviroWeatherType type)
        {
            Settings.weatherTypes.Remove(type);
        #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
        #endif
        }

        //Cleans the list from null entries.
        public void CleanupList() 
        {
            for (int i = 0; i < Settings.weatherTypes.Count; i++)
            {
                if(Settings.weatherTypes[i] == null)
                    Settings.weatherTypes.RemoveAt(i);
            } 
        } 
 
        private IEnumerator InstantTransition()
        {
            yield return null;
            instantTransition = false;
        }

        // Update Method
        public override void UpdateModule ()
        { 
            if(!active)
               return; 

             if(EnviroManager.instance == null)
               return;
               
            //Instant changes when not playing or instant change is triggered
            if(!Application.isPlaying || instantTransition)
            {
                if(targetWeatherType != null)
                {
                    BlendVolumetricCloudsOverride(1f);
                    BlendFlatCloudsOverride(1f);  
                    BlendLightingOverride(1f);
                    BlendSkyOverride(1f);      
                    BlendEffectsOverride(1f); 
                    BlendAuroraOverride(1f);       
                    BlendFogOverride(1f);      
                    BlendAudioOverride(1f);
                    BlendEnvironmentOverride(1f);
                    BlendLightningOverride(1f);
                } 

                if(instantTransition)
                   instantTransition = false;
            }
            else
            {
                if(targetWeatherType != null)
                { 
                    BlendVolumetricCloudsOverride(Settings.cloudsTransitionSpeed * Time.deltaTime);
                    BlendFlatCloudsOverride(Settings.cloudsTransitionSpeed * Time.deltaTime);
                    BlendLightingOverride(Settings.lightingTransitionSpeed * Time.deltaTime);  
                    BlendSkyOverride(Settings.skyTransitionSpeed * Time.deltaTime);    
                    BlendEffectsOverride(Settings.effectsTransitionSpeed * Time.deltaTime);   
                    BlendAuroraOverride(Settings.auroraTransitionSpeed * Time.deltaTime);   
                    BlendFogOverride(Settings.fogTransitionSpeed * Time.deltaTime);      
                    BlendAudioOverride(Settings.audioTransitionSpeed * Time.deltaTime);
                    BlendEnvironmentOverride(Settings.environmentTransitionSpeed * Time.deltaTime);
                    BlendLightningOverride(1f);
                }
            }
        } 
 
        private void BlendLightingOverride(float blendTime)
        { 
            EnviroLightingModule lighting = EnviroManager.instance.Lighting;
            
            if(lighting != null) 
            {
                lighting.Settings.directLightIntensityModifier = Mathf.Lerp(lighting.Settings.directLightIntensityModifier, targetWeatherType.lightingOverride.directLightIntensityModifier,blendTime); 
                lighting.Settings.ambientIntensityModifier = Mathf.Lerp(lighting.Settings.ambientIntensityModifier, targetWeatherType.lightingOverride.ambientIntensityModifier,blendTime); 
                lighting.Settings.shadowIntensity = Mathf.Lerp(lighting.Settings.shadowIntensity, targetWeatherType.lightingOverride.shadowIntensity,blendTime); 
            }
        } 

        private void BlendSkyOverride(float blendTime)
        {
            EnviroSkyModule sky = EnviroManager.instance.Sky;
            
            if(sky != null) 
            {
                //sky.Settings.intensity = Mathf.Lerp(sky.Settings.intensity, targetWeatherType.skyOverride.intensity,blendTime); 
                sky.Settings.skyColorTint = Color.Lerp(sky.Settings.skyColorTint, targetWeatherType.skyOverride.skyColorTint,blendTime); 
            }
        } 

        private void BlendFogOverride(float blendTime)
        {
            EnviroFogModule fog = EnviroManager.instance.Fog;
            
            if(fog != null)
            {
                fog.Settings.fogDensity = Mathf.Lerp(fog.Settings.fogDensity, targetWeatherType.fogOverride.fogDensity,blendTime); 
                fog.Settings.fogHeightFalloff = Mathf.Lerp(fog.Settings.fogHeightFalloff, targetWeatherType.fogOverride.fogHeightFalloff,blendTime);
                fog.Settings.fogHeight = Mathf.Lerp(fog.Settings.fogHeight, targetWeatherType.fogOverride.fogHeight,blendTime);

                fog.Settings.fogDensity2 = Mathf.Lerp(fog.Settings.fogDensity2, targetWeatherType.fogOverride.fogDensity2,blendTime); 
                fog.Settings.fogHeightFalloff2 = Mathf.Lerp(fog.Settings.fogHeightFalloff2, targetWeatherType.fogOverride.fogHeightFalloff2,blendTime);
                fog.Settings.fogHeight2 = Mathf.Lerp(fog.Settings.fogHeight2, targetWeatherType.fogOverride.fogHeight2,blendTime); 

                fog.Settings.fogColorBlend = Mathf.Lerp(fog.Settings.fogColorBlend, targetWeatherType.fogOverride.fogColorBlend,blendTime);
                fog.Settings.fogColorMod = Color.Lerp(fog.Settings.fogColorMod, targetWeatherType.fogOverride.fogColorMod,blendTime); 

                fog.Settings.scattering = Mathf.Lerp(fog.Settings.scattering, targetWeatherType.fogOverride.scattering,blendTime);
                fog.Settings.extinction = Mathf.Lerp(fog.Settings.extinction, targetWeatherType.fogOverride.extinction,blendTime);
                fog.Settings.anistropy = Mathf.Lerp(fog.Settings.anistropy, targetWeatherType.fogOverride.anistropy,blendTime);
 
                #if ENVIRO_HDRP
                fog.Settings.fogAttenuationDistance = Mathf.Lerp(fog.Settings.fogAttenuationDistance, targetWeatherType.fogOverride.fogAttenuationDistance,blendTime); 
                fog.Settings.baseHeight = Mathf.Lerp(fog.Settings.baseHeight, targetWeatherType.fogOverride.baseHeight,blendTime); 
                fog.Settings.maxHeight = Mathf.Lerp(fog.Settings.maxHeight, targetWeatherType.fogOverride.maxHeight,blendTime); 
                
                fog.Settings.ambientDimmer = Mathf.Lerp(fog.Settings.ambientDimmer, targetWeatherType.fogOverride.ambientDimmer,blendTime);
                fog.Settings.directLightMultiplier = Mathf.Lerp(fog.Settings.directLightMultiplier, targetWeatherType.fogOverride.directLightMultiplier,blendTime);
                fog.Settings.directLightShadowdimmer = Mathf.Lerp(fog.Settings.ambientDimmer, targetWeatherType.fogOverride.directLightShadowdimmer,blendTime);
                #endif

                fog.Settings.unityFogDensity = Mathf.Lerp(fog.Settings.unityFogDensity, targetWeatherType.fogOverride.unityFogDensity,blendTime);
                fog.Settings.unityFogStartDistance = Mathf.Lerp(fog.Settings.unityFogStartDistance, targetWeatherType.fogOverride.unityFogStartDistance,blendTime);
                fog.Settings.unityFogEndDistance = Mathf.Lerp(fog.Settings.unityFogEndDistance, targetWeatherType.fogOverride.unityFogEndDistance,blendTime);

            }
        }

        private void BlendEffectsOverride(float blendTime)
        {
            EnviroEffectsModule effects = EnviroManager.instance.Effects;
            
            if(effects != null)
            {
                for (int i = 0; i < effects.Settings.effectTypes.Count; i++)
                {
                    bool hasOverride = false;

                    for(int a = 0; a < targetWeatherType.effectsOverride.effectsOverride.Count; a++)
                    {
                        if(effects.Settings.effectTypes[i].name == targetWeatherType.effectsOverride.effectsOverride[a].name)
                        {
                           effects.Settings.effectTypes[i].emissionRate = Mathf.Lerp(effects.Settings.effectTypes[i].emissionRate, targetWeatherType.effectsOverride.effectsOverride[a].emission,blendTime); 
                           hasOverride = true;
                        }
                    } 

                    if(!hasOverride)
                    {
                        effects.Settings.effectTypes[i].emissionRate = Mathf.Lerp(effects.Settings.effectTypes[i].emissionRate, 0f,blendTime); 
                    }
                }
            }
        }

        private void BlendVolumetricCloudsOverride(float blendTime)
        {
            EnviroVolumetricCloudsModule clouds = EnviroManager.instance.VolumetricClouds;

            if(clouds != null) 
            {   
                clouds.settingsGlobal.ambientLighIntensity = Mathf.Lerp(clouds.settingsGlobal.ambientLighIntensity, targetWeatherType.cloudsOverride.ambientLightIntensity,blendTime);
                clouds.settingsLayer1.coverage = Mathf.Lerp(clouds.settingsLayer1.coverage, targetWeatherType.cloudsOverride.coverageLayer1,blendTime);
                clouds.settingsLayer1.dilateCoverage = Mathf.Lerp(clouds.settingsLayer1.dilateCoverage, targetWeatherType.cloudsOverride.dilateCoverageLayer1,blendTime);
                clouds.settingsLayer1.dilateType = Mathf.Lerp(clouds.settingsLayer1.dilateType, targetWeatherType.cloudsOverride.dilateTypeLayer1,blendTime);
                clouds.settingsLayer1.cloudsTypeModifier = Mathf.Lerp(clouds.settingsLayer1.cloudsTypeModifier, targetWeatherType.cloudsOverride.typeModifierLayer1,blendTime);
                clouds.settingsLayer1.anvilBias = Mathf.Lerp(clouds.settingsLayer1.anvilBias, targetWeatherType.cloudsOverride.anvilBiasLayer1,blendTime);
                
                clouds.settingsLayer1.scatteringIntensity = Mathf.Lerp(clouds.settingsLayer1.scatteringIntensity, targetWeatherType.cloudsOverride.scatteringIntensityLayer1,blendTime);
                clouds.settingsLayer1.multiScatteringA = Mathf.Lerp(clouds.settingsLayer1.multiScatteringA, targetWeatherType.cloudsOverride.multiScatteringALayer1,blendTime);
                clouds.settingsLayer1.multiScatteringB = Mathf.Lerp(clouds.settingsLayer1.multiScatteringB, targetWeatherType.cloudsOverride.multiScatteringBLayer1,blendTime);
                clouds.settingsLayer1.multiScatteringC = Mathf.Lerp(clouds.settingsLayer1.multiScatteringC, targetWeatherType.cloudsOverride.multiScatteringCLayer1,blendTime);
                clouds.settingsLayer1.powderIntensity = Mathf.Lerp(clouds.settingsLayer1.powderIntensity, targetWeatherType.cloudsOverride.powderIntensityLayer1,blendTime);
                clouds.settingsLayer1.silverLiningSpread = Mathf.Lerp(clouds.settingsLayer1.silverLiningSpread, targetWeatherType.cloudsOverride.silverLiningSpreadLayer1,blendTime);
                clouds.settingsLayer1.lightAbsorbtion = Mathf.Lerp(clouds.settingsLayer1.lightAbsorbtion, targetWeatherType.cloudsOverride.ligthAbsorbtionLayer1,blendTime);
                
                clouds.settingsLayer1.density = Mathf.Lerp(clouds.settingsLayer1.density, targetWeatherType.cloudsOverride.densityLayer1,blendTime);
                clouds.settingsLayer1.densitySmoothness = Mathf.Lerp(clouds.settingsLayer1.densitySmoothness, targetWeatherType.cloudsOverride.densitySmoothnessLayer1,blendTime);
                clouds.settingsLayer1.baseErosionIntensity = Mathf.Lerp(clouds.settingsLayer1.baseErosionIntensity, targetWeatherType.cloudsOverride.baseErosionIntensityLayer1,blendTime);
                clouds.settingsLayer1.detailErosionIntensity = Mathf.Lerp(clouds.settingsLayer1.detailErosionIntensity, targetWeatherType.cloudsOverride.detailErosionIntensityLayer1,blendTime);
                clouds.settingsLayer1.curlIntensity = Mathf.Lerp(clouds.settingsLayer1.curlIntensity, targetWeatherType.cloudsOverride.curlIntensityLayer1,blendTime);
 
                if(clouds.settingsGlobal.dualLayer)
                {
                    clouds.settingsLayer2.coverage = Mathf.Lerp(clouds.settingsLayer2.coverage, targetWeatherType.cloudsOverride.coverageLayer2,blendTime);
                    clouds.settingsLayer2.dilateCoverage = Mathf.Lerp(clouds.settingsLayer2.dilateCoverage, targetWeatherType.cloudsOverride.dilateCoverageLayer2,blendTime);
                    clouds.settingsLayer2.dilateType = Mathf.Lerp(clouds.settingsLayer2.dilateType, targetWeatherType.cloudsOverride.dilateTypeLayer2,blendTime);
                    clouds.settingsLayer2.cloudsTypeModifier = Mathf.Lerp(clouds.settingsLayer2.cloudsTypeModifier, targetWeatherType.cloudsOverride.typeModifierLayer2,blendTime);
                    clouds.settingsLayer2.anvilBias = Mathf.Lerp(clouds.settingsLayer2.anvilBias, targetWeatherType.cloudsOverride.anvilBiasLayer2,blendTime);

                    clouds.settingsLayer2.scatteringIntensity = Mathf.Lerp(clouds.settingsLayer2.scatteringIntensity, targetWeatherType.cloudsOverride.scatteringIntensityLayer2,blendTime);
                    clouds.settingsLayer2.multiScatteringA = Mathf.Lerp(clouds.settingsLayer2.multiScatteringA, targetWeatherType.cloudsOverride.multiScatteringALayer2,blendTime);
                    clouds.settingsLayer2.multiScatteringB = Mathf.Lerp(clouds.settingsLayer2.multiScatteringB, targetWeatherType.cloudsOverride.multiScatteringBLayer2,blendTime);
                    clouds.settingsLayer2.multiScatteringC = Mathf.Lerp(clouds.settingsLayer2.multiScatteringC, targetWeatherType.cloudsOverride.multiScatteringCLayer2,blendTime);
                    clouds.settingsLayer2.powderIntensity = Mathf.Lerp(clouds.settingsLayer2.powderIntensity, targetWeatherType.cloudsOverride.powderIntensityLayer2,blendTime);
                    clouds.settingsLayer2.silverLiningSpread = Mathf.Lerp(clouds.settingsLayer2.silverLiningSpread, targetWeatherType.cloudsOverride.silverLiningSpreadLayer2,blendTime);
                    clouds.settingsLayer2.lightAbsorbtion = Mathf.Lerp(clouds.settingsLayer2.lightAbsorbtion, targetWeatherType.cloudsOverride.ligthAbsorbtionLayer2,blendTime);
                    
                    clouds.settingsLayer2.density = Mathf.Lerp(clouds.settingsLayer2.density, targetWeatherType.cloudsOverride.densityLayer2,blendTime);
                    clouds.settingsLayer2.densitySmoothness = Mathf.Lerp(clouds.settingsLayer2.densitySmoothness, targetWeatherType.cloudsOverride.densitySmoothnessLayer2,blendTime);
                    clouds.settingsLayer2.baseErosionIntensity = Mathf.Lerp(clouds.settingsLayer2.baseErosionIntensity, targetWeatherType.cloudsOverride.baseErosionIntensityLayer2,blendTime);
                    clouds.settingsLayer2.detailErosionIntensity = Mathf.Lerp(clouds.settingsLayer2.detailErosionIntensity, targetWeatherType.cloudsOverride.detailErosionIntensityLayer2,blendTime);
                    clouds.settingsLayer2.curlIntensity = Mathf.Lerp(clouds.settingsLayer2.curlIntensity, targetWeatherType.cloudsOverride.curlIntensityLayer2,blendTime);
                } 
            }
        }

        private void BlendFlatCloudsOverride(float blendTime)
        {
            EnviroFlatCloudsModule flatClouds = EnviroManager.instance.FlatClouds;
            
            if(flatClouds != null)
            {
                flatClouds.settings.cirrusCloudsAlpha = Mathf.Lerp(flatClouds.settings.cirrusCloudsAlpha, targetWeatherType.flatCloudsOverride.cirrusCloudsAlpha,blendTime);
                flatClouds.settings.cirrusCloudsCoverage = Mathf.Lerp(flatClouds.settings.cirrusCloudsCoverage, targetWeatherType.flatCloudsOverride.cirrusCloudsCoverage,blendTime);
                flatClouds.settings.cirrusCloudsColorPower = Mathf.Lerp(flatClouds.settings.cirrusCloudsColorPower, targetWeatherType.flatCloudsOverride.cirrusCloudsColorPower,blendTime);
                flatClouds.settings.flatCloudsCoverage = Mathf.Lerp(flatClouds.settings.flatCloudsCoverage, targetWeatherType.flatCloudsOverride.flatCloudsCoverage,blendTime);
                flatClouds.settings.flatCloudsDensity = Mathf.Lerp(flatClouds.settings.flatCloudsDensity, targetWeatherType.flatCloudsOverride.flatCloudsDensity,blendTime);
                flatClouds.settings.flatCloudsLightIntensity = Mathf.Lerp(flatClouds.settings.flatCloudsLightIntensity, targetWeatherType.flatCloudsOverride.flatCloudsLightIntensity,blendTime);
                flatClouds.settings.flatCloudsAmbientIntensity = Mathf.Lerp(flatClouds.settings.flatCloudsAmbientIntensity, targetWeatherType.flatCloudsOverride.flatCloudsAmbientIntensity,blendTime);
                flatClouds.settings.flatCloudsAbsorbtion = Mathf.Lerp(flatClouds.settings.flatCloudsAbsorbtion, targetWeatherType.flatCloudsOverride.flatCloudsAbsorbtion,blendTime);     
            }
        }

        private void BlendAuroraOverride(float blendTime)
        {
            EnviroAuroraModule aurora = EnviroManager.instance.Aurora;
            
            if(aurora != null)
            {
                aurora.Settings.auroraIntensityModifier = Mathf.Lerp(aurora.Settings.auroraIntensityModifier, targetWeatherType.auroraOverride.auroraIntensity,blendTime); 
            }
        }

        private void BlendEnvironmentOverride(float blendTime)
        {
            EnviroEnvironmentModule environment = EnviroManager.instance.Environment;
            
            if(environment != null)
            {
                environment.Settings.temperatureWeatherMod = Mathf.Lerp(environment.Settings.temperatureWeatherMod, targetWeatherType.environmentOverride.temperatureWeatherMod,blendTime);
                environment.Settings.wetnessTarget = Mathf.Lerp(environment.Settings.wetnessTarget, targetWeatherType.environmentOverride.wetnessTarget,blendTime); 
                environment.Settings.snowTarget = Mathf.Lerp(environment.Settings.snowTarget, targetWeatherType.environmentOverride.snowTarget,blendTime); 
            
                environment.Settings.windDirectionX = Mathf.Lerp(environment.Settings.windDirectionX, targetWeatherType.environmentOverride.windDirectionX,blendTime); 
                environment.Settings.windDirectionY = Mathf.Lerp(environment.Settings.windDirectionY, targetWeatherType.environmentOverride.windDirectionY,blendTime); 
                environment.Settings.windSpeed = Mathf.Lerp(environment.Settings.windSpeed, targetWeatherType.environmentOverride.windSpeed,blendTime); 
                environment.Settings.windTurbulence = Mathf.Lerp(environment.Settings.windTurbulence, targetWeatherType.environmentOverride.windTurbulence,blendTime); 
            } 
        }

        private void BlendAudioOverride(float blendTime)
        {
            EnviroAudioModule audio = EnviroManager.instance.Audio;
            
            if(audio != null)
            {
                for(int i = 0; i < audio.Settings.ambientClips.Count; i++)
                {
                    bool hasOverride = false;

                    for(int a = 0; a < targetWeatherType.audioOverride.ambientOverride.Count; a++)
                    {
                        if(targetWeatherType.audioOverride.ambientOverride[a].name == audio.Settings.ambientClips[i].name)
                        {
                            audio.Settings.ambientClips[i].volume = Mathf.Lerp(audio.Settings.ambientClips[i].volume ,targetWeatherType.audioOverride.ambientOverride[a].volume,blendTime); 
                            hasOverride = true;
                        }
                    }

                    if(!hasOverride)
                        audio.Settings.ambientClips[i].volume = Mathf.Lerp(audio.Settings.ambientClips[i].volume ,0f,blendTime); 
                }

                for(int i = 0; i < audio.Settings.weatherClips.Count; i++)
                {
                    bool hasOverride = false;

                    for(int a = 0; a < targetWeatherType.audioOverride.weatherOverride.Count; a++)
                    {
                        if(targetWeatherType.audioOverride.weatherOverride[a].name == audio.Settings.weatherClips[i].name)
                        {
                            audio.Settings.weatherClips[i].volume = Mathf.Lerp(audio.Settings.weatherClips[i].volume ,targetWeatherType.audioOverride.weatherOverride[a].volume,blendTime); 
                            hasOverride = true;
                        }
                    }

                    if(!hasOverride)
                        audio.Settings.weatherClips[i].volume = Mathf.Lerp(audio.Settings.weatherClips[i].volume ,0f,blendTime); 
                }          
            }
        }

        private void BlendLightningOverride(float blendTime)
        {
            EnviroLightningModule lightning = EnviroManager.instance.Lightning;
             
            if(lightning != null)
            {
                lightning.Settings.lightningStorm = targetWeatherType.lightningOverride.lightningStorm; 
                lightning.Settings.randomLightingDelay = Mathf.Lerp(lightning.Settings.randomLightingDelay, targetWeatherType.lightningOverride.randomLightningDelay,blendTime); 
            }
        } 



        //Changes the Weather to new type.
        public void ChangeWeather(EnviroWeatherType type)
        { 
            if(targetWeatherType != type)
            {
                EnviroManager.instance.NotifyWeatherChanged(type);
                EnviroManager.instance.NotifyZoneWeatherChanged(type,null);
            }

            if(EnviroManager.instance.currentZone != null)
               EnviroManager.instance.currentZone.currentWeatherType = type;
    
            targetWeatherType = type;
        }
        public void ChangeWeather(string typeName)
        {
            for(int i = 0; i < Settings.weatherTypes.Count; i++)
            {
                if(Settings.weatherTypes[i].name == typeName)
                {
                    if(targetWeatherType != Settings.weatherTypes[i])
                    {
                        EnviroManager.instance.NotifyWeatherChanged(Settings.weatherTypes[i]);
                        EnviroManager.instance.NotifyZoneWeatherChanged(Settings.weatherTypes[i],null);
                    }

                    if(EnviroManager.instance.currentZone != null)
                       EnviroManager.instance.currentZone.currentWeatherType = Settings.weatherTypes[i];

                    targetWeatherType = Settings.weatherTypes[i];
                }
            }
        }

        public void ChangeWeather(int index)
        {
            for(int i = 0; i < Settings.weatherTypes.Count; i++)
            {
                if(i == index)
                {
                    if(targetWeatherType != Settings.weatherTypes[i])
                    {
                        EnviroManager.instance.NotifyWeatherChanged(Settings.weatherTypes[i]);
                        EnviroManager.instance.NotifyZoneWeatherChanged(Settings.weatherTypes[i],null);
                    }

                    if(EnviroManager.instance.currentZone != null)
                       EnviroManager.instance.currentZone.currentWeatherType = Settings.weatherTypes[i];

                    targetWeatherType = Settings.weatherTypes[i];
                    return;
                }
            } 
        }

        public void ChangeZoneWeather(int weather, int zone)
        {
            if(EnviroManager.instance.zones.Count >= zone && Settings.weatherTypes.Count >= weather)
            {
                EnviroManager.instance.zones[zone].currentWeatherType = Settings.weatherTypes[weather];
                EnviroManager.instance.NotifyZoneWeatherChanged(Settings.weatherTypes[weather],EnviroManager.instance.zones[zone]);
            }  
        }

        public void ChangeWeatherInstant(EnviroWeatherType type)
        {
            if(targetWeatherType != type)
            {
                EnviroManager.instance.NotifyWeatherChanged(type);
                EnviroManager.instance.NotifyZoneWeatherChanged(type,null);
            }
 
            if(EnviroManager.instance.currentZone != null)
               EnviroManager.instance.currentZone.currentWeatherType = type;

            targetWeatherType = type;
            instantTransition = true;
        }

        public void ChangeWeatherInstant(string typeName)
        {
            for(int i = 0; i < Settings.weatherTypes.Count; i++)
            {
                if(Settings.weatherTypes[i].name == typeName)
                {
                    if(targetWeatherType != Settings.weatherTypes[i])
                    {
                        EnviroManager.instance.NotifyWeatherChanged(Settings.weatherTypes[i]);
                        EnviroManager.instance.NotifyZoneWeatherChanged(Settings.weatherTypes[i],null);
                    }

                    if(EnviroManager.instance.currentZone != null)
                       EnviroManager.instance.currentZone.currentWeatherType = Settings.weatherTypes[i];

                    targetWeatherType = Settings.weatherTypes[i];
                    instantTransition = true;
                }
            }
        }
 
        public void ChangeWeatherInstant(int index)
        {
            for(int i = 0; i < Settings.weatherTypes.Count; i++)
            {
                if(i == index)
                {
                    if(targetWeatherType != Settings.weatherTypes[i])
                    {
                        EnviroManager.instance.NotifyWeatherChanged(Settings.weatherTypes[i]);
                        EnviroManager.instance.NotifyZoneWeatherChanged(Settings.weatherTypes[i],null);
                    }

                    if(EnviroManager.instance.currentZone != null)
                       EnviroManager.instance.currentZone.currentWeatherType = Settings.weatherTypes[i];

                    targetWeatherType = Settings.weatherTypes[i];
                    instantTransition = true;
                    return;
                }
            }
        }

        public void RegisterZone(EnviroZone zone)
        {
            EnviroManager.instance.zones.Add(zone);
        }

        public void RemoveZone(EnviroZone zone)
        {
            if(EnviroManager.instance.zones.Contains(zone))
               EnviroManager.instance.zones.Remove(zone);
        }

        //Save and Load
        public void LoadModuleValues ()
        {
            if(preset != null)
            {
                Settings = JsonUtility.FromJson<Enviro.EnviroWeather>(JsonUtility.ToJson(preset.Settings));
            }
            else
            {
                Debug.Log("Please assign a saved module to load from!");
            }
        }
 
        public void SaveModuleValues ()
        {
#if UNITY_EDITOR
        EnviroWeatherModule t =  ScriptableObject.CreateInstance<EnviroWeatherModule>();
        t.name = "Weather Module";
        t.Settings = JsonUtility.FromJson<Enviro.EnviroWeather>(JsonUtility.ToJson(Settings));
 
        string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath(EnviroHelper.assetPath + "/New " + t.name + ".asset");
        UnityEditor.AssetDatabase.CreateAsset(t, assetPathAndName);
        UnityEditor.AssetDatabase.SaveAssets();
        UnityEditor.AssetDatabase.Refresh();
#endif
        }

        public void SaveModuleValues (EnviroWeatherModule module)
        {
            module.Settings = JsonUtility.FromJson<Enviro.EnviroWeather>(JsonUtility.ToJson(Settings));
            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(module);
            UnityEditor.AssetDatabase.SaveAssets();
            #endif
        }
    }
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherModule.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherModuleEditor.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroWeatherModule))]
    public class EnviroWeatherModuleEditor : EnviroModuleEditor
    {  
        private EnviroWeatherModule myTarget; 


        //Properties
        private SerializedProperty cloudsTransitionSpeed,fogTransitionSpeed,skyTransitionSpeed, lightingTransitionSpeed,effectsTransitionSpeed,auroraTransitionSpeed,environmentTransitionSpeed,audioTransitionSpeed;  
        private SerializedProperty globalAutoWeatherChange;

        private int controlID = -100;
        //On Enable
        public override void OnEnable()
        { 
            if(!target)
                return; 

            myTarget = (EnviroWeatherModule)target;
            serializedObj = new SerializedObject(myTarget);
            preset = serializedObj.FindProperty("preset");
            cloudsTransitionSpeed = serializedObj.FindProperty("Settings.cloudsTransitionSpeed");
            fogTransitionSpeed = serializedObj.FindProperty("Settings.fogTransitionSpeed");
            lightingTransitionSpeed = serializedObj.FindProperty("Settings.lightingTransitionSpeed");
            skyTransitionSpeed = serializedObj.FindProperty("Settings.skyTransitionSpeed"); 
            effectsTransitionSpeed = serializedObj.FindProperty("Settings.effectsTransitionSpeed");
            auroraTransitionSpeed = serializedObj.FindProperty("Settings.auroraTransitionSpeed"); 
            audioTransitionSpeed = serializedObj.FindProperty("Settings.audioTransitionSpeed");
            environmentTransitionSpeed = serializedObj.FindProperty("Settings.environmentTransitionSpeed");
            globalAutoWeatherChange = serializedObj.FindProperty("globalAutoWeatherChange"); 
        } 
        public override void OnInspectorGUI()
        {
            if(!target)
                return;

            base.OnInspectorGUI();

            GUI.backgroundColor = baseModuleColor;
            GUILayout.BeginVertical("",boxStyleModified);
            GUI.backgroundColor = Color.white;
            EditorGUILayout.BeginHorizontal();
            myTarget.showModuleInspector = GUILayout.Toggle(myTarget.showModuleInspector, "Weather", headerFoldout);
            
            GUILayout.FlexibleSpace();
            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
            {
                EnviroManager.instance.RemoveModule(EnviroManager.ModuleType.Weather);
                DestroyImmediate(this);
                return;
            } 
            
            EditorGUILayout.EndHorizontal();
            
            if(myTarget.showModuleInspector) 
            {
                serializedObj.UpdateIfRequiredOrScript ();
                EditorGUI.BeginChangeCheck();

                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showWeatherPresetsControls = GUILayout.Toggle(myTarget.showWeatherPresetsControls, "Weather Preset Controls", headerFoldout);               
                if(myTarget.showWeatherPresetsControls)
                {
                GUILayout.Space(5);
                
                Object selectedObject = null;

                if(GUILayout.Button("Add"))
                {
                   controlID = EditorGUIUtility.GetControlID (FocusType.Passive);
                   EditorGUIUtility.ShowObjectPicker<EnviroWeatherType>(null,false,"",controlID);
                }
 
                string commandName = Event.current.commandName;

                if (commandName == "ObjectSelectorClosed" && EditorGUIUtility.GetObjectPickerControlID() == controlID) 
                {
            
                        selectedObject = EditorGUIUtility.GetObjectPickerObject ();
                        
                        bool add = true;
                        
                        for (int i = 0; i < myTarget.Settings.weatherTypes.Count; i++)
                        {
                            if((EnviroWeatherType)selectedObject == myTarget.Settings.weatherTypes[i])
                            add = false;
                        }

                        if(add)
                        {
                        myTarget.Settings.weatherTypes.Add((EnviroWeatherType)selectedObject);
                        EditorUtility.SetDirty(myTarget);
                        }
                        
                    controlID = -100;
                }

                if(GUILayout.Button("Create New"))
                {
                   myTarget.CreateNewWeatherType();
                } 


                GUILayout.Space(15);
                //Make sure that we remove old empty entries where user deleted the scriptable object.
                myTarget.CleanupList();
 
                for (int i = 0; i < myTarget.Settings.weatherTypes.Count; i++) 
                    {      
                          EnviroWeatherType curWT = myTarget.Settings.weatherTypes[i];

                          if(curWT == myTarget.targetWeatherType)
                             GUI.backgroundColor = new Color(0.0f,0.5f,0.0f,1f);

                            GUILayout.BeginVertical ("", boxStyleModified);
                            GUI.backgroundColor = Color.white;

                            EditorGUILayout.BeginHorizontal();
                            curWT.showEditor = GUILayout.Toggle(curWT.showEditor, curWT.name, headerFoldout);
                            GUILayout.FlexibleSpace();
                            if(curWT != myTarget.targetWeatherType)
                            {
                                if(GUILayout.Button("Set Active", EditorStyles.miniButtonRight,GUILayout.Width(70), GUILayout.Height(18)))
                                {
                                    if(EnviroManager.instance != null)
                                    {
                                        myTarget.ChangeWeather(curWT);
                                        EditorUtility.SetDirty(myTarget);
                                    }
                                } 
                            } 

                            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                            {
                                myTarget.RemoveWeatherType(curWT);
                                EditorUtility.SetDirty(myTarget);
                            } 
                            
                            EditorGUILayout.EndHorizontal();
                            //GUILayout.Space(15);
                            if(curWT.showEditor)
                            {
                                Undo.RecordObject(curWT, "WeatherPreset Changed");
                                curWT.name = EditorGUILayout.TextField ("Name", curWT.name);

                                //Lighting
                                if(EnviroManager.instance == null || EnviroManager.instance.Lighting != null)
                                {
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showLightingControls = GUILayout.Toggle(curWT.showLightingControls, "Lighting", headerFoldout);
                                
                                if(curWT.showLightingControls)
                                {
                                    GUILayout.Space(5);
                                    curWT.lightingOverride.directLightIntensityModifier = EditorGUILayout.Slider("Direct Light Intensity", curWT.lightingOverride.directLightIntensityModifier,0f,2f);
                                    curWT.lightingOverride.ambientIntensityModifier = EditorGUILayout.Slider("Ambient Light Intensity", curWT.lightingOverride.ambientIntensityModifier,0f,2f);
                                    curWT.lightingOverride.shadowIntensity = EditorGUILayout.Slider("Shadow Intensity", curWT.lightingOverride.shadowIntensity,0f,1f); 
                               
                                }
                                GUILayout.EndVertical();
                                }

                                //Sky
                                if(EnviroManager.instance == null || EnviroManager.instance.Sky != null)
                                { 
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showSkyControls = GUILayout.Toggle(curWT.showSkyControls, "Sky", headerFoldout);
                                
                                if(curWT.showSkyControls)
                                {
                                    GUILayout.Space(5);
                                    GUIContent colorTitle = new GUIContent();
                                    colorTitle.text = "Sky Color Tint"; 
                                    colorTitle.tooltip = "Sets a color tint for skybox";
                                    //curWT.skyOverride.intensity = EditorGUILayout.FloatField("Direct Light Intensity", curWT.lightingOverride.directLightIntensityModifier,0f,2f);
                                    curWT.skyOverride.skyColorTint = EditorGUILayout.ColorField(colorTitle, curWT.skyOverride.skyColorTint,true,false,true);
                                }
                                GUILayout.EndVertical();
                                }

                                //Volumetric Clouds
                                if(EnviroManager.instance == null || EnviroManager.instance.VolumetricClouds != null)
                                {     
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showCloudControls = GUILayout.Toggle(curWT.showCloudControls, "Volumetric Clouds", headerFoldout);
                                if(curWT.showCloudControls)
                                {
                                    GUILayout.Space(5);
                                    GUILayout.BeginVertical ("", boxStyleModified);
                                    
                                    curWT.cloudsOverride.showLayer1 = GUILayout.Toggle(curWT.cloudsOverride.showLayer1, "Layer 1", headerFoldout);
                                    if(curWT.cloudsOverride.showLayer1)
                                    {
                                        curWT.cloudsOverride.coverageLayer1 = EditorGUILayout.Slider("Coverage", curWT.cloudsOverride.coverageLayer1,-1f,1f);
                                        curWT.cloudsOverride.dilateCoverageLayer1 = EditorGUILayout.Slider("Dilate Coverage", curWT.cloudsOverride.dilateCoverageLayer1,0f,1f);
                                        curWT.cloudsOverride.dilateTypeLayer1 = EditorGUILayout.Slider("Dilate Type", curWT.cloudsOverride.dilateTypeLayer1,0f,1f);
                                        curWT.cloudsOverride.typeModifierLayer1 = EditorGUILayout.Slider("Type Modifier", curWT.cloudsOverride.typeModifierLayer1,0f,1f);
                                        curWT.cloudsOverride.anvilBiasLayer1 = EditorGUILayout.Slider("Anvil Bias", curWT.cloudsOverride.anvilBiasLayer1,0f,1f);
                                        GUILayout.Space(10);
                                        curWT.cloudsOverride.scatteringIntensityLayer1 = EditorGUILayout.Slider("Scattering Intensity", curWT.cloudsOverride.scatteringIntensityLayer1,0f,2f);
                                        curWT.cloudsOverride.multiScatteringALayer1 = EditorGUILayout.Slider("Multi Scattering A", curWT.cloudsOverride.multiScatteringALayer1,0f,1f);
                                        curWT.cloudsOverride.multiScatteringBLayer1 = EditorGUILayout.Slider("Multi Scattering B", curWT.cloudsOverride.multiScatteringBLayer1,0f,1f);
                                        curWT.cloudsOverride.multiScatteringCLayer1 = EditorGUILayout.Slider("Multi Scattering C", curWT.cloudsOverride.multiScatteringCLayer1,0f,1f);
                                        curWT.cloudsOverride.powderIntensityLayer1 = EditorGUILayout.Slider("Powder Intensity", curWT.cloudsOverride.powderIntensityLayer1,0f,1f);
                                        curWT.cloudsOverride.silverLiningSpreadLayer1 = EditorGUILayout.Slider("Silver Lining Spread", curWT.cloudsOverride.silverLiningSpreadLayer1,0f,1f);
                                        curWT.cloudsOverride.ligthAbsorbtionLayer1 = EditorGUILayout.Slider("Light Absorbtion", curWT.cloudsOverride.ligthAbsorbtionLayer1,0f,2f);
                                        curWT.cloudsOverride.ambientLightIntensity = EditorGUILayout.Slider("Ambient Light Intensity", curWT.cloudsOverride.ambientLightIntensity,0f,2f);
                                        GUILayout.Space(10);
                                        curWT.cloudsOverride.densityLayer1 = EditorGUILayout.Slider("Density", curWT.cloudsOverride.densityLayer1,0f,2f);
                                        curWT.cloudsOverride.densitySmoothnessLayer1 = EditorGUILayout.Slider("Density Smoothness", curWT.cloudsOverride.densitySmoothnessLayer1,0f,2f);
                                        curWT.cloudsOverride.baseErosionIntensityLayer1 = EditorGUILayout.Slider("Base Erosion Intensity", curWT.cloudsOverride.baseErosionIntensityLayer1,0f,1f);
                                        curWT.cloudsOverride.detailErosionIntensityLayer1 = EditorGUILayout.Slider("Detail Erosion Intensity", curWT.cloudsOverride.detailErosionIntensityLayer1,0f,1f);
                                        curWT.cloudsOverride.curlIntensityLayer1 = EditorGUILayout.Slider("Curl Intensity", curWT.cloudsOverride.curlIntensityLayer1,0f,1f);
                                        GUILayout.Space(10);
                                    }
                                    GUILayout.EndVertical();

                                    if(EnviroManager.instance == null || EnviroManager.instance.VolumetricClouds.settingsGlobal.dualLayer)
                                    {
                                        GUILayout.BeginVertical ("", boxStyleModified);
                                        curWT.cloudsOverride.showLayer2 = GUILayout.Toggle(curWT.cloudsOverride.showLayer2, "Layer 2", headerFoldout);
                                        if(curWT.cloudsOverride.showLayer2)
                                        {
                                            curWT.cloudsOverride.coverageLayer2 = EditorGUILayout.Slider("Coverage", curWT.cloudsOverride.coverageLayer2,-1f,1f);
                                            curWT.cloudsOverride.dilateCoverageLayer2 = EditorGUILayout.Slider("Dilate Coverage", curWT.cloudsOverride.dilateCoverageLayer2,0f,1f);
                                            curWT.cloudsOverride.dilateTypeLayer2 = EditorGUILayout.Slider("Dilate Type", curWT.cloudsOverride.dilateTypeLayer2,0f,1f);
                                            curWT.cloudsOverride.typeModifierLayer2 = EditorGUILayout.Slider("Type Modifier", curWT.cloudsOverride.typeModifierLayer2,0f,1f);
                                            curWT.cloudsOverride.anvilBiasLayer2 = EditorGUILayout.Slider("Anvil Bias", curWT.cloudsOverride.anvilBiasLayer2,0f,1f);
                                            GUILayout.Space(10);
                                            curWT.cloudsOverride.scatteringIntensityLayer2 = EditorGUILayout.Slider("Scattering Intensity", curWT.cloudsOverride.scatteringIntensityLayer2,0f,2f);
                                            curWT.cloudsOverride.multiScatteringALayer2 = EditorGUILayout.Slider("Multi Scattering A", curWT.cloudsOverride.multiScatteringALayer2,0f,1f);
                                            curWT.cloudsOverride.multiScatteringBLayer2 = EditorGUILayout.Slider("Multi Scattering B", curWT.cloudsOverride.multiScatteringBLayer2,0f,1f);
                                            curWT.cloudsOverride.multiScatteringCLayer2 = EditorGUILayout.Slider("Multi Scattering C", curWT.cloudsOverride.multiScatteringCLayer2,0f,1f);
                                            curWT.cloudsOverride.powderIntensityLayer2 = EditorGUILayout.Slider("Powder Intensity", curWT.cloudsOverride.powderIntensityLayer2,0f,1f);
                                            curWT.cloudsOverride.silverLiningSpreadLayer2 = EditorGUILayout.Slider("Silver Lining Spread", curWT.cloudsOverride.silverLiningSpreadLayer2,0f,1f);
                                            curWT.cloudsOverride.ligthAbsorbtionLayer2 = EditorGUILayout.Slider("Light Absorbtion", curWT.cloudsOverride.ligthAbsorbtionLayer2,0f,2f);
                                            curWT.cloudsOverride.ambientLightIntensity = EditorGUILayout.Slider("Ambient Light Intensity", curWT.cloudsOverride.ambientLightIntensity,0f,2f);
                                            GUILayout.Space(10);
                                            curWT.cloudsOverride.densityLayer2 = EditorGUILayout.Slider("Density", curWT.cloudsOverride.densityLayer2,0f,2f);
                                            curWT.cloudsOverride.densitySmoothnessLayer2 = EditorGUILayout.Slider("Density Smoothness", curWT.cloudsOverride.densitySmoothnessLayer2,0f,2f);
                                            curWT.cloudsOverride.baseErosionIntensityLayer2 = EditorGUILayout.Slider("Base Erosion Intensity", curWT.cloudsOverride.baseErosionIntensityLayer2,0f,1f);
                                            curWT.cloudsOverride.detailErosionIntensityLayer2 = EditorGUILayout.Slider("Detail Erosion Intensity", curWT.cloudsOverride.detailErosionIntensityLayer2,0f,1f);
                                            curWT.cloudsOverride.curlIntensityLayer2 = EditorGUILayout.Slider("Curl Intensity", curWT.cloudsOverride.curlIntensityLayer2,0f,1f);
                                        }
                                        GUILayout.EndVertical();
                                    }                    
                                }
                                GUILayout.EndVertical(); 
                                }

                                if(EnviroManager.instance == null || EnviroManager.instance.FlatClouds != null)
                                {
                                //Flat Clouds
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showFlatCloudControls = GUILayout.Toggle(curWT.showFlatCloudControls, "Flat Clouds", headerFoldout);
                                
                                if(curWT.showFlatCloudControls)
                                { 
                                    GUILayout.Space(5);
                                    EditorGUILayout.LabelField("Cirrus Clouds", headerStyle);
                                    curWT.flatCloudsOverride.cirrusCloudsCoverage = EditorGUILayout.Slider("Cirrus Clouds Coverage", curWT.flatCloudsOverride.cirrusCloudsCoverage,0f,1f);
                                    curWT.flatCloudsOverride.cirrusCloudsAlpha = EditorGUILayout.Slider("Cirrus Clouds Alpha", curWT.flatCloudsOverride.cirrusCloudsAlpha,0f,1f);
                                    curWT.flatCloudsOverride.cirrusCloudsColorPower = EditorGUILayout.Slider("Cirrus Clouds Color", curWT.flatCloudsOverride.cirrusCloudsColorPower,0f,2f);
                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Flat Clouds", headerStyle);
                                    curWT.flatCloudsOverride.flatCloudsCoverage = EditorGUILayout.Slider("Flat Clouds Coverage", curWT.flatCloudsOverride.flatCloudsCoverage,0f,2f);
                                    curWT.flatCloudsOverride.flatCloudsLightIntensity = EditorGUILayout.Slider("Flat Clouds Light Intensity", curWT.flatCloudsOverride.flatCloudsLightIntensity,0f,2f);
                                    curWT.flatCloudsOverride.flatCloudsAmbientIntensity = EditorGUILayout.Slider("Flat Clouds Ambient Intensity", curWT.flatCloudsOverride.flatCloudsAmbientIntensity,0f,2f);
                                    curWT.flatCloudsOverride.flatCloudsAbsorbtion = EditorGUILayout.Slider("Flat Clouds Light Absorbtion", curWT.flatCloudsOverride.flatCloudsAbsorbtion,0f,2f);
                                }
                                GUILayout.EndVertical();
                                }

                                if(EnviroManager.instance == null || EnviroManager.instance.Fog != null)
                                {
                                //Fog
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showFogControls = GUILayout.Toggle(curWT.showFogControls, "Fog", headerFoldout);
                                
                                if(curWT.showFogControls)
                                { 
                                    GUILayout.Space(5);
                                    EditorGUILayout.LabelField("Layer 1", headerStyle);
                                    curWT.fogOverride.fogDensity = EditorGUILayout.Slider("Fog Density 1", curWT.fogOverride.fogDensity,0f,1f);
                                    curWT.fogOverride.fogHeightFalloff = EditorGUILayout.Slider("Fog Height Falloff 1", curWT.fogOverride.fogHeightFalloff,0f,0.05f);
                                    curWT.fogOverride.fogHeight = EditorGUILayout.FloatField("Fog Height 1 ", curWT.fogOverride.fogHeight);
                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Layer 2", headerStyle);
                                    curWT.fogOverride.fogDensity2 = EditorGUILayout.Slider("Fog Density 2", curWT.fogOverride.fogDensity2,0f,1f);
                                    curWT.fogOverride.fogHeightFalloff2 = EditorGUILayout.Slider("Fog Height Falloff 2", curWT.fogOverride.fogHeightFalloff2,0f,0.05f);
                                    curWT.fogOverride.fogHeight2 = EditorGUILayout.FloatField("Fog Height 2", curWT.fogOverride.fogHeight2);
                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Color", headerStyle);
                                    curWT.fogOverride.fogColorBlend = EditorGUILayout.Slider("Fog Sky-Color Blending", curWT.fogOverride.fogColorBlend,0f,1.0f);
                                    curWT.fogOverride.fogColorMod = EditorGUILayout.ColorField("Fog Color Tint", curWT.fogOverride.fogColorMod);
                                    GUILayout.Space(10);
                           
                            #if !ENVIRO_HDRP
                                    EditorGUILayout.LabelField("Unity Fog", headerStyle);
                                    
                                    if(EnviroManager.instance != null && EnviroManager.instance.Fog.Settings.unityFogMode == FogMode.Linear)
                                    {
                                        curWT.fogOverride.unityFogStartDistance = EditorGUILayout.FloatField("Unity Fog Start Distance", curWT.fogOverride.unityFogStartDistance);
                                        curWT.fogOverride.unityFogEndDistance = EditorGUILayout.FloatField("Unity Fog End Distance", curWT.fogOverride.unityFogEndDistance);
                                    } 
                                    else
                                    {
                                        curWT.fogOverride.unityFogDensity = EditorGUILayout.FloatField("Unity Fog Density", curWT.fogOverride.unityFogDensity);
                                    }
                                   
                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("Volumetrics", headerStyle);
                                    curWT.fogOverride.scattering = EditorGUILayout.Slider("Scattering Intensity", curWT.fogOverride.scattering,0f,2.0f);
                                    curWT.fogOverride.extinction = EditorGUILayout.Slider("Extinction Intensity", curWT.fogOverride.extinction,0f,1.0f);
                                    curWT.fogOverride.anistropy = EditorGUILayout.Slider("Anistropy", curWT.fogOverride.anistropy,0f,1.0f);
                            #else
                                    EditorGUILayout.LabelField("HDRP Fog", headerStyle);
                                    curWT.fogOverride.fogAttenuationDistance = EditorGUILayout.Slider("Attenuation Distance", curWT.fogOverride.fogAttenuationDistance,0f,400f);
                                    curWT.fogOverride.baseHeight = EditorGUILayout.FloatField("Base Height", curWT.fogOverride.baseHeight);
                                    curWT.fogOverride.maxHeight = EditorGUILayout.FloatField("Max Height", curWT.fogOverride.maxHeight);
                                    GUILayout.Space(10);
                                    EditorGUILayout.LabelField("HDRP Volumetrics", headerStyle);
                                    curWT.fogOverride.ambientDimmer = EditorGUILayout.Slider("Ambient Dimmer", curWT.fogOverride.ambientDimmer,0f,1f);
                                    curWT.fogOverride.directLightMultiplier = EditorGUILayout.Slider("Direct Light Multiplier", curWT.fogOverride.directLightMultiplier,0f,16f);
                                    curWT.fogOverride.directLightShadowdimmer = EditorGUILayout.Slider("Direct Light Shadow gimmer", curWT.fogOverride.directLightShadowdimmer,0f,1f);
                            #endif 
                                }
                                GUILayout.EndVertical();
                                }

                                if(EnviroManager.instance == null || EnviroManager.instance.Effects != null)
                                {
                                //Effects
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showEffectControls = GUILayout.Toggle(curWT.showEffectControls, "Effects", headerFoldout);
                                
                                if(curWT.showEffectControls)
                                {  
                                    GUILayout.Space(10);
                                    if (GUILayout.Button ("Add")) 
                                    {
                                        curWT.effectsOverride.effectsOverride.Add (new EnviroEffectsOverrideType());
                                        EditorUtility.SetDirty(curWT);
                                    } 
                
                                    GUILayout.Space(10);
                                    
                                    for (int a = 0; a < curWT.effectsOverride.effectsOverride.Count; a++) 
                                    {      
                                        GUILayout.BeginVertical ("", boxStyleModified);
                                        EditorGUILayout.BeginHorizontal();
                                        curWT.effectsOverride.effectsOverride[a].showEditor = GUILayout.Toggle(curWT.effectsOverride.effectsOverride[a].showEditor, curWT.effectsOverride.effectsOverride[a].name, headerFoldout);
                                        GUILayout.FlexibleSpace();
                                        if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                                        { 
                                            curWT.effectsOverride.effectsOverride.Remove (curWT.effectsOverride.effectsOverride[a]);
                                            EditorUtility.SetDirty(curWT);
                                            return;
                                        }           
                                        EditorGUILayout.EndHorizontal();

                                        if(curWT.effectsOverride.effectsOverride[a].showEditor)
                                        {
                                            curWT.effectsOverride.effectsOverride[a].name = EditorGUILayout.TextField ("Effect Name", curWT.effectsOverride.effectsOverride[a].name);
                                            curWT.effectsOverride.effectsOverride[a].emission = EditorGUILayout.Slider ("Emission", curWT.effectsOverride.effectsOverride[a].emission,0f,1f);                                      
                                        } 
                                        GUILayout.EndVertical ();
                                    }
                                }
                                GUILayout.EndVertical();
                                }
                                if(EnviroManager.instance == null || EnviroManager.instance.Aurora != null)
                                {
                                //Aurora
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showAuroraControls = GUILayout.Toggle(curWT.showAuroraControls, "Aurora", headerFoldout);
                                
                                if(curWT.showAuroraControls) 
                                { 
                                    GUILayout.Space(5);
                                    curWT.auroraOverride.auroraIntensity = EditorGUILayout.Slider("Aurora Intensity Modifier", curWT.auroraOverride.auroraIntensity,0f,1f);
                                } 
                                GUILayout.EndVertical();
                                }
                                if(EnviroManager.instance == null || EnviroManager.instance.Environment != null)
                                {
                                //Environment
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showEnvironmentControls = GUILayout.Toggle(curWT.showEnvironmentControls, "Environment", headerFoldout);
                                
                                if(EnviroManager.instance == null || curWT.showEnvironmentControls) 
                                { 
                                    GUILayout.Space(5);
                                    curWT.environmentOverride.temperatureWeatherMod = EditorGUILayout.Slider("Temperature Modifier", curWT.environmentOverride.temperatureWeatherMod,-20f,20f);
                                    GUILayout.Space(5);
                                    curWT.environmentOverride.wetnessTarget = EditorGUILayout.Slider("Wetness Target", curWT.environmentOverride.wetnessTarget,0f,1f);
                                    curWT.environmentOverride.snowTarget = EditorGUILayout.Slider("Snow Target", curWT.environmentOverride.snowTarget,0f,1f);
                                    GUILayout.Space(10);
                                    curWT.environmentOverride.windDirectionX = EditorGUILayout.Slider("Wind Direction X", curWT.environmentOverride.windDirectionX,-1f,1f);
                                    curWT.environmentOverride.windDirectionY = EditorGUILayout.Slider("Wind Direction Y", curWT.environmentOverride.windDirectionY,-1f,1f);
                                    GUILayout.Space(5);
                                    curWT.environmentOverride.windSpeed = EditorGUILayout.Slider("Wind Speed", curWT.environmentOverride.windSpeed,0f,1f);
                                    curWT.environmentOverride.windTurbulence = EditorGUILayout.Slider("Wind Turbulence", curWT.environmentOverride.windTurbulence,0f,1f);                                } 
                                    GUILayout.EndVertical();
                                }


                                if(EnviroManager.instance == null || EnviroManager.instance.Lightning != null)
                                {
                                //Lightning
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showLightningControls = GUILayout.Toggle(curWT.showLightningControls, "Lightning", headerFoldout);
                                
                                if(curWT.showLightningControls) 
                                {
                                    GUILayout.Space(5);
                                    curWT.lightningOverride.lightningStorm = EditorGUILayout.Toggle("Lightning Storm", curWT.lightningOverride.lightningStorm);
                                    curWT.lightningOverride.randomLightningDelay = EditorGUILayout.Slider("Lightning Delay", curWT.lightningOverride.randomLightningDelay,1f,60f);
                                }
                                GUILayout.EndVertical();
                                }


                                if(EnviroManager.instance == null || EnviroManager.instance.Audio != null)
                                {
                                //Audio
                                GUILayout.BeginVertical ("", boxStyleModified);
                                curWT.showAudioControls = GUILayout.Toggle(curWT.showAudioControls, "Audio", headerFoldout);
                                
                                if(curWT.showAudioControls)
                                {        
                                    GUILayout.Space(5);
                                    //Ambient SFX
                                    GUILayout.BeginVertical ("", boxStyleModified);
                                    curWT.showAmbientAudioControls = GUILayout.Toggle(curWT.showAmbientAudioControls, "Ambient", headerFoldout);         
                                    if(curWT.showAmbientAudioControls)
                                    {    
                                        GUILayout.Space(10);
                                        if (GUILayout.Button ("Add")) 
                                        {
                                            curWT.audioOverride.ambientOverride.Add (new EnviroAudioOverrideType());
                                             EditorUtility.SetDirty(curWT);
                                        }
                    
                                        GUILayout.Space(10);
                                        
                                        for (int a = 0; a < curWT.audioOverride.ambientOverride.Count; a++) 
                                        {      
                                            GUILayout.BeginVertical ("", boxStyleModified);
                                            EditorGUILayout.BeginHorizontal();
                                            curWT.audioOverride.ambientOverride[a].showEditor = GUILayout.Toggle(curWT.audioOverride.ambientOverride[a].showEditor, curWT.audioOverride.ambientOverride[a].name, headerFoldout);
                                            GUILayout.FlexibleSpace();
                                            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                                            { 
                                                curWT.audioOverride.ambientOverride.Remove (curWT.audioOverride.ambientOverride[a]);
                                                 EditorUtility.SetDirty(curWT);
                                                return;
                                            }           
                                            EditorGUILayout.EndHorizontal();

                                            if(curWT.audioOverride.ambientOverride[a].showEditor)
                                            {
                                                curWT.audioOverride.ambientOverride[a].name = EditorGUILayout.TextField ("Audio Name", curWT.audioOverride.ambientOverride[a].name);
                                                curWT.audioOverride.ambientOverride[a].volume = EditorGUILayout.Slider ("Volume", curWT.audioOverride.ambientOverride[a].volume,0f,1f);                                      
                                            } 
                                            GUILayout.EndVertical ();
                                        }
                                    }
                                    GUILayout.EndVertical ();

                                    //Weather SFX
                                    GUILayout.BeginVertical ("", boxStyleModified);
                                    curWT.showWeatherAudioControls = GUILayout.Toggle(curWT.showWeatherAudioControls, "Weather", headerFoldout);         
                                    if(curWT.showWeatherAudioControls)
                                    {     
                                        GUILayout.Space(10);
                                        if (GUILayout.Button ("Add")) 
                                        {
                                            curWT.audioOverride.weatherOverride.Add (new EnviroAudioOverrideType());
                                            EditorUtility.SetDirty(curWT);
                                        }
                    
                                        GUILayout.Space(10);
                                        
                                        for (int a = 0; a < curWT.audioOverride.weatherOverride.Count; a++) 
                                        {      
                                            GUILayout.BeginVertical ("", boxStyleModified);
                                            EditorGUILayout.BeginHorizontal();
                                            curWT.audioOverride.weatherOverride[a].showEditor = GUILayout.Toggle(curWT.audioOverride.weatherOverride[a].showEditor, curWT.audioOverride.weatherOverride[a].name, headerFoldout);
                                            GUILayout.FlexibleSpace();
                                            if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                                            { 
                                                curWT.audioOverride.weatherOverride.Remove (curWT.audioOverride.weatherOverride[a]);
                                                EditorUtility.SetDirty(curWT);
                                                return;
                                            }           
                                            EditorGUILayout.EndHorizontal();

                                            if(curWT.audioOverride.weatherOverride[a].showEditor)
                                            {
                                                curWT.audioOverride.weatherOverride[a].name = EditorGUILayout.TextField ("Audio Name", curWT.audioOverride.weatherOverride[a].name);
                                                curWT.audioOverride.weatherOverride[a].volume = EditorGUILayout.Slider ("Volume", curWT.audioOverride.weatherOverride[a].volume,0f,1f);                                      
                                            } 
                                            GUILayout.EndVertical ();
                                        }
                                    }
                                    GUILayout.EndVertical ();
                                }
                                GUILayout.EndVertical();
                                }
                                //END
                            }
                            GUILayout.EndVertical ();
                            GUILayout.Space(2.5f);
                    }
                }
                GUILayout.EndVertical ();


                /// Transition Foldout
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showTransitionControls = GUILayout.Toggle(myTarget.showTransitionControls, "Transition Controls", headerFoldout);               
                if(myTarget.showTransitionControls)
                {
                    GUILayout.Space(5);
                    EditorGUILayout.PropertyField(cloudsTransitionSpeed);
                    EditorGUILayout.PropertyField(fogTransitionSpeed);
                    EditorGUILayout.PropertyField(skyTransitionSpeed);              
                    EditorGUILayout.PropertyField(lightingTransitionSpeed);
                    EditorGUILayout.PropertyField(effectsTransitionSpeed);
                    EditorGUILayout.PropertyField(auroraTransitionSpeed); 
                    EditorGUILayout.PropertyField(environmentTransitionSpeed);           
                    EditorGUILayout.PropertyField(audioTransitionSpeed);
                
                }
                GUILayout.EndVertical ();

                ///Zone Foldout
                if(EnviroManager.instance != null)
                {
                    GUI.backgroundColor = categoryModuleColor;
                    GUILayout.BeginVertical("",boxStyleModified);
                    GUI.backgroundColor = Color.white;
                    myTarget.showZoneControls = GUILayout.Toggle(myTarget.showZoneControls, "Zone Controls", headerFoldout);               
                    
                    if(myTarget.showZoneControls)
                    {
                        GUILayout.Space(5);
                        EditorGUILayout.PropertyField(globalAutoWeatherChange);
                        GUILayout.Space(5);
                        EnviroManager.instance.defaultZone = (EnviroZone)EditorGUILayout.ObjectField ("Default Zone", EnviroManager.instance.defaultZone, typeof(EnviroZone), true);
                        EnviroManager.instance.currentZone = (EnviroZone)EditorGUILayout.ObjectField ("Current Zone", EnviroManager.instance.currentZone, typeof(EnviroZone), true);
                        GUILayout.Space(5);
                        GUILayout.Label("Zones List" , headerStyle);
                        GUILayout.Space(5);
                        for (int i = 0; i < EnviroManager.instance.zones.Count; i++) 
                        {  
                            if(EnviroManager.instance.zones[i] != null)
                            {
                                GUI.backgroundColor = EnviroManager.instance.zones[i].zoneGizmoColor;
                                GUILayout.BeginVertical(EnviroManager.instance.zones[i].gameObject.name,boxStyleModified);
                                GUI.backgroundColor = Color.white;
                                EditorGUILayout.BeginHorizontal();

                                GUILayout.FlexibleSpace();
                                if(GUILayout.Button("Show", EditorStyles.miniButtonRight,GUILayout.Width(100), GUILayout.Height(18)))
                                {
                                UnityEditor.Selection.activeObject = EnviroManager.instance.zones[i];
                                } 
                                EditorGUILayout.EndHorizontal();
                
                                EditorGUILayout.BeginHorizontal();
                                if(EnviroManager.instance.zones[i].currentWeatherType != null)
                                    GUILayout.Label("Current Weather: " + EnviroManager.instance.zones[i].currentWeatherType.name , wrapStyle);
                                else
                                    GUILayout.Label("Current Weather: Not Set" , wrapStyle);

                                if(EnviroManager.instance.zones[i].nextWeatherType != null)
                                    GUILayout.Label("Next Weather: " + EnviroManager.instance.zones[i].nextWeatherType.name, wrapStyle);
                                else
                                    GUILayout.Label("Next Weather: Not Set" , wrapStyle);        
                                EditorGUILayout.EndHorizontal();

                                GUILayout.EndVertical ();
                            }
                        }
                    }
                    GUILayout.EndVertical ();
                }
               
                /// Save Load
                GUI.backgroundColor = categoryModuleColor;
                GUILayout.BeginVertical("",boxStyleModified);
                GUI.backgroundColor = Color.white;
                myTarget.showSaveLoad = GUILayout.Toggle(myTarget.showSaveLoad, "Save/Load", headerFoldout);
                
                if(myTarget.showSaveLoad)
                {
                    EditorGUILayout.PropertyField(preset);
                    GUILayout.BeginHorizontal("",wrapStyle);

                    if(myTarget.preset != null)
                    {
                        if(GUILayout.Button("Load"))
                        {
                            myTarget.LoadModuleValues();
                        }
                        if(GUILayout.Button("Save"))
                        {
                            myTarget.SaveModuleValues(myTarget.preset);
                        }
                    }
                    if(GUILayout.Button("Save As New"))
                    {
                        myTarget.SaveModuleValues();
                    }
                    GUILayout.EndHorizontal();
                }
                GUILayout.EndVertical();
                /// Save Load End

                ApplyChanges ();
            }
            GUILayout.EndVertical();

            if(myTarget.showModuleInspector)
             GUILayout.Space(20);
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherModuleEditor.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherType.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
  

namespace Enviro
{
	[Serializable] 
	public class EnviroWeatherTypeCloudsOverride
	{ 
		public float ambientLightIntensity = 1f;
		//Layer 1
		public bool showLayer1;
		public float coverageLayer1 = 0f;
		public float dilateCoverageLayer1 = 0.5f;
		public float dilateTypeLayer1 = 0.5f; 
		public float typeModifierLayer1 = 0.5f;
		public float anvilBiasLayer1 = 0.0f;
		public float scatteringIntensityLayer1 = 1.5f;		
		public float multiScatteringALayer1 = 0.5f;
		public float multiScatteringBLayer1 = 0.5f;
		public float multiScatteringCLayer1 = 0.5f;
		public float powderIntensityLayer1 = 0.3f;
		public float silverLiningSpreadLayer1 = 0.8f;
		public float ligthAbsorbtionLayer1 = 1.0f;
		public float densityLayer1 = 0.3f;
		public float densitySmoothnessLayer1 = 1.0f;  
		public float baseErosionIntensityLayer1 = 0.0f;
		public float detailErosionIntensityLayer1 = 0.3f;
		public float curlIntensityLayer1 = 0.05f;

		//Layer 2
		public bool showLayer2;
		public float coverageLayer2 = 0f;
		public float dilateCoverageLayer2 = 0.5f;
		public float dilateTypeLayer2 = 0.5f;
		public float typeModifierLayer2 = 0.5f;
		public float anvilBiasLayer2 = 0.0f;
		public float scatteringIntensityLayer2 = 1.5f;
		public float multiScatteringALayer2 = 0.5f;  
		public float multiScatteringBLayer2 = 0.5f;
		public float multiScatteringCLayer2 = 0.5f;
		public float powderIntensityLayer2 = 0.3f;
		public float silverLiningSpreadLayer2 = 0.8f;
		public float ligthAbsorbtionLayer2 = 1.0f;
		public float densityLayer2 = 0.3f;
		public float densitySmoothnessLayer2 = 1.0f;  
		public float baseErosionIntensityLayer2 = 0.0f;
		public float detailErosionIntensityLayer2 = 0.3f;
		public float curlIntensityLayer2 = 0.05f;
	}

	[Serializable]  
	public class EnviroWeatherTypeFlatCloudsOverride
	{
		public float cirrusCloudsAlpha = 0.5f;
		public float cirrusCloudsCoverage = 0.5f;
		public float cirrusCloudsColorPower = 1.0f;
		public float flatCloudsCoverage = 1.0f;
		public float flatCloudsDensity = 1.0f;
		public float flatCloudsLightIntensity = 1.0f;
		public float flatCloudsAmbientIntensity = 1.0f;
		public float flatCloudsAbsorbtion = 0.6f;
	} 

	[Serializable] 
	public class EnviroWeatherTypeLightingOverride
	{
		public float directLightIntensityModifier = 1.0f;
		public float ambientIntensityModifier = 1.0f;
		public float shadowIntensity = 1.0f;
	} 

	[Serializable]  
	public class EnviroWeatherTypeSkyOverride
	{
		public float intensity = 1.0f;
		public Color skyColorTint = Color.white;
	} 
 
 	[Serializable]  
	public class EnviroAudioOverrideType
	{
		public bool showEditor;
		public string name;
		public float volume;
		public bool spring;
		public bool summer;
		public bool autumn;
		public bool winter;
	}

	[Serializable]  
	public class EnviroWeatherTypeAudioOverride
	{
		public List<EnviroAudioOverrideType> ambientOverride = new List<EnviroAudioOverrideType>();
		public List<EnviroAudioOverrideType> weatherOverride = new List<EnviroAudioOverrideType>();
	}
	
	[Serializable] 
	public class EnviroWeatherTypeFogOverride
	{
		public float fogDensity = 0.02f; 
		public float fogHeightFalloff = 0.2f;
		public float fogHeight = 0.0f;
		public float fogDensity2 = 0.02f;
		public float fogHeightFalloff2 = 0.2f;
		public float fogHeight2;   
		public float fogColorBlend = 0.5f;
		public Color fogColorMod = Color.white;
		public float scattering = 0.015f;
		public float extinction = 0.01f;
		public float anistropy = 0.6f; 

		#if ENVIRO_HDRP 
		public float fogAttenuationDistance = 400f;	
		public float maxHeight = 250f;
		public float baseHeight = 0f;
		public float ambientDimmer = 1f;
		public float directLightMultiplier = 1f;
		public float directLightShadowdimmer = 1f;
		#endif

		public float unityFogDensity = 0.002f;
    	public float unityFogStartDistance = 0f;
    	public float unityFogEndDistance = 1000f;
	}

	[Serializable]  
	public class EnviroEffectsOverrideType
	{
		public bool showEditor;
		public string name;
		public float emission;
	}

	[Serializable]  
	public class EnviroWeatherTypeEffectsOverride
	{
		public List<EnviroEffectsOverrideType> effectsOverride = new List<EnviroEffectsOverrideType>();
	}

	[Serializable]  
	public class EnviroWeatherTypeAuroraOverride
	{
		public float auroraIntensity = 1f;
	} 

	[Serializable]  
	public class EnviroWeatherTypeEnvironmentOverride
	{
		public float temperatureWeatherMod = 0f;
		public float wetnessTarget = 0f;
		public float snowTarget = 0f;

		public float windDirectionX = 1f;
		public float windDirectionY = -1f;
		public float windSpeed = 0.25f; 
		public float windTurbulence = 0.25f;

	} 

	[Serializable]  
	public class EnviroWeatherTypeLightningOverride
	{
		public bool lightningStorm = false;
		public float randomLightningDelay = 1f;
	} 
 
	[Serializable]  
	public class EnviroWeatherType : ScriptableObject 
	{
		//Inspector 
		public bool showEditor, showEffectControls, showCloudControls, showFlatCloudControls, showFogControls, showSkyControls, showLightingControls, showAuroraControls,showEnvironmentControls, showAudioControls, showAmbientAudioControls, showWeatherAudioControls,showLightningControls;
		
		public EnviroWeatherTypeCloudsOverride cloudsOverride;
		public EnviroWeatherTypeFlatCloudsOverride flatCloudsOverride;
		public EnviroWeatherTypeLightingOverride lightingOverride;
		public EnviroWeatherTypeSkyOverride skyOverride;
		public EnviroWeatherTypeFogOverride fogOverride;
		public EnviroWeatherTypeAuroraOverride auroraOverride;
		public EnviroWeatherTypeEffectsOverride effectsOverride;
		public EnviroWeatherTypeAudioOverride audioOverride;
		public EnviroWeatherTypeLightningOverride lightningOverride;
		public EnviroWeatherTypeEnvironmentOverride environmentOverride;
	}


	public class EnviroWeatherTypeCreation {
		#if UNITY_EDITOR
		[UnityEditor.MenuItem("Assets/Create/Enviro3/Weather")]
		#endif
		public static EnviroWeatherType CreateMyAsset()
		{
			EnviroWeatherType wpreset = ScriptableObject.CreateInstance<EnviroWeatherType>();
			#if UNITY_EDITOR
			// Create and save the new profile with unique name
			string path = UnityEditor.AssetDatabase.GetAssetPath (UnityEditor.Selection.activeObject);
			if (path == "") 
			{
				path = EnviroHelper.assetPath + "/Profiles/Weather Types";
			} 
			string assetPathAndName = UnityEditor.AssetDatabase.GenerateUniqueAssetPath (path + "/New " + "Weather Type" + ".asset");
			UnityEditor.AssetDatabase.CreateAsset (wpreset, assetPathAndName);
			UnityEditor.AssetDatabase.SaveAssets ();
			UnityEditor.AssetDatabase.Refresh();
			#endif
			return wpreset;
		}


		public static GameObject GetAssetPrefab(string name)
		{
			#if UNITY_EDITOR
			string[] assets = UnityEditor.AssetDatabase.FindAssets(name, null);
			for (int idx = 0; idx < assets.Length; idx++)
			{
				string path = UnityEditor.AssetDatabase.GUIDToAssetPath(assets[idx]);
				if (path.Contains(".prefab"))
				{
					return UnityEditor.AssetDatabase.LoadAssetAtPath<GameObject>(path);
				}
			}
			#endif
			return null;
		}

		public static Cubemap GetAssetCubemap(string name)
		{
			#if UNITY_EDITOR
			string[] assets = UnityEditor.AssetDatabase.FindAssets(name, null);
			for (int idx = 0; idx < assets.Length; idx++)
			{
				string path = UnityEditor.AssetDatabase.GUIDToAssetPath(assets[idx]);
				if (path.Contains(".png"))
				{
					return UnityEditor.AssetDatabase.LoadAssetAtPath<Cubemap>(path);
				}
			}
			#endif
			return null;
		}

		public static Texture GetAssetTexture(string name)
		{
			#if UNITY_EDITOR
			string[] assets = UnityEditor.AssetDatabase.FindAssets(name, null);
			for (int idx = 0; idx < assets.Length; idx++)
			{
				string path = UnityEditor.AssetDatabase.GUIDToAssetPath(assets[idx]);
				if (path.Length > 0)
				{
					return UnityEditor.AssetDatabase.LoadAssetAtPath<Texture>(path);
				}
			}
			#endif
			return null;
		}
			
		public static Gradient CreateGradient()
		{
			Gradient nG = new Gradient ();
			GradientColorKey[] gClr = new GradientColorKey[2];
			GradientAlphaKey[] gAlpha = new GradientAlphaKey[2];
 
			gClr [0].color = Color.white;
			gClr [0].time = 0f;
			gClr [1].color = Color.white;
			gClr [1].time = 0f;

			gAlpha [0].alpha = 0f;
			gAlpha [0].time = 0f;
			gAlpha [1].alpha = 0f;
			gAlpha [1].time = 1f;

			nG.SetKeys (gClr, gAlpha);

			return nG;
		}
			
		public static Color GetColor (string hex)
		{
			Color clr = new Color ();	
			ColorUtility.TryParseHtmlString (hex, out clr);
			return clr;
		}
		
		public static Keyframe CreateKey (float value, float time)
		{
			Keyframe k = new Keyframe();
			k.value = value;
			k.time = time;
			return k;
		}

		public static Keyframe CreateKey (float value, float time, float inTangent, float outTangent)
		{
			Keyframe k = new Keyframe();
			k.value = value;
			k.time = time;
			k.inTangent = inTangent;
			k.outTangent = outTangent;
			return k;
		}		
	}
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWeatherType.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWorldAPI.cs---------------


ï»¿using UnityEngine;
using System.Collections;
using System.Collections.Generic;

#if WORLDAPI_PRESENT
using WAPI;
#endif

#if WORLDAPI_PRESENT

namespace Enviro
{ 
    [ExecuteInEditMode]
    [AddComponentMenu("Enviro 3/Integrations/WAPI Integration")]
    public class EnviroWorldAPI : MonoBehaviour, IWorldApiChangeHandler
    {
        public enum GetSet
        {
            None,
            GetFromWAPI,
            SendToWAPI
        }

        public enum Get
        {
            None,
            GetFromWAPI
        }
            
        public enum Set
        {
            None,
            SendToWAPI
        }

        // Controls
        public GetSet snowPower;
        public GetSet wetnessPower;
        public GetSet fogPower;
        public GetSet temperature;
        //public float fogPowerMult = 1000f;
        //public Set windDirection;
        //public Set windSpeed;
        public GetSet seasons;
        public GetSet time;
        public GetSet cloudCover;
        public GetSet location;

        private List<EnviroWeatherType> weatherPresets = new List<EnviroWeatherType>();
        private List<EnviroWeatherType> clearWeatherPresets = new List<EnviroWeatherType>();
        private List<EnviroWeatherType> cloudyWeatherPresets = new List<EnviroWeatherType>();
        private List<EnviroWeatherType> rainWeatherPresets = new List<EnviroWeatherType>();
        private List<EnviroWeatherType> snowWeatherPresets = new List<EnviroWeatherType>();




        private float timeOfDayChached;


        void OnEnable()
        {
            ConnectToWorldAPI();
        }

        void OnDisable()
        {
            DisconnectFromWorldAPI();
        }

        void Start()
        {
            if (EnviroManager.instance == null)
            {
                Debug.LogWarning("Enviro 3 Manager not found!");
                return;
            }

            if(EnviroManager.instance.Time != null)
               timeOfDayChached = EnviroManager.instance.Time.GetTimeOfDay();

            if(EnviroManager.instance.Weather != null)
            {
                //Create Lists of weather presets
                for (int i = 0; i < EnviroManager.instance.Weather.Settings.weatherTypes.Count; i++) 
                {
                    weatherPresets.Add(EnviroManager.instance.Weather.Settings.weatherTypes[i]);
                }
            
                for (int i = 0; i < weatherPresets.Count; i++) 
                {
                //Clear Weather List
                if (weatherPresets [i].cloudsOverride.coverageLayer1 <= -0.5)
                    clearWeatherPresets.Add (weatherPresets [i]);

                //Cloudy Weather List
                if (weatherPresets [i].cloudsOverride.coverageLayer1 >= -0.5) {
                    if (weatherPresets [i].environmentOverride.wetnessTarget == 0f && weatherPresets [i].environmentOverride.snowTarget == 0f)
                        cloudyWeatherPresets.Add (weatherPresets [i]);
                }

                // Rainy Weather List
                if (weatherPresets [i].environmentOverride.wetnessTarget > 0f)
                    rainWeatherPresets.Add (weatherPresets [i]);

                //Snowy Weather List
                if (weatherPresets [i].environmentOverride.snowTarget > 0f)
                    snowWeatherPresets.Add (weatherPresets [i]);
            }
		}


            ConnectToWorldAPI();
        }

        void Update()
        {
            if (EnviroManager.instance == null)
                return;

                   
            if (snowPower == GetSet.SendToWAPI) 
            {
                if(EnviroManager.instance.Environment != null)
                WorldManager.Instance.Snow = new Vector4 (EnviroManager.instance.Environment.Settings.snowTarget, EnviroManager.instance.Environment.Settings.snow, WorldManager.Instance.SnowMinHeight, WorldManager.Instance.SnowAge);
            }

            if (wetnessPower == GetSet.SendToWAPI) 
            {
                if(EnviroManager.instance.Environment != null)
                WorldManager.Instance.Rain = new Vector4 (EnviroManager.instance.Environment.Settings.wetnessTarget, EnviroManager.instance.Environment.Settings.wetness, WorldManager.Instance.RainMinHeight, WorldManager.Instance.RainMaxHeight);
            } 

            if (fogPower == GetSet.SendToWAPI) 
            {
                if(EnviroManager.instance.Fog != null)
                   WorldManager.Instance.Fog = new Vector4 (EnviroManager.instance.Fog.Settings.fogDensity2, EnviroManager.instance.Fog.Settings.fogHeight2, EnviroManager.instance.Fog.Settings.fogDensity, EnviroManager.instance.Fog.Settings.fogHeight);
            }
            
            if (seasons  == GetSet.SendToWAPI)
            {
                if(EnviroManager.instance.Time != null)
                WorldManager.Instance.Season = Mathf.Lerp(0f, 4f, EnviroManager.instance.Time.Settings.date.DayOfYear / 366);
            }

            if (time == GetSet.SendToWAPI)
            {
                if(EnviroManager.instance.Time != null)
                WorldManager.Instance.SetDecimalTime(EnviroManager.instance.Time.GetTimeOfDay());
            }

            if (temperature == GetSet.SendToWAPI)
            {
                if(EnviroManager.instance.Environment != null)
                WorldManager.Instance.Temperature = EnviroManager.instance.Environment.Settings.temperature;
            }

            if (location == GetSet.SendToWAPI)
            {
                if(EnviroManager.instance.Time != null)
                {
                    WorldManager.Instance.Latitude = EnviroManager.instance.Time.Settings.latitude;
                    WorldManager.Instance.Longitude = EnviroManager.instance.Time.Settings.longitude;
                }
            }

            if (cloudCover == GetSet.SendToWAPI)
            { 
                if(EnviroManager.instance.VolumetricClouds != null)
                   WorldManager.Instance.CloudPower = Mathf.Clamp01(EnviroManager.instance.VolumetricClouds.settingsLayer1.coverage + EnviroManager.instance.VolumetricClouds.settingsLayer2.coverage);
                else if (EnviroManager.instance.FlatClouds != null)
                    WorldManager.Instance.CloudPower = Mathf.Clamp01(EnviroManager.instance.FlatClouds.settings.flatCloudsCoverage);
            }
        }

        void ConnectToWorldAPI()
        {
            WorldManager.Instance.AddListener(this);
        }

        void DisconnectFromWorldAPI()
        {
            WorldManager.Instance.RemoveListener(this);
        }

        /// <summary>
        /// Handle updates from world manager
        /// </summary>
        /// <param name="changeArgs">Change to time of day</param>
        public void OnWorldChanged(WorldChangeArgs changeArgs)
        {
            if (EnviroManager.instance == null)
            {
                return;
            }
                
            // Get Time from WAPI
            if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.GameTimeChanged) && time == GetSet.GetFromWAPI && EnviroManager.instance.Time != null)
            {
                float newTimeOfDay = (float) changeArgs.manager.GetTimeDecimal();
                
                if (newTimeOfDay != timeOfDayChached)
                {
                    timeOfDayChached = newTimeOfDay;
                    EnviroManager.instance.Time.SetTimeOfDay(newTimeOfDay);
                }
            }

            //Get Season from WAPI
            if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.SeasonChanged) && seasons == GetSet.GetFromWAPI && EnviroManager.instance.Environment != null)
            {
                if (WorldManager.Instance.Season < 1f)
                    EnviroManager.instance.Environment.ChangeSeason(EnviroEnvironment.Seasons.Winter);
                else if (WorldManager.Instance.Season < 2f)
                    EnviroManager.instance.Environment.ChangeSeason(EnviroEnvironment.Seasons.Spring);
                else if (WorldManager.Instance.Season < 3f)
                    EnviroManager.instance.Environment.ChangeSeason(EnviroEnvironment.Seasons.Summer);
                else
                    EnviroManager.instance.Environment.ChangeSeason(EnviroEnvironment.Seasons.Autumn);
            }
                
            // Set Lat/Lng from WAPI
            if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.LatLngChanged) && location == GetSet.GetFromWAPI && EnviroManager.instance.Time != null)
            {
                EnviroManager.instance.Time.Settings.latitude = WorldManager.Instance.Latitude;
                EnviroManager.instance.Time.Settings.longitude = WorldManager.Instance.Longitude;
            }

            // Set Distance and Height Fog from WAPI
            if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.FogChanged) && fogPower == GetSet.GetFromWAPI && EnviroManager.instance.Fog != null)
            {
                EnviroManager.instance.Fog.Settings.fogDensity = WorldManager.Instance.FogDistancePower;
                EnviroManager.instance.Fog.Settings.fogDensity2 = WorldManager.Instance.FogHeightPower;
                EnviroManager.instance.Fog.Settings.fogHeight = WorldManager.Instance.FogHeightMax;
                EnviroManager.instance.Fog.Settings.fogHeight2 = WorldManager.Instance.FogHeightMax;
            }  

            // Set temparaute from WAPI
            if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.TempAndHumidityChanged) && temperature == GetSet.GetFromWAPI && EnviroManager.instance.Environment != null)
            {
                EnviroManager.instance.Environment.Settings.temperature = WorldManager.Instance.Temperature;
            }


            if (EnviroManager.instance.Weather == null)
            {
                // Cloud
                if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.CloudsChanged) && cloudCover == GetSet.GetFromWAPI)
                {
                    if(EnviroManager.instance.VolumetricClouds != null)
                    {
                        EnviroManager.instance.VolumetricClouds.settingsLayer1.coverage = EnviroHelper.Remap(WorldManager.Instance.CloudPower,0f,1f,-1f,1f);
                    }

                    if(EnviroManager.instance.FlatClouds != null)
                    {
                        EnviroManager.instance.FlatClouds.settings.flatCloudsCoverage = WorldManager.Instance.CloudPower;
                    }
                } 

                //Rain
                if (changeArgs.HasChanged (WorldConstants.WorldChangeEvents.RainChanged) && wetnessPower == GetSet.GetFromWAPI) 
                {
                    if(EnviroManager.instance.VolumetricClouds != null)
                    {
                        EnviroManager.instance.VolumetricClouds.settingsLayer1.scatteringIntensity = 1.25f - WorldManager.Instance.RainPower;
                    }

                    if(EnviroManager.instance.Effects != null)
                    {
                        for(int i = 0; i < EnviroManager.instance.Effects.Settings.effectTypes.Count; i++)
                        {
                            if(EnviroManager.instance.Effects.Settings.effectTypes[i].name.Contains("Rain"))
                                EnviroManager.instance.Effects.Settings.effectTypes[i].emissionRate = WorldManager.Instance.RainPower;
                        }
                    }

                    if(EnviroManager.instance.Audio != null)
                    {
                        
                    }
                } 

                //Snow
                if (changeArgs.HasChanged (WorldConstants.WorldChangeEvents.SnowChanged) && snowPower == GetSet.GetFromWAPI) 
                {
                    if(EnviroManager.instance.Effects != null)
                    {  
                        for(int i = 0; i < EnviroManager.instance.Effects.Settings.effectTypes.Count; i++)
                        {
                            if(EnviroManager.instance.Effects.Settings.effectTypes[i].name.Contains("Snow"))
                                EnviroManager.instance.Effects.Settings.effectTypes[i].emissionRate = WorldManager.Instance.SnowPower;
                        }
                    }
    
                    if(EnviroManager.instance.Audio != null)
                    {
                        
                    }
                }
            }
            else
            {
                if (changeArgs.HasChanged(WorldConstants.WorldChangeEvents.CloudsChanged) && cloudCover == GetSet.GetFromWAPI){
                    ChangeWeatherOnCloudCoverChanged ();
                }

                //Rain
                if (changeArgs.HasChanged (WorldConstants.WorldChangeEvents.RainChanged) && wetnessPower == GetSet.GetFromWAPI) {
                    ChangeWeatherOnRainChanged (WorldManager.Instance.RainPower,WorldManager.Instance.SnowPower);
                }

                //Snow
                if (changeArgs.HasChanged (WorldConstants.WorldChangeEvents.SnowChanged) && snowPower == GetSet.GetFromWAPI) {
                    ChangeWeatherOnSnowChanged (WorldManager.Instance.RainPower,WorldManager.Instance.SnowPower);
                }
            }

            void ChangeWeatherOnCloudCoverChanged()
            {
                if (WorldManager.Instance.RainPower > 0.01f)
                    return;

                if (WorldManager.Instance.SnowPower > 0.01f)
                    return;

                float cloudCover = WorldManager.Instance.CloudPower;

                if (cloudCover <= 0.1f)
                {
                    if (clearWeatherPresets.Count > 0 && EnviroManager.instance.Weather.targetWeatherType.name != clearWeatherPresets[0].name)
                        EnviroManager.instance.Weather.ChangeWeather(clearWeatherPresets[0].name);

                }
                else if (cloudCover > 0.1f && cloudCover <= 0.3f)
                {
                    if (cloudyWeatherPresets.Count > 0 && EnviroManager.instance.Weather.targetWeatherType.name != cloudyWeatherPresets[0].name)
                        EnviroManager.instance.Weather.ChangeWeather(cloudyWeatherPresets[0].name);

                }
                else if (cloudCover > 0.3f && cloudCover <= 0.7f)
                {
                    if (cloudyWeatherPresets.Count > 1 && EnviroManager.instance.Weather.targetWeatherType.name != cloudyWeatherPresets[1].name)
                        EnviroManager.instance.Weather.ChangeWeather(cloudyWeatherPresets[1].name);

                }
                else if (cloudCover > 0.7f)
                {
                    if (cloudyWeatherPresets.Count > 2 && EnviroManager.instance.Weather.targetWeatherType.name != cloudyWeatherPresets[2].name)
                        EnviroManager.instance.Weather.ChangeWeather(cloudyWeatherPresets[2].name);

                }
            }

            void ChangeWeatherOnRainChanged(float r, float s)
            {
                if (r < s || r == 0f)
                {
                    if (s > 0)
                        ChangeWeatherOnSnowChanged(r, s);
                    else
                        ChangeWeatherOnCloudCoverChanged();
                    return;
                }

                float rainPower = r;

                if (rainPower < 0.1f)
                {
                    ChangeWeatherOnCloudCoverChanged();
                }
                else if (rainPower > 0.1f && rainPower <= 0.4f)
                {
                    if (rainWeatherPresets.Count > 0 && EnviroManager.instance.Weather.targetWeatherType.name != rainWeatherPresets[0].name)
                        EnviroManager.instance.Weather.ChangeWeather(rainWeatherPresets[0].name);

                }
                else if (rainPower > 0.4f && rainPower < 0.7f)
                {
                    if (rainWeatherPresets.Count > 1 && EnviroManager.instance.Weather.targetWeatherType.name != rainWeatherPresets[1].name)
                        EnviroManager.instance.Weather.ChangeWeather(rainWeatherPresets[1].name);

                }
                else if (rainPower > 0.7f)
                {
                    if (rainWeatherPresets.Count > 2 && EnviroManager.instance.Weather.targetWeatherType.name != rainWeatherPresets[2].name)
                        EnviroManager.instance.Weather.ChangeWeather(rainWeatherPresets[2].name);
                }
            } 

            void ChangeWeatherOnSnowChanged(float r, float s)
            {
                if (s < r || s == 0f)
                {
                    if (r > 0)
                        ChangeWeatherOnRainChanged(r, s);
                    else
                        ChangeWeatherOnCloudCoverChanged();

                    return;
                }

                float snowPower = s;

                if (snowPower <= 0.1f)
                {
                    ChangeWeatherOnCloudCoverChanged();
                }
                else if (snowPower > 0.1f && snowPower <= 0.5f)
                {
                    if (snowWeatherPresets.Count > 0 && EnviroManager.instance.Weather.targetWeatherType.name != snowWeatherPresets[0].name)
                        EnviroManager.instance.Weather.ChangeWeather(snowWeatherPresets[0].name);

                }
                else if (snowPower > 0.5f)
                {
                    if (snowWeatherPresets.Count > 1 && EnviroManager.instance.Weather.targetWeatherType.name != snowWeatherPresets[1].name)
                        EnviroManager.instance.Weather.ChangeWeather(snowWeatherPresets[1].name);

                }
            }
        }
    }
}
#endif

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroWorldAPI.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroZone.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;


namespace Enviro
{

    [Serializable]
    public class EnviroZoneWeather
    {
        public bool showEditor;
        public EnviroWeatherType weatherType;
        public float probability = 50f;
        public bool seasonalProbability = false;
        public float probabilitySpring = 50f;
        public float probabilitySummer = 50f;
        public float probabilityAutumn = 50f;
        public float probabilityWinter = 50f;

    }
    [AddComponentMenu("Enviro 3/Weather Zone")]
    [ExecuteInEditMode]
    public class EnviroZone : MonoBehaviour
    {

        public EnviroWeatherType currentWeatherType;
        public EnviroWeatherType nextWeatherType;

        public bool autoWeatherChanges = true;
        public float weatherChangeIntervall = 2f;
        public double nextWeatherUpdate;

        public List<EnviroZoneWeather> weatherTypeList = new List<EnviroZoneWeather>();
        public Vector3 zoneScale = Vector3.one;
        public Color zoneGizmoColor;
        private BoxCollider zoneCollider;

 
        void OnEnable()
        {
            if(zoneCollider == null)
            {
                zoneCollider = gameObject.GetComponent<BoxCollider>();

                if(zoneCollider == null)
                zoneCollider = gameObject.AddComponent<BoxCollider>();
            }
            zoneCollider.isTrigger = true;

            if(EnviroManager.instance != null && EnviroManager.instance.Weather != null)
            {   
                bool addedToMgr = false;

                for(int i = 0; i < EnviroManager.instance.zones.Count; i++)
                {
                    if(EnviroManager.instance.zones[i] == this)
                    {
                        addedToMgr = true;
                        break;
                    }
                } 

                if(!addedToMgr)
                   EnviroManager.instance.Weather.RegisterZone(this);  
            }
               
        }

        void OnDisable()
        {
            if(EnviroManager.instance != null && EnviroManager.instance.Weather != null)
            {
                for(int i = 0; i < EnviroManager.instance.zones.Count; i++)
                {
                    if(EnviroManager.instance.zones[i] == this)
                       EnviroManager.instance.Weather.RemoveZone(this);
                }
            } 
        }

        public void UpdateZoneScale ()
        {
            zoneCollider.size = zoneScale;
        }

        // Adds a new weather type to the zone.
        public void AddWeatherType(EnviroWeatherType wType)
        {
            EnviroZoneWeather weatherTypeEntry = new EnviroZoneWeather();
            weatherTypeEntry.weatherType = wType;
            weatherTypeList.Add(weatherTypeEntry);
        }

        // Removes a weather type from the zone.
        public void RemoveWeatherZoneType(EnviroZoneWeather wType)
        {
            weatherTypeList.Remove(wType);
        }

        // Changes the weather of the zone instantly.
        public void ChangeZoneWeatherInstant (EnviroWeatherType type)
        {
            if(EnviroManager.instance != null && currentWeatherType != type)
            {
                EnviroManager.instance.NotifyZoneWeatherChanged(type,this);

                if(EnviroManager.instance.currentZone == this && EnviroManager.instance.Weather != null)
                   EnviroManager.instance.Weather.targetWeatherType = type;
            }
            
            currentWeatherType = type;
        }

        // Changes the weather of the zone to the type for next weather update.
        public void ChangeZoneWeather (EnviroWeatherType type)
        {
            nextWeatherType = type;
        }
 
        private void ChooseNextWeatherRandom ()
        {
            float rand = UnityEngine.Random.Range(0f,100f * weatherTypeList.Count);
            bool nextWeatherFound = false;

            for (int i = 0; i < weatherTypeList.Count; i++)
            {
                if(weatherTypeList[i].seasonalProbability == true && EnviroManager.instance != null && EnviroManager.instance.Environment != null)
                {
                    switch (EnviroManager.instance.Environment.Settings.season)
                    {
                        case Enviro.EnviroEnvironment.Seasons.Spring:
                            if(rand <= weatherTypeList[i].probabilitySpring * weatherTypeList.Count)
                            {
                                ChangeZoneWeather(weatherTypeList[i].weatherType);
                                nextWeatherFound = true;
                                return;
                            }
                        break;

                        case Enviro.EnviroEnvironment.Seasons.Summer:
                            if(rand <= weatherTypeList[i].probabilitySummer * weatherTypeList.Count)
                            {
                                ChangeZoneWeather(weatherTypeList[i].weatherType);
                                nextWeatherFound = true;
                                return;
                            } 
                        break;

                        case Enviro.EnviroEnvironment.Seasons.Autumn:
                            if(rand <= weatherTypeList[i].probabilityAutumn * weatherTypeList.Count)
                            {
                                ChangeZoneWeather(weatherTypeList[i].weatherType);
                                nextWeatherFound = true;
                                return;
                            }
                        break;

                        case Enviro.EnviroEnvironment.Seasons.Winter:
                            if(rand <= weatherTypeList[i].probabilityWinter * weatherTypeList.Count)
                            {
                                ChangeZoneWeather(weatherTypeList[i].weatherType);
                                nextWeatherFound = true;
                                return;
                            }
                        break;

                    }
                }
                else 
                {
                    if(rand <= weatherTypeList[i].probability * weatherTypeList.Count)
                    {
                        ChangeZoneWeather(weatherTypeList[i].weatherType);
                        nextWeatherFound = true;
                        return;
                    }
                } 

                rand -= 100f;       
            }

            if(!nextWeatherFound)
               ChangeZoneWeather(currentWeatherType);
        }


        private void UpdateZoneWeather()
        {
            if(EnviroManager.instance.Time != null)
            {
               double currentDate = EnviroManager.instance.Time.GetDateInHours();

               if(currentDate >= nextWeatherUpdate)
               {

                if(nextWeatherType != null)
                  ChangeZoneWeatherInstant(nextWeatherType);
                 else
                  ChangeZoneWeatherInstant(currentWeatherType);
                 
                 //Get next weather
                 ChooseNextWeatherRandom ();
                 nextWeatherUpdate = currentDate + weatherChangeIntervall;
               }
            }
        }

        void Update()
        {
            UpdateZoneScale ();

            if(!Application.isPlaying)
               return;

            if (EnviroManager.instance == null || EnviroManager.instance.Weather == null)
                return;

            if(autoWeatherChanges && EnviroManager.instance.Weather.globalAutoWeatherChange)
                UpdateZoneWeather();

            //Forces the weather change in Enviro when this zone is currently the active one.
            if(EnviroManager.instance.currentZone == this && EnviroManager.instance.Weather.targetWeatherType != currentWeatherType)
               EnviroManager.instance.Weather.targetWeatherType = currentWeatherType;
        }
 
        void OnTriggerEnter (Collider col)
        {
            if (EnviroManager.instance == null || EnviroManager.instance.Weather == null)
                return;

            //Change Weather to Zone Weather:
            if(col.gameObject.GetComponent<EnviroManager>())
               EnviroManager.instance.currentZone = this;
        }

        void OnTriggerExit (Collider col)
        {
             if (EnviroManager.instance == null || EnviroManager.instance.Weather == null)
                 return;
        
             if(col.gameObject.GetComponent<EnviroManager>())
             {
                if(EnviroManager.instance.currentZone == this)
                {
                    if(EnviroManager.instance.defaultZone != null)
                       EnviroManager.instance.currentZone = EnviroManager.instance.defaultZone;
                    else
                       EnviroManager.instance.currentZone = null;
                }
                  
             }
        } 

        void OnDrawGizmos () 
        {
            Gizmos.color = zoneGizmoColor;
            
            Matrix4x4 rotationMatrix = Matrix4x4.TRS(transform.position, transform.rotation, Vector3.one);
            Gizmos.matrix = rotationMatrix;

            Gizmos.DrawCube(Vector3.zero, new Vector3(zoneScale.x, zoneScale.y, zoneScale.z));
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroZone.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroZoneInspector.cs---------------


ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Enviro
{
    [CustomEditor(typeof(EnviroZone))]
    public class EnviroZoneInspector : EnviroBaseInspector
    {
        private EnviroZone myTarget;

        private SerializedProperty autoWeatherChanges, weatherChangeIntervall, zoneScale, zoneGizmoColor;

        void OnEnable ()
        {
            myTarget = (EnviroZone)target;
            serializedObj = new SerializedObject(myTarget);
            autoWeatherChanges = serializedObj.FindProperty("autoWeatherChanges"); 
            weatherChangeIntervall = serializedObj.FindProperty("weatherChangeIntervall"); 
            zoneScale = serializedObj.FindProperty("zoneScale"); 
            zoneGizmoColor = serializedObj.FindProperty("zoneGizmoColor"); 
        }

        public override void OnInspectorGUI()
        {
            SetupGUIStyles();

            GUILayout.BeginVertical("", boxStyle);
            GUILayout.Label("Enviro Weather Zone",headerStyleMid); 

            //Help Box Button
            //RenderHelpBoxButton();
            // if(showHelpBox)
            // RenderHelpBox("This is a help text test!");

            GUILayout.EndVertical();
            serializedObj.UpdateIfRequiredOrScript ();
            EditorGUI.BeginChangeCheck();


            GUILayout.BeginVertical("", boxStyle);
            GUILayout.Label("Zone Setup",headerStyleMid); 
            GUILayout.BeginVertical("",boxStyleModified);
            EditorGUILayout.PropertyField(zoneScale);
            EditorGUILayout.PropertyField(zoneGizmoColor);
            GUILayout.EndVertical ();
            GUILayout.EndVertical ();
  

            GUILayout.BeginVertical("", boxStyle);
            GUILayout.Label("Weather Setup",headerStyleMid); 
            GUILayout.Space(5f);
            if(myTarget.currentWeatherType != null)        
            GUILayout.Label("Current Weather: " + myTarget.currentWeatherType.name,wrapStyle); 
            else
            GUILayout.Label("Current Weather: Not Set",wrapStyle); 
            GUILayout.Space(5f);
            if(myTarget.nextWeatherType != null)   
            {
            if(EnviroManager.instance != null && EnviroManager.instance.Time != null)
            {
                if(EnviroManager.instance.Weather != null && EnviroManager.instance.Weather.globalAutoWeatherChange && myTarget.autoWeatherChanges)
                GUILayout.Label("Next Change in: " + (myTarget.nextWeatherUpdate - EnviroManager.instance.Time.GetDateInHours()).ToString("#.00") + " hours",wrapStyle); 
                else
                GUILayout.Label("Next Change in: Stopped",wrapStyle); 
            }
            }
            else
            {
                GUILayout.Label("Next Change in: Not Set");
            }
            GUILayout.Space(5f); 
            if(myTarget.nextWeatherType != null)   
            GUILayout.Label("Next Weather: " + myTarget.nextWeatherType.name,wrapStyle);
            else
            GUILayout.Label("Next Weather: Not Set",wrapStyle);
            
            GUILayout.Space(5f);
            GUILayout.BeginVertical("", boxStyleModified);
            EditorGUILayout.PropertyField(autoWeatherChanges);
            EditorGUILayout.PropertyField(weatherChangeIntervall);
            GUILayout.EndVertical();
            GUILayout.Space(5f);      
            GUILayout.BeginVertical("",boxStyleModified);
            Object selectedObject = null;
                        
            if(GUILayout.Button("Add"))
            {
                int controlID = EditorGUIUtility.GetControlID (FocusType.Passive);
                EditorGUIUtility.ShowObjectPicker<EnviroWeatherType>(null,false,"",controlID);
            }

            string commandName = Event.current.commandName;

            if (commandName == "ObjectSelectorClosed") 
            {
                selectedObject = EditorGUIUtility.GetObjectPickerObject ();
                
                bool add = true;
                
                for (int i = 0; i < myTarget.weatherTypeList.Count; i++)
                {
                    if((EnviroWeatherType)selectedObject == myTarget.weatherTypeList[i].weatherType)
                    add = false;
                }

                if(selectedObject == null)
                    add = false;

                if(add)
                    myTarget.AddWeatherType((EnviroWeatherType)selectedObject);
            }

            GUILayout.Space(15);

            for (int i = 0; i < myTarget.weatherTypeList.Count; i++) 
                {      
                    EnviroZoneWeather curZoneWeather = myTarget.weatherTypeList[i];
                    GUILayout.BeginVertical ("", boxStyleModified);

                    EditorGUILayout.BeginHorizontal();

                    string name = "Empty";        
                    if(curZoneWeather.weatherType != null)
                        name = curZoneWeather.weatherType.name;

                    curZoneWeather.showEditor = GUILayout.Toggle(curZoneWeather.showEditor, name, headerFoldout);
                    GUILayout.FlexibleSpace();

                    if(curZoneWeather.weatherType != myTarget.currentWeatherType)
                    {
                        if(GUILayout.Button("Change Now", EditorStyles.miniButtonRight,GUILayout.Width(80), GUILayout.Height(18)))
                        {
                            myTarget.ChangeZoneWeatherInstant(curZoneWeather.weatherType);
                            //EditorUtility.SetDirty(curWT);
                        } 
                    }

                    if(GUILayout.Button("x", EditorStyles.miniButtonRight,GUILayout.Width(18), GUILayout.Height(18)))
                    {
                        myTarget.RemoveWeatherZoneType(curZoneWeather);
                    } 
                    
                    EditorGUILayout.EndHorizontal();

                    if(curZoneWeather.showEditor)
                    {
                        GUILayout.BeginVertical ("", boxStyleModified);

                        if((EnviroManager.instance != null && EnviroManager.instance.Environment != null) || EnviroManager.instance == null)
                            curZoneWeather.seasonalProbability = EditorGUILayout.Toggle("Seasonal Probabillity",curZoneWeather.seasonalProbability);
                           
                        EditorGUILayout.Space(5f);

                        if(curZoneWeather.seasonalProbability == false || (EnviroManager.instance != null && EnviroManager.instance.Environment == null))
                        {
                          curZoneWeather.probability = EditorGUILayout.Slider("Probabillity",curZoneWeather.probability,0f,100f);
                        } 
                        else if((EnviroManager.instance != null && EnviroManager.instance.Environment != null) || EnviroManager.instance == null)
                        {
                            curZoneWeather.probabilitySpring = EditorGUILayout.Slider("Spring Probabillity",curZoneWeather.probabilitySpring,0f,100f);
                            curZoneWeather.probabilitySummer = EditorGUILayout.Slider("Summer Probabillity",curZoneWeather.probabilitySummer,0f,100f);
                            curZoneWeather.probabilityAutumn = EditorGUILayout.Slider("Autumn Probabillity",curZoneWeather.probabilityAutumn,0f,100f);
                            curZoneWeather.probabilityWinter = EditorGUILayout.Slider("Winter Probabillity",curZoneWeather.probabilityWinter,0f,100f);
                        }

                        EditorGUILayout.EndVertical ();
                    }

                    GUILayout.EndVertical ();

                }

            GUILayout.EndVertical ();
            GUILayout.EndVertical ();

            ApplyChanges();
        }
    }
}


#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\EnviroZoneInspector.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\Lightning.cs---------------


using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;

namespace Enviro
{
  public class Lightning : MonoBehaviour 
  {
    public Vector3 target;
    private LineRenderer lineRend;
    public Light myLight;
    public Material planeMat;
    public int arcs = 20;
    public float arcLength = 100.0f;
    public float arcVariation = 1.0f;
    public float inaccuracy = 0.5f;
    public int splits = 4;

    public Vector3 toTarget;
    private bool fadeOut;
    private float fadeTimer;

/*
    private ComputeBuffer cloudsLighning;

    struct LightningParams
    {
        public Vector3 pos;
        public float range;
        public float intensity;
    }

    LightningParams[] lightningParams;
*/
    void OnEnable () 
    {
        lineRend = gameObject.GetComponent<LineRenderer> ();
        CastBolt();
    }

    IEnumerator CreateLightningBolt()
    {

     /* if(Enviro.EnviroManager.instance.cloudModule != null)
      {
        lightningParams = new LightningParams[1];
        lightningParams[0].pos = transform.position;
        lightningParams[0].range = 10f; 
        lightningParams[0].intensity = 0.1f;
        Enviro.EnviroManager.instance.cloudModule.blendAndLightingMat.SetFloat("_LightningCount", 1);
        Enviro.EnviroHelper.CreateBuffer(ref cloudsLighning, 1, Marshal.SizeOf(typeof(LightningParams)));
        cloudsLighning.SetData(lightningParams);
        Enviro.EnviroManager.instance.cloudModule.blendAndLightingMat.SetBuffer("_Lightnings",cloudsLighning);
      }*/

      myLight.enabled = false;
      lineRend.widthMultiplier = 10;
      planeMat.SetFloat("_Intensity", 1f);

      lineRend.SetPosition(0, transform.position);
      lineRend.positionCount = 2;
      lineRend.SetPosition(1, transform.position);
      Vector3 lastPoint = transform.position;
      float dist = Vector3.Distance(transform.position, target);

      float arcDist = dist / arcs;

      for (int i = 1; i < arcs; i++)
      {
        planeMat.SetFloat("_Intensity", Random.Range(0f,2f));
        lineRend.positionCount =  i + 1;
        Vector3 fwd = target - lastPoint;
        fwd.Normalize ();
        Vector3 pos = Randomize (fwd, inaccuracy);
        pos *= Random.Range (arcLength * arcVariation, arcLength) * (arcDist);
        pos += lastPoint;
        lineRend.SetPosition (i, pos);
       
        if(i < arcs - 2)
        {
          for (int s = 0; s <= splits; s++)
          {
              StartCoroutine(CreateSplit(pos, target));
          }
        }

        lastPoint = pos;
        yield return new WaitForSeconds(Random.Range(0.001f,0.005f));
      }
      lineRend.SetPosition(arcs-1,target);

      //Animate Light and Main bolt
      myLight.transform.position = target;
      lineRend.material.SetFloat("_Intensity", 50f);
      planeMat.SetFloat("_Intensity", 20f);
      myLight.enabled = true;
      yield return new WaitForSeconds(Random.Range(0.025f,0.035f));
      lineRend.material.SetFloat("_Intensity", 1f);
      planeMat.SetFloat("_Intensity", 1f);
      myLight.enabled = false;
      yield return new WaitForSeconds(Random.Range(0.025f,0.035f));
      lineRend.material.SetFloat("_Intensity", 50f);
      planeMat.SetFloat("_Intensity", 20f);
      myLight.enabled = true;
      yield return new WaitForSeconds(Random.Range(0.025f,0.035f));
      lineRend.material.SetFloat("_Intensity", 1f);
      planeMat.SetFloat("_Intensity", 1f);
      myLight.enabled = false;
      yield return new WaitForSeconds(Random.Range(0.025f,0.035f));
      lineRend.material.SetFloat("_Intensity", 50f);
      planeMat.SetFloat("_Intensity", 0f);
      myLight.enabled = true;
      yield return new WaitForSeconds(Random.Range(0.025f,0.035f));
      myLight.enabled = false;
      fadeTimer = 50f;
      fadeOut = true;
      //lineRend.positionCount = 1;
     // Enviro.EnviroManager.instance.cloudModule.blendAndLightingMat.SetFloat("_LightningCount", 0);
    //  Enviro.EnviroManager.instance.cloudModule.blendAndLightingMat.SetBuffer("_Lightnings",cloudsLighning);
     // Enviro.EnviroHelper.ReleaseComputeBuffer(ref cloudsLighning);
    }

    IEnumerator CreateSplit(Vector3 pos, Vector3 targetP)
    {
      GameObject split = new GameObject();
      split.transform.SetParent(transform);
      split.transform.position = pos;
      LineRenderer splitRenderer = split.AddComponent<LineRenderer>();
      splitRenderer.material = lineRend.material;
      splitRenderer.positionCount = 2;
      splitRenderer.SetPosition(0, split.transform.position);
      splitRenderer.SetPosition(1, split.transform.position);     
 
      //Set a random target 
      toTarget = targetP - pos; 
      toTarget = Vector3.Normalize(toTarget);
      Vector3 posDown = new Vector3(toTarget.x,toTarget.y, toTarget.z * 0.1f);     
      Vector3 targetPos = (Random.insideUnitSphere * 500 + pos + toTarget * 500);
      
      Vector3 lastPoint = split.transform.position;
      float dist = Vector3.Distance(split.transform.position, targetPos);

      float arcDist = dist / 7;

      for (int i = 1; i < 8; i++)
      {
        splitRenderer.positionCount =  i + 1;
        Vector3 fwd = targetPos - lastPoint;
        fwd.Normalize ();
        Vector3 newPos = Randomize (fwd, inaccuracy);
        newPos *= Random.Range (1f * 1.5f, 1f) * (arcDist);
        newPos += lastPoint;
        splitRenderer.SetPosition (i, newPos);
        lastPoint = newPos;
        yield return new WaitForSeconds(Random.Range(0.004f,0.006f));
      }
      splitRenderer.SetPosition(7,targetPos);
      yield return new WaitForSeconds(Random.Range(0.2f,0.5f));
      DestroyImmediate(split);
    }
 
    public void CastBolt()
    {
        lineRend.positionCount = 1;
        StartCoroutine(CreateLightningBolt());
    }
    private Vector3 Randomize (Vector3 newVector, float devation) {
        newVector += new Vector3(Random.Range(-1.0f, 1.0f), Random.Range(-1.0f, 1.0f), Random.Range(-1.0f, 1.0f)) * devation;
        newVector.Normalize();
        return newVector;
    }

    private void Update() 
    {
      if(fadeOut == true)
      {
        fadeTimer = Mathf.Lerp(fadeTimer,0f,10f * Time.deltaTime);
        lineRend.material.SetFloat("_Intensity", fadeTimer);

        if(fadeTimer <= 1f)
          {
            lineRend.positionCount = 1;
            fadeOut = false;
            DestroyImmediate(gameObject);
          }
      }
    }
 } 
}

#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\Lightning.cs---------------


#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AdvancedAstralPathwayGenerator.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AdvancedAstralPathwayGenerator : MonoBehaviour
{
    public float alignmentThreshold = 0.2f;
    public Material pathwayMaterial;

    private List<LineRenderer> pathways = new List<LineRenderer>();

    public void GeneratePathways() // Changed to public
    {
        ClearPathways();

        foreach (var entityA in FindObjectsOfType<CelestialEntity>())
        {
            foreach (var entityB in FindObjectsOfType<CelestialEntity>())
            {
                if (entityA != entityB && AreAligned(entityA, entityB))
                {
                    DrawPathway(entityA, entityB);
                }
            }
        }
    }

    private bool AreAligned(CelestialEntity entityA, CelestialEntity entityB)
    {
        return Mathf.Abs(entityA.resonance - entityB.resonance) < alignmentThreshold;
    }

    private void DrawPathway(CelestialEntity entityA, CelestialEntity entityB)
    {
        var pathway = new GameObject("AstralPathway").AddComponent<LineRenderer>();
        pathway.material = pathwayMaterial;
        pathway.startWidth = 0.1f;
        pathway.endWidth = 0.1f;
        pathway.SetPosition(0, entityA.transform.position);
        pathway.SetPosition(1, entityB.transform.position);
        pathways.Add(pathway);
    }

    private void ClearPathways()
    {
        foreach (var pathway in pathways)
        {
            Destroy(pathway.gameObject);
        }
        pathways.Clear();
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AdvancedAstralPathwayGenerator.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AdvancedGameController.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AdvancedGameController : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public AdvancedAstralPathwayGenerator pathwayGenerator;
    public EnergyChannelManager energyChannelManager;
    public EventDrivenTransformationManager transformationManager;
    public AuraVisualizer auraVisualizer;

    private void Start()
    {
        InitializeAuras();
    }

    private void Update()
    {
        pathwayGenerator.GeneratePathways();
        energyChannelManager.ChannelEnergy(entities);

        foreach (var celestialEvent in FindObjectsOfType<CelestialEvent>())
        {
            transformationManager.TriggerTransformations(celestialEvent, entities);
        }

        UpdateAuras();
    }

    private void InitializeAuras()
    {
        foreach (var entity in entities)
        {
            // Only instantiate the aura if not already attached
            if (entity.GetComponent<AuraVisualizer>() == null)
            {
                Instantiate(auraVisualizer, entity.transform);
            }
        }
    }

    private void UpdateAuras()
    {
        // Clean up the entities list to remove null entries
        entities.RemoveAll(entity => entity == null);

        foreach (var entity in entities)
        {
            var auraVisualizer = entity.GetComponent<AuraVisualizer>();
            if (auraVisualizer != null)
            {
                auraVisualizer.UpdateAura();
            }
            else
            {
                Debug.LogWarning($"{entity.entityName} is missing an AuraVisualizer component.");
            }
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AdvancedGameController.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AffirmationManager.cs---------------
.
.
using UnityEngine;
using System.Collections.Generic;

public class AffirmationManager : MonoBehaviour
{
    public Dictionary<CelestialEntity, float> affirmations = new Dictionary<CelestialEntity, float>();

    public void AddAffirmation(CelestialEntity entity, string affirmationText, float powerBoost)
    {
        // Calculate affirmation's influence on entity's power
        float affirmationPower = CalculateAffirmationPower(entity, powerBoost);
        if (affirmations.ContainsKey(entity))
            affirmations[entity] += affirmationPower;
        else
            affirmations.Add(entity, affirmationPower);

        Debug.Log($"{entity.entityName} affirmed with power boost: {affirmationPower}");
    }

    private float CalculateAffirmationPower(CelestialEntity entity, float powerBoost)
    {
        // Simple calculation based on entity power and cosmic alignment
        return entity.powerLevel * powerBoost * 0.05f; // Customize factor as necessary
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AffirmationManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralAffinityManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AstralAffinityManager : MonoBehaviour
{
    public float affinityThreshold = 0.2f; // Base threshold for determining high affinity

    // Calculate affinity between two entities
    public float CalculateAffinity(CelestialEntity entityA, CelestialEntity entityB)
    {
        // Affinity calculation based on resonance and frequency similarities
        float resonanceDifference = Mathf.Abs(entityA.resonance - entityB.resonance);
        float frequencyDifference = Mathf.Abs(entityA.frequency - entityB.frequency);

        // Normalize affinity based on threshold and assign a score
        float affinityScore = 1.0f - (resonanceDifference + frequencyDifference) / 2;
        return Mathf.Clamp(affinityScore, 0, 1);
    }

    // Determine interaction effect based on affinity level
    public void ApplyAffinityEffect(CelestialEntity entityA, CelestialEntity entityB)
    {
        float affinityScore = CalculateAffinity(entityA, entityB);

        if (affinityScore > affinityThreshold)
        {
            // Positive affinity effect (boost)
            entityA.powerLevel += affinityScore * 0.1f;
            entityB.powerLevel += affinityScore * 0.1f;
            Debug.Log($"{entityA.entityName} and {entityB.entityName} have positive affinity. Boost applied.");
        }
        else
        {
            // Negative affinity effect (reduction or interference)
            entityA.powerLevel -= affinityScore * 0.05f;
            entityB.powerLevel -= affinityScore * 0.05f;
            Debug.Log($"{entityA.entityName} and {entityB.entityName} have negative affinity. Interference applied.");
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralAffinityManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralCommunicationNetwork.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AstralCommunicationNetwork : MonoBehaviour
{
    public float alignmentThreshold = 0.1f;
    public Dictionary<CelestialEntity, List<CelestialEntity>> communicationNetwork = new Dictionary<CelestialEntity, List<CelestialEntity>>();

    public void EstablishNetwork(List<CelestialEntity> entities)
    {
        foreach (var entityA in entities)
        {
            foreach (var entityB in entities)
            {
                if (entityA != entityB && AreAligned(entityA, entityB))
                {
                    if (!communicationNetwork.ContainsKey(entityA))
                        communicationNetwork[entityA] = new List<CelestialEntity>();

                    communicationNetwork[entityA].Add(entityB);
                    Debug.Log($"{entityA.entityName} and {entityB.entityName} are in astral communication.");
                }
            }
        }
    }

    private bool AreAligned(CelestialEntity entityA, CelestialEntity entityB)
    {
        float frequencyDifference = Mathf.Abs(entityA.frequency - entityB.frequency);
        return frequencyDifference <= alignmentThreshold;
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralCommunicationNetwork.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralPathwayGenerator.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AstralPathwayGenerator : MonoBehaviour
{
    public float alignmentThreshold = 0.2f;
    public Material pathwayMaterial;

    private List<LineRenderer> pathways = new List<LineRenderer>();

    public void GeneratePathways() // Set to public
    {
        ClearPathways();

        foreach (var entityA in FindObjectsOfType<CelestialEntity>())
        {
            foreach (var entityB in FindObjectsOfType<CelestialEntity>())
            {
                if (entityA != entityB && AreAligned(entityA, entityB))
                {
                    DrawPathway(entityA, entityB);
                }
            }
        }
    }

    private bool AreAligned(CelestialEntity entityA, CelestialEntity entityB)
    {
        return Mathf.Abs(entityA.resonance - entityB.resonance) < alignmentThreshold;
    }

    private void DrawPathway(CelestialEntity entityA, CelestialEntity entityB)
    {
        var pathway = new GameObject("AstralPathway").AddComponent<LineRenderer>();
        pathway.material = pathwayMaterial;
        pathway.startWidth = 0.1f;
        pathway.endWidth = 0.1f;
        pathway.SetPosition(0, entityA.transform.position);
        pathway.SetPosition(1, entityB.transform.position);
        pathways.Add(pathway);
    }

    private void ClearPathways()
    {
        foreach (var pathway in pathways)
        {
            Destroy(pathway.gameObject);
        }
        pathways.Clear();
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralPathwayGenerator.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralSynchronizationManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class AstralSynchronizationManager : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public float syncThreshold = 0.1f; // Similarity threshold for synchronization

    public void SynchronizeEntities(CelestialEvent celestialEvent)
    {
        foreach (var entityA in entities)
        {
            foreach (var entityB in entities)
            {
                if (entityA != entityB && IsAligned(entityA, entityB))
                {
                    ApplySynchronizationEffect(entityA, entityB, celestialEvent);
                }
            }
        }
    }

    private bool IsAligned(CelestialEntity entityA, CelestialEntity entityB)
    {
        return Mathf.Abs(entityA.resonance - entityB.resonance) <= syncThreshold;
    }

    private void ApplySynchronizationEffect(CelestialEntity entityA, CelestialEntity entityB, CelestialEvent celestialEvent)
    {
        float syncBoost = celestialEvent.impactFactor;
        entityA.powerLevel += syncBoost;
        entityB.powerLevel += syncBoost;
        Debug.Log($"{entityA.entityName} and {entityB.entityName} synchronized due to {celestialEvent.eventName} with a boost of {syncBoost}.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AstralSynchronizationManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AuraVisualizer.cs---------------
.
.
using UnityEngine;
using System;

[RequireComponent(typeof(ParticleSystem))]
public class AuraVisualizer : MonoBehaviour
{
    public CelestialEntity entity;
    private ParticleSystem auraParticles;
    private ParticleSystem.MainModule mainModule;
    private object enviroMgr;

    private void Start()
    {
        // Use the fully qualified name if the namespace and assembly are known
        Type enviroMgrType = Type.GetType("FullNamespace.EnviroSkyMgr, AssemblyName"); // Replace with actual names

        if (enviroMgrType != null)
        {
            enviroMgr = FindObjectOfType(enviroMgrType);
        }

        if (enviroMgr == null)
        {
            Debug.LogWarning("EnviroSkyMgr not found in the scene. Ensure itâs correctly referenced.");
        }
        else
        {
            // Use enviroMgr with reflection as needed, e.g., access properties/methods
            var someMethod = enviroMgrType.GetMethod("MethodName"); // Replace MethodName
            someMethod?.Invoke(enviroMgr, null);
        }
    }

    public void UpdateAura()
    {
        mainModule.startSize = Mathf.Sqrt(entity.influenceRadius);
        mainModule.startColor = entity.powerLevel > 50 ? Color.cyan : Color.yellow;

        if (enviroMgr != null)
        {
            var weatherProperty = enviroMgr.GetType().GetProperty("Weather");
            var weatherInstance = weatherProperty?.GetValue(enviroMgr, null);
            var currentWeatherNameProperty = weatherInstance?.GetType().GetProperty("currentWeatherName");

            string currentWeather = currentWeatherNameProperty?.GetValue(weatherInstance, null) as string;
            if (currentWeather == "Solar Flare")
            {
                mainModule.startColor = Color.red;
            }
        }

        auraParticles.Play();
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\AuraVisualizer.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialAnomalyDetector.cs---------------
.
.
using System;
using UnityEngine;

public class CelestialAnomalyDetector : MonoBehaviour
{
    public float anomalyThreshold = 5.0f; // Threshold to classify an event as an anomaly
    public event Action<CelestialEvent> OnAnomalyDetected;

    public void DetectAnomalies(CelestialEvent celestialEvent)
    {
        if (celestialEvent.impactFactor >= anomalyThreshold)
        {
            Debug.Log($"Anomaly Detected: {celestialEvent.eventName} with impact factor of {celestialEvent.impactFactor}");
            OnAnomalyDetected?.Invoke(celestialEvent);
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialAnomalyDetector.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEntity.cs---------------
.
.
using UnityEngine;
using System.Collections.Generic;

public class CelestialEntity : MonoBehaviour
{
    public string entityName;
    public float frequency;
    public float resonance;
    public float powerLevel;
    public Vector3 influenceZoneCenter;
    public float influenceRadius;
    public Dictionary<string, float> affirmations = new Dictionary<string, float>();

    private void Start()
    {
        influenceZoneCenter = transform.position;
        influenceRadius = CalculateInfluenceRadius();
    }

    private float CalculateInfluenceRadius()
    {
        return Mathf.Sqrt(powerLevel * resonance) * 10.0f;
    }

    public void UpdateInfluenceZone()
    {
        influenceRadius = CalculateInfluenceRadius();
    }

    public float GetIntentLevel()
    {
        float intentLevel = 0;
        foreach (var affirmation in affirmations.Values)
        {
            intentLevel += affirmation;
        }
        return intentLevel;
    }

    public void ResetIntentLevel()
    {
        affirmations.Clear();
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEntity.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEvent.cs---------------
.
.
using System;
using UnityEngine;

public class CelestialEvent: MonoBehaviour
{
    public Vector3 eventLocation;
    public string eventName;
    public string eventType;
    public System.DateTime eventDate;
    public System.DateTime eventEndDate;
    public float impactFactor;
    public bool IsActivated;

    // Constructor to initialize event properties
    public CelestialEvent(string name, System.DateTime date, float impact, string type, System.DateTime endDate)
    {
        eventName = name;
        eventType = type;
        eventDate = date;
        impactFactor = impact;
        eventEndDate = endDate;
        IsActivated = false;
    }

    public void ApplyEventInfluence(CelestialEntity entity)
    {
        // Calculate influence effect based on proximity and event strength
        float distance = Vector3.Distance(entity.transform.position, eventLocation);
        if (distance < entity.influenceRadius)
        {
            entity.powerLevel += impactFactor / (distance + 1); // Effect diminishes with distance
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEvent.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEventManager.cs---------------
.
.
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CelestialEventManager : MonoBehaviour
{
    private object enviroMgr; // Use object type to prevent errors if EnviroSkyMgr is missing

    public List<CelestialEvent> scheduledEvents = new List<CelestialEvent>();

    private void Start()
    {
        enviroMgr = FindObjectOfType(Type.GetType("EnviroSkyMgr"));
        StartCoroutine(ManageScheduledEvents());
        if (enviroMgr == null)
        {
            Debug.LogWarning("EnviroSkyMgr reference not assigned in the Inspector.");
            return;
        }
    }

    private IEnumerator ManageScheduledEvents()
    {
        DateTime currentDate = DateTime.Now;

        foreach (var celestialEvent in scheduledEvents)
        {
            if (!celestialEvent.IsActivated && celestialEvent.eventDate <= currentDate)
            {
                ActivateCelestialEvent(celestialEvent);
                celestialEvent.IsActivated = true;
            }

            if (celestialEvent.IsActivated && celestialEvent.eventEndDate <= currentDate)
            {
                EndCelestialEvent(celestialEvent);
            }
        }

        yield return new WaitForSeconds(60);
    }

    private void ActivateCelestialEvent(CelestialEvent celestialEvent)
    {
        if (celestialEvent.eventType == "Eclipse" && enviroMgr != null)
        {
            var weatherProperty = enviroMgr.GetType().GetProperty("Weather");
            var setOvercastMethod = weatherProperty?.PropertyType.GetMethod("SetOvercast");
            var weatherInstance = weatherProperty?.GetValue(enviroMgr, null);
            setOvercastMethod?.Invoke(weatherInstance, new object[] { 1.0f });

            Debug.Log($"Activated Celestial Event: {celestialEvent.eventName}");
        }
    }

    private void EndCelestialEvent(CelestialEvent celestialEvent)
    {
        Debug.Log($"Ended Celestial Event: {celestialEvent.eventName}");
        scheduledEvents.Remove(celestialEvent);
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialEventManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialForecastingSystem.cs---------------
.
.
using System;
using System.Collections.Generic;
using UnityEngine;

public class CelestialForecastingSystem : MonoBehaviour
{
    public List<CelestialEvent> forecastedEvents = new List<CelestialEvent>();
    public int forecastDays = 7;

    private void Start()
    {
        GenerateForecast();
    }

    private void GenerateForecast()
    {
        DateTime currentDate = DateTime.Now;

        for (int i = 1; i <= forecastDays; i++)
        {
            DateTime eventDate = currentDate.AddDays(i);
            DateTime endDate = eventDate.AddHours(2); // Set endDate separately

            CelestialEvent newEvent = new CelestialEvent(
                $"Alignment {i}",
                eventDate,
                1.0f + i * 0.2f,
                "Alignment",
                endDate
            );

            forecastedEvents.Add(newEvent);
            Debug.Log($"Forecasted Celestial Event: {newEvent.eventName} on {newEvent.eventDate}");
        }
    }

    public void AdjustEntityForForecast(CelestialEntity entity)
    {
        foreach (var forecastedEvent in forecastedEvents)
        {
            if (forecastedEvent.eventType == "Alignment")
            {
                entity.powerLevel += forecastedEvent.impactFactor * 0.1f;
            }
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CelestialForecastingSystem.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicFeedbackManager.cs---------------
.
.
using UnityEngine;

public class CosmicFeedbackManager : MonoBehaviour
{
    public float feedbackThreshold = 75.0f; // Power level needed to impact cosmic events
    public float cosmicImpactMultiplier = 1.5f; // Amplifies the impact of a feedback effect

    public void ApplyCosmicFeedback(CelestialEntity entity, CelestialEvent celestialEvent)
    {
        if (entity.powerLevel >= feedbackThreshold)
        {
            celestialEvent.impactFactor *= cosmicImpactMultiplier;
            Debug.Log($"{entity.entityName} has amplified the cosmic event {celestialEvent.eventName}!");
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicFeedbackManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicFluctuationManager.cs---------------
.
.
using System.Collections;
using UnityEngine;
using System.Collections.Generic;

public class CosmicFluctuationManager : MonoBehaviour
{
    public float baseFluctuationRate = 0.01f; // Rate at which fluctuation occurs over time
    public float maxFluctuation = 0.3f;       // Cap for maximum fluctuation impact
    public List<CelestialEntity> entities;

    private void Start()
    {
        StartCoroutine(ApplyCosmicFluctuations());
    }

    private IEnumerator ApplyCosmicFluctuations()
    {
        while (true)
        {
            foreach (var entity in entities)
            {
                float fluctuationEffect = Mathf.Sin(Time.time * baseFluctuationRate) * maxFluctuation;
                entity.powerLevel += fluctuationEffect;

                // Adjust influence radius based on power level change
                entity.UpdateInfluenceZone();

                Debug.Log($"{entity.entityName} cosmic fluctuation impact: {fluctuationEffect}");
            }
            
            yield return new WaitForSeconds(10); // Adjust interval for real-time update
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicFluctuationManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicPredictor.cs---------------
.
.
using System;
using System.Collections.Generic;
using UnityEngine;

public class CosmicPredictor : MonoBehaviour
{
    public List<float> pastIntensities = new List<float>(); // Store past values for time series analysis
    public float predictionFactor = 0.95f; // Adjustable factor for future prediction accuracy

    // Predict future intensity based on weighted average of past intensities
    public float PredictFutureIntensity()
    {
        if (pastIntensities.Count == 0) return 0;

        float predictedIntensity = 0;
        float weight = 1.0f;

        // Calculate weighted sum of past intensities
        for (int i = pastIntensities.Count - 1; i >= 0; i--)
        {
            predictedIntensity += pastIntensities[i] * weight;
            weight *= predictionFactor; // Decay weight over past data
        }

        return predictedIntensity / pastIntensities.Count;
    }

    // Record intensity data for predictive analysis
    public void RecordIntensity(float intensity)
    {
        pastIntensities.Add(intensity);
        if (pastIntensities.Count > 50) // Limit data size for efficiency
        {
            pastIntensities.RemoveAt(0);
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\CosmicPredictor.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\DynamicInfluenceZone.cs---------------
.
.
using UnityEngine;
using System;

public class DynamicInfluenceZone : MonoBehaviour
{
    public CelestialEntity entity;
    public float environmentalModifier = 1.0f;
    private object enviroMgr;

    private void Start()
    {
        if (enviroMgr != null)
        {
            // Your initialization logic using enviroMgr
        }
        else
        {
            Debug.LogWarning("EnviroSkyMgr reference not assigned in the Inspector.");
        }
    }

    private void Update()
    {
        AdjustInfluenceZone();
    }

    public void AdjustInfluenceZone()
    {
        entity.influenceRadius = Mathf.Sqrt(entity.powerLevel) * environmentalModifier * 10.0f;

        if (enviroMgr != null)
        {
            var weatherProperty = enviroMgr.GetType().GetProperty("Weather");
            var weatherInstance = weatherProperty?.GetValue(enviroMgr, null);
            var currentWeatherNameProperty = weatherInstance?.GetType().GetProperty("currentWeatherName");

            string currentWeather = currentWeatherNameProperty?.GetValue(weatherInstance, null) as string;
            if (currentWeather == "Storm")
            {
                entity.influenceRadius *= 1.2f;
            }
        }

        Debug.Log($"{entity.entityName} influence zone adjusted: Radius = {entity.influenceRadius}");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\DynamicInfluenceZone.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyChannelManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class EnergyChannelManager : MonoBehaviour
{
    public float amplificationFactor = 1.3f; // Multiplier for energy transfer across pathways
    public float transferRate = 0.1f; // Rate of energy transfer along pathways

    public void ChannelEnergy(List<CelestialEntity> entities)
    {
        for (int i = 0; i < entities.Count; i++)
        {
            for (int j = i + 1; j < entities.Count; j++)
            {
                if (entities[i] != entities[j] && ArePathwayConnected(entities[i], entities[j]))
                {
                    AmplifyAndTransferEnergy(entities[i], entities[j]);
                }
            }
        }
    }

    private bool ArePathwayConnected(CelestialEntity entityA, CelestialEntity entityB)
    {
        // Logic to check if a pathway connects entityA and entityB
        return Vector3.Distance(entityA.transform.position, entityB.transform.position) < entityA.influenceRadius;
    }

    private void AmplifyAndTransferEnergy(CelestialEntity sourceEntity, CelestialEntity targetEntity)
    {
        float energyTransfer = sourceEntity.powerLevel * transferRate;
        sourceEntity.powerLevel -= energyTransfer;
        targetEntity.powerLevel += energyTransfer * amplificationFactor;

        Debug.Log($"{sourceEntity.entityName} channels energy to {targetEntity.entityName} with amplification.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyChannelManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyFlowMapper.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(LineRenderer))]
public class EnergyFlowMapper : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public float connectionThreshold = 0.2f; // Minimum affinity required to form an energy connection
    public float energyTransferRate = 0.05f; // Rate at which energy flows between connected entities

    private LineRenderer lineRenderer;
    private List<Vector3> linePoints = new List<Vector3>();

    private void Start()
    {
        lineRenderer = GetComponent<LineRenderer>();
        lineRenderer.positionCount = 0;
    }

    private void Update()
    {
        UpdateEnergyFlows();
    }

    private void UpdateEnergyFlows()
    {
        linePoints.Clear();
        lineRenderer.positionCount = 0;

        foreach (var entityA in entities)
        {
            foreach (var entityB in entities)
            {
                if (entityA != entityB && IsConnected(entityA, entityB))
                {
                    TransferEnergy(entityA, entityB);
                    DrawConnection(entityA, entityB);
                }
            }
        }

        lineRenderer.positionCount = linePoints.Count;
        lineRenderer.SetPositions(linePoints.ToArray());
    }

    private bool IsConnected(CelestialEntity entityA, CelestialEntity entityB)
    {
        float affinity = Mathf.Abs(entityA.resonance - entityB.resonance);
        return affinity < connectionThreshold;
    }

    private void TransferEnergy(CelestialEntity fromEntity, CelestialEntity toEntity)
    {
        float energyFlow = fromEntity.powerLevel * energyTransferRate;
        fromEntity.powerLevel -= energyFlow;
        toEntity.powerLevel += energyFlow;
    }

    private void DrawConnection(CelestialEntity entityA, CelestialEntity entityB)
    {
        linePoints.Add(entityA.transform.position);
        linePoints.Add(entityB.transform.position);
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyFlowMapper.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyNetworkManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class EnergyNetworkManager : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public float transferThresholdDistance = 5.0f;
    public float energyTransferRate = 0.05f;

    private void Update()
    {
        entities.RemoveAll(entity => entity == null); // Clean up null references

        for (int i = 0; i < entities.Count; i++)
        {
            for (int j = i + 1; j < entities.Count; j++)
            {
                if (entities[i] == null || entities[j] == null) continue; // Skip if entity is null

                float distance = Vector3.Distance(entities[i].transform.position, entities[j].transform.position);
                if (distance <= transferThresholdDistance)
                {
                    float energyToTransfer = entities[i].powerLevel * energyTransferRate;
                    entities[i].powerLevel -= energyToTransfer;
                    entities[j].powerLevel += energyToTransfer;

                    Debug.Log($"{entities[i].entityName} transfers energy to {entities[j].entityName}");
                }
            }
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyNetworkManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyStabilizer.cs---------------
.
.
using UnityEngine;

public class EnergyStabilizer : MonoBehaviour
{
    public float minEnergyLevel = 0.0f;
    public float maxEnergyLevel = 100.0f;

    public void StabilizeEnergy(CelestialEntity entity)
    {
        // Clamp the entity's energy level within min and max limits
        entity.powerLevel = Mathf.Clamp(entity.powerLevel, minEnergyLevel, maxEnergyLevel);

        // Dynamically adjust influence radius based on energy level
        entity.influenceRadius = Mathf.Sqrt(entity.powerLevel) * 10.0f;
        Debug.Log($"{entity.entityName} energy stabilized. Current Power: {entity.powerLevel}, Influence Radius: {entity.influenceRadius}");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnergyStabilizer.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnhancedCelestialEventManager.cs---------------
.
.
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Reflection;

public class EnhancedCelestialEventManager : MonoBehaviour
{
    private object enviroMgr;
    public List<CelestialEvent> activeEvents = new List<CelestialEvent>();
    public float eventImpactMultiplier = 1.5f;

    private void Start()
    {
        // Try to get the type using the current assembly or fallback to reflection if needed
        Type enviroMgrType = Assembly.GetExecutingAssembly().GetType("EnviroSkyMgr");
        if (enviroMgrType == null)
        {
            Debug.LogWarning("EnviroSkyMgr type not found. Ensure the correct assembly is referenced.");
            return;
        }

        // Find the EnviroSkyMgr instance
        enviroMgr = FindObjectOfType(enviroMgrType);
        if (enviroMgr == null)
        {
            Debug.LogWarning("EnviroSkyMgr instance not found in the scene.");
            return;
        }

        // Continue with initialization if enviroMgr is valid
        StartCoroutine(TrackActiveEvents());
    }

    private IEnumerator TrackActiveEvents()
    {
        DateTime currentTime = DateTime.Now;

        foreach (var celestialEvent in activeEvents)
        {
            if (!celestialEvent.IsActivated && celestialEvent.eventDate <= currentTime)
            {
                ActivateCelestialEvent(celestialEvent);
                celestialEvent.IsActivated = true;
            }

            if (celestialEvent.IsActivated && celestialEvent.eventEndDate <= currentTime)
            {
                EndCelestialEvent(celestialEvent);
            }
        }

        yield return new WaitForSeconds(60); // Check every 60 seconds
    }

    private void ActivateCelestialEvent(CelestialEvent celestialEvent)
    {
        if (celestialEvent.eventType == "Meteor Shower" && enviroMgr != null)
        {
            var weatherProperty = enviroMgr.GetType().GetProperty("Weather");
            var setOvercastMethod = weatherProperty?.PropertyType.GetMethod("SetOvercast");
            var weatherInstance = weatherProperty?.GetValue(enviroMgr, null);
            setOvercastMethod?.Invoke(weatherInstance, new object[] { 0.5f });

            foreach (var entity in FindObjectsOfType<CelestialEntity>())
            {
                entity.powerLevel *= eventImpactMultiplier;
                entity.UpdateInfluenceZone();
            }
        }

        Debug.Log($"Activated Celestial Event: {celestialEvent.eventName}");
    }

    private void EndCelestialEvent(CelestialEvent celestialEvent)
    {
        Debug.Log($"Ended Celestial Event: {celestialEvent.eventName}");

        foreach (var entity in FindObjectsOfType<CelestialEntity>())
        {
            entity.powerLevel /= eventImpactMultiplier;
            entity.UpdateInfluenceZone();
        }

        activeEvents.Remove(celestialEvent);
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnhancedCelestialEventManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityInteractionManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class EntityInteractionManager : MonoBehaviour
{
    public float interactionStrength = 0.05f; // Base multiplier for influence effect

    public void ApplyCrossEntityEffects(List<CelestialEntity> entities)
    {
        for (int i = 0; i < entities.Count; i++)
        {
            for (int j = i + 1; j < entities.Count; j++)
            {
                float distance = Vector3.Distance(entities[i].transform.position, entities[j].transform.position);

                if (distance < entities[i].influenceRadius && distance < entities[j].influenceRadius)
                {
                    // Adjust power levels based on interaction strength
                    entities[i].powerLevel += entities[j].powerLevel * interactionStrength;
                    entities[j].powerLevel += entities[i].powerLevel * interactionStrength;

                    Debug.Log($"{entities[i].entityName} and {entities[j].entityName} interact: Adjusted power levels.");
                }
            }
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityInteractionManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityLifecycleManager.cs---------------
.
.
using UnityEngine;

public class EntityLifecycleManager : MonoBehaviour
{
    public float evolutionThreshold = 100.0f; // Threshold for evolving
    public float minPowerLevelForDecay = 5.0f; // Minimum power level before decay is applied
    public float decayRate = 1.0f;

    public event System.Action<CelestialEntity> OnEntityExpired;

    public void ManageEntityLifecycle(CelestialEntity entity)
    {
        // Ensure the entity is valid and has a sufficient initial power level
        if (entity == null || entity.powerLevel < minPowerLevelForDecay) return;

        if (entity.powerLevel >= evolutionThreshold)
        {
            TransformEntity(entity);
        }
        else if (entity.powerLevel <= 0)
        {
            ExpireEntity(entity);
        }
        else
        {
            DecayEntity(entity);
        }
    }

    private void TransformEntity(CelestialEntity entity)
    {
        entity.powerLevel *= 1.5f;
        entity.influenceRadius *= 1.3f;
        Debug.Log($"{entity.entityName} has evolved!");
    }

    private void ExpireEntity(CelestialEntity entity)
    {
        OnEntityExpired?.Invoke(entity); // Notify GameController
        Destroy(entity.gameObject);
        Debug.Log($"{entity.entityName} has expired.");
    }

    private void DecayEntity(CelestialEntity entity)
    {
        // Decay only if powerLevel is above the minimum threshold for decay
        if (entity.powerLevel > minPowerLevelForDecay)
        {
            entity.powerLevel -= decayRate * Time.deltaTime;
            if (entity.powerLevel < 0) entity.powerLevel = 0;
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityLifecycleManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityStateLogger.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class EntityStateLogger : MonoBehaviour
{
    public Dictionary<CelestialEntity, List<EntityState>> entityStates = new Dictionary<CelestialEntity, List<EntityState>>();

    public void LogState(CelestialEntity entity)
    {
        if (!entityStates.ContainsKey(entity))
            entityStates[entity] = new List<EntityState>();

        var currentState = new EntityState(entity.powerLevel, entity.influenceRadius, Time.time);
        entityStates[entity].Add(currentState);

        Debug.Log($"{entity.entityName} state logged: Power Level - {currentState.PowerLevel}, Influence Radius - {currentState.InfluenceRadius}");
    }
}

[System.Serializable]
public class EntityState
{
    public float PowerLevel;
    public float InfluenceRadius;
    public float Timestamp;

    public EntityState(float powerLevel, float influenceRadius, float timestamp)
    {
        PowerLevel = powerLevel;
        InfluenceRadius = influenceRadius;
        Timestamp = timestamp;
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EntityStateLogger.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnviroIntegration.cs---------------
.
.
using UnityEngine;
using System;

public class EnviroIntegration : MonoBehaviour
{
    private object enviroMgr;

    private void Start()
    {
        // Use reflection to locate EnviroSkyMgr
        var enviroMgrType = Type.GetType("EnviroSkyMgr, AssemblyName"); // Replace AssemblyName if necessary
        if (enviroMgrType != null)
        {
            enviroMgr = FindObjectOfType(enviroMgrType);

            if (enviroMgr != null)
            {
                var setTimeMethod = enviroMgrType.GetMethod("SetTime");
                setTimeMethod?.Invoke(enviroMgr, new object[] { 12, 0, 0 });
            }
            else
            {
                Debug.LogWarning("EnviroSkyMgr instance not found in the scene.");
            }
        }
        else
        {
            Debug.LogWarning("EnviroSkyMgr type not found. Ensure the correct assembly is referenced.");
        }
    }
    
    public void ScheduleCelestialEvent(CelestialEvent celestialEvent)
    {
        if (celestialEvent.eventType == "Eclipse" && enviroMgr != null)
        {
            var weatherProperty = enviroMgr.GetType().GetProperty("Weather");
            var setOvercastMethod = weatherProperty?.PropertyType.GetMethod("SetOvercast");
            var weatherInstance = weatherProperty?.GetValue(enviroMgr, null);
            setOvercastMethod?.Invoke(weatherInstance, new object[] { 1.0f });

            Debug.Log($"Scheduled Eclipse Event: {celestialEvent.eventName} on {celestialEvent.eventDate}");
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EnviroIntegration.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EventChainManager.cs---------------
.
.
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EventChainManager : MonoBehaviour
{
    public List<CelestialEvent> eventChain;
    public float chainInterval = 5f; // Time interval between chained events

    private void Start()
    {
        StartCoroutine(TriggerEventChain());
    }

    private IEnumerator TriggerEventChain()
    {
        foreach (var celestialEvent in eventChain)
        {
            TriggerEvent(celestialEvent);
            yield return new WaitForSeconds(chainInterval); // Wait before triggering next event
        }
    }

    private void TriggerEvent(CelestialEvent celestialEvent)
    {
        // Apply event effects
        Debug.Log($"Triggering Event in Chain: {celestialEvent.eventName}");

        // Custom logic to apply event effects
        foreach (var entity in FindObjectsOfType<CelestialEntity>())
        {
            celestialEvent.ApplyEventInfluence(entity);
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EventChainManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EventDrivenTransformationManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class EventDrivenTransformationManager : MonoBehaviour
{
    public void TriggerTransformations(CelestialEvent celestialEvent, List<CelestialEntity> entities)
    {
        foreach (var entity in entities)
        {
            if (IsEntityAffectedByEvent(entity, celestialEvent))
            {
                ApplyTransformation(entity, celestialEvent);
            }
        }
    }

    private bool IsEntityAffectedByEvent(CelestialEntity entity, CelestialEvent celestialEvent)
    {
        // Determine if the event affects the entity based on resonance or alignment
        return Mathf.Abs(entity.resonance - celestialEvent.impactFactor) < 0.2f;
    }

    private void ApplyTransformation(CelestialEntity entity, CelestialEvent celestialEvent)
    {
        entity.powerLevel *= 1.5f;
        entity.influenceRadius *= 1.3f;
        
        // Example visual change: Change color or model for transformation effect
        entity.GetComponent<Renderer>().material.color = Color.magenta;

        Debug.Log($"{entity.entityName} transformed during {celestialEvent.eventName} event.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\EventDrivenTransformationManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\GameController.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class GameController : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public CosmicFeedbackManager cosmicFeedbackManager;
    public ResonanceAmplifier resonanceAmplifier;
    public EntityLifecycleManager lifecycleManager;
    public AstralPathwayGenerator pathwayGenerator;
    public AuraVisualizer auraVisualizer;

    private void Start()
    {
        foreach (var entity in entities)
        {
            Instantiate(auraVisualizer, entity.transform);
        }
        lifecycleManager.OnEntityExpired += HandleEntityExpired; // Subscribe to entity expiration event
    }

    private void Update()
    {
        // Iterate backwards to safely remove elements from the list while iterating
        for (int i = entities.Count - 1; i >= 0; i--)
        {
            var entity = entities[i];
            if (entity == null)
            {
                entities.RemoveAt(i);
                continue;
            }

            lifecycleManager.ManageEntityLifecycle(entity);
        }

        pathwayGenerator.GeneratePathways();

        foreach (var entity in entities)
        {
            foreach (var celestialEvent in FindObjectsOfType<CelestialEvent>())
            {
                cosmicFeedbackManager.ApplyCosmicFeedback(entity, celestialEvent);
            }
        }

        var alignedEntities = GetAlignedEntities();
        resonanceAmplifier.ApplyResonanceAmplification(alignedEntities);
    }

    private void HandleEntityExpired(CelestialEntity expiredEntity)
    {
        entities.Remove(expiredEntity);
    }

    private List<CelestialEntity> GetAlignedEntities()
    {
        var alignedEntities = new List<CelestialEntity>();

        foreach (var entityA in entities)
        {
            foreach (var entityB in entities)
            {
                if (entityA != entityB && Mathf.Abs(entityA.resonance - entityB.resonance) < 0.1f)
                {
                    alignedEntities.Add(entityA);
                    break;
                }
            }
        }
        return alignedEntities;
    }

    private void OnDestroy()
    {
        lifecycleManager.OnEntityExpired -= HandleEntityExpired; // Unsubscribe to avoid memory leaks
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\GameController.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\GroupDynamicsManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class GroupDynamicsManager : MonoBehaviour
{
    public List<CelestialEntity> entities;
    public float resonanceThreshold = 0.15f; // Resonance difference threshold to form a group
    public float groupBoostMultiplier = 1.5f; // Boost for entities in a resonance group

    private List<List<CelestialEntity>> groups = new List<List<CelestialEntity>>();

    private void Update()
    {
        FormResonanceGroups();
        ApplyGroupBoosts();
    }

    private void FormResonanceGroups()
    {
        groups.Clear();

        foreach (var entityA in entities)
        {
            List<CelestialEntity> group = new List<CelestialEntity> { entityA };

            foreach (var entityB in entities)
            {
                if (entityA != entityB && IsInResonance(entityA, entityB))
                {
                    group.Add(entityB);
                }
            }

            if (group.Count > 1)
            {
                groups.Add(group);
            }
        }
    }

    private bool IsInResonance(CelestialEntity entityA, CelestialEntity entityB)
    {
        return Mathf.Abs(entityA.resonance - entityB.resonance) <= resonanceThreshold;
    }

    private void ApplyGroupBoosts()
    {
        foreach (var group in groups)
        {
            float collectiveBoost = group.Count * groupBoostMultiplier;

            foreach (var entity in group)
            {
                entity.powerLevel += collectiveBoost;
                Debug.Log($"{entity.entityName} receives group boost of {collectiveBoost}");
            }
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\GroupDynamicsManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\HarmonicAlignment.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class HarmonicAlignment : MonoBehaviour
{
    public List<CelestialEntity> entities;

    // Check if entities are in harmonic alignment within a threshold
    public List<CelestialEntity> GetHarmonicallyAlignedEntities(CelestialEntity targetEntity, float alignmentThreshold)
    {
        List<CelestialEntity> alignedEntities = new List<CelestialEntity>();

        foreach (var entity in entities)
        {
            if (entity != targetEntity)
            {
                float alignmentScore = Mathf.Abs(entity.resonance - targetEntity.resonance);
                if (alignmentScore <= alignmentThreshold)
                {
                    alignedEntities.Add(entity);
                }
            }
        }

        return alignedEntities;
    }

    // Apply power boost to entities based on harmonic alignment
    public void ApplyHarmonicBoost(CelestialEntity targetEntity, float boostFactor)
    {
        var alignedEntities = GetHarmonicallyAlignedEntities(targetEntity, 0.1f); // Example threshold

        foreach (var entity in alignedEntities)
        {
            entity.powerLevel += targetEntity.powerLevel * boostFactor;
            Debug.Log($"{targetEntity.entityName} harmonically boosted {entity.entityName}");
        }
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\HarmonicAlignment.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\InfluenceZone.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class InfluenceZone : MonoBehaviour
{
    public CelestialEntity entity;
    private List<CelestialEntity> nearbyEntities;

    private void Start()
    {
        nearbyEntities = new List<CelestialEntity>();
    }

    private void Update()
    {
        CheckForNearbyEntities();
    }

    private void CheckForNearbyEntities()
    {
        Collider[] hitColliders = Physics.OverlapSphere(entity.influenceZoneCenter, entity.influenceRadius);
        foreach (var hitCollider in hitColliders)
        {
            CelestialEntity otherEntity = hitCollider.GetComponent<CelestialEntity>();
            if (otherEntity != null && otherEntity != entity && !nearbyEntities.Contains(otherEntity))
            {
                nearbyEntities.Add(otherEntity);
                ApplyInfluence(otherEntity);
            }
        }
    }

    private void ApplyInfluence(CelestialEntity targetEntity)
    {
        // Calculate influence effect based on entity's frequency and resonance
        targetEntity.powerLevel += entity.powerLevel * 0.1f; // Adjust influence effect as needed
        Debug.Log($"{entity.entityName} influences {targetEntity.entityName}");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\InfluenceZone.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentInteractionManager.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

public class IntentInteractionManager : MonoBehaviour
{
    public float baseInfluenceMultiplier = 0.2f;

    public void ApplyIntentInteraction(CelestialEntity entityA, CelestialEntity entityB)
    {
        // Calculate influence based on entity's stored intent level and affirmations
        float intentFactorA = entityA.GetIntentLevel() * baseInfluenceMultiplier;
        float intentFactorB = entityB.GetIntentLevel() * baseInfluenceMultiplier;

        // Adjust power levels based on intent-driven influence
        entityA.powerLevel += intentFactorB;
        entityB.powerLevel += intentFactorA;

        Debug.Log($"{entityA.entityName} and {entityB.entityName} interact with intent-driven influence.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentInteractionManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentPowerManager.cs---------------
.
.
using UnityEngine;
using System.Collections.Generic;

public class IntentPowerManager : MonoBehaviour
{
    public Dictionary<CelestialEntity, float> entityIntents = new Dictionary<CelestialEntity, float>();
    public float cosmicMultiplier = 1.2f; // Adjusts intent power based on cosmic events

    public void AffirmIntent(CelestialEntity entity, float affirmationPower)
    {
        if (entityIntents.ContainsKey(entity))
        {
            entityIntents[entity] += affirmationPower * cosmicMultiplier;
        }
        else
        {
            entityIntents.Add(entity, affirmationPower * cosmicMultiplier);
        }

        Debug.Log($"{entity.entityName} affirmed intent with power: {affirmationPower * cosmicMultiplier}");
    }

    // Update entity power based on intent, harmonics, and cosmic influence
    public void UpdateIntentPower(CelestialEntity entity, float basePower, float harmonicInfluence)
    {
        float intentPower = basePower * harmonicInfluence * cosmicMultiplier;
        entity.powerLevel += intentPower;
        Debug.Log($"{entity.entityName} intent power updated to: {entity.powerLevel}");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentPowerManager.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentTriggerSystem.cs---------------
.
.
using UnityEngine;

public class IntentTriggerSystem : MonoBehaviour
{
    public float triggerThreshold = 10.0f; // Threshold for intent-triggered actions

    public void CheckIntentTrigger(CelestialEntity entity)
    {
        if (entity.GetIntentLevel() >= triggerThreshold)
        {
            ActivateTransformation(entity);
            entity.ResetIntentLevel(); // Reset intent after activation
        }
    }

    private void ActivateTransformation(CelestialEntity entity)
    {
        entity.powerLevel *= 1.5f; // Example transformation effect: increase power level
        entity.influenceRadius *= 1.2f; // Expand influence radius
        Debug.Log($"{entity.entityName} has triggered a transformation based on intent.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\IntentTriggerSystem.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\ResonanceAmplifier.cs---------------
.
.
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ResonanceAmplifier : MonoBehaviour
{
    public float resonanceAmplificationFactor = 2.0f;
    public float resonanceDuration = 5.0f;

    public void ApplyResonanceAmplification(List<CelestialEntity> alignedEntities)
    {
        foreach (var entity in alignedEntities)
        {
            StartCoroutine(AmplifyEntity(entity));
        }
    }

    private IEnumerator AmplifyEntity(CelestialEntity entity)
    {
        float originalPower = entity.powerLevel;
        entity.powerLevel *= resonanceAmplificationFactor;
        Debug.Log($"{entity.entityName} is in resonance amplification!");

        yield return new WaitForSeconds(resonanceDuration);

        entity.powerLevel = originalPower;
        Debug.Log($"{entity.entityName}'s resonance amplification has ended.");
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\ResonanceAmplifier.cs---------------
.
.
#---------------BEGIN FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\TimeSeriesPredictor.cs---------------
.
.
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "NewTimeSeriesPredictor", menuName = "Predictors/TimeSeriesPredictor")]
public class TimeSeriesPredictor : MonoBehaviour
{
    public List<float> dataSeries = new List<float>();
    public int predictionWindow = 5; // Number of past data points to consider for prediction
    public float learningRate = 0.1f;

    // Add new data and predict the next value based on recent trends
    public float PredictNextValue(float newData)
    {
        dataSeries.Add(newData);
        if (dataSeries.Count > predictionWindow)
        {
            dataSeries.RemoveAt(0);
        }

        // Compute a basic weighted average as a mock predictive model
        float prediction = 0f;
        float weight = 1f;

        for (int i = 0; i < dataSeries.Count; i++)
        {
            prediction += dataSeries[i] * weight;
            weight *= learningRate; // Decay weight over the window
        }

        prediction /= predictionWindow;
        return prediction;
    }
}
.
.
#---------------END FILE: C:\Users\EdgeLoreDomain\Documents\CODEBASE_CS\OLD\TimeSeriesPredictor.cs---------------
.
.
